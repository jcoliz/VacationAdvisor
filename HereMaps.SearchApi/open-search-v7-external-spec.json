{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Geocoding and Search API v7",
    "description" : "This document describes the Geocoding and Search API.\n\n### \"ALPHA\" & \"BETA\" tags\n\n- API requests parameters and response fields can be tagged with one of the following maturity qualifiers: alpha, beta\n- \"ALPHA\" tagged features are in mid-stage development. They can change or in rare cases be removed.\n  No backward compatibility is guaranteed nor bug service level agreement (SLA) do apply.\n  Customers using ALPHA features are advised not use them in production.\n- \"BETA\" tagged features are in end-stage development. They are backward compatible and can not be removed.\n  They have no major bug, but coverage, quality, performance, or test coverage is not considered final.\n  customers can safely use BETA features in their applications if they accept those limitations and potential behavior refinements.\n\n### \"RESTRICTED\" tag\n\nAPI requests parameters and response fields can be tagged with the privilege qualifier \"RESTRICTED\".\nSuch features are only available to customers having a specific contract with HERE.\nUnauthorized usages are typically leading to a http status code 403.\n\n\n",
    "version" : "7.139"
  },
  "externalDocs" : {
    "description" : "The developer guide, release notes, and migration guide are available here.",
    "url" : "https://www.here.com/docs/category/geocoding-search-v7"
  },
  "servers" : [ {
    "url" : "https://geocode.search.hereapi.com/v1"
  } ],
  "security" : [ {
    "Bearer" : [ ]
  }, {
    "ApiKey" : [ ]
  } ],
  "paths" : {
    "/geocode" : {
      "get" : {
        "summary" : "Geocode",
        "description" : "This endpoint allows to find the geo-coordinates of a known address, place, locality or\nadministrative area, even if the query is incomplete or partly incorrect. It also returns a\ncomplete postal address string and address details. It supports structured, unstructured and\nhybrid queries - combinations of structured and unstructured query elements.",
        "parameters" : [ {
          "name" : "addressNamesMode",
          "in" : "query",
          "description" : "This option allows users to choose between displaying normalized or matched address fields in the response,\naffecting the names in the address block, the address label, and the result title.\nThis option is relevant when there is a difference between administrative naming and postal or common naming conventions, or when addressing with alternative street names.\nBy default, geocoding results provide matched names for administrative places and normalized (official) names for street names.\n\nDescription of supported values:\n\n- `matched`: The service returns matched names for address fields.\n- `normalized`: The service returns normalized (primary) names for address fields.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "matched", "normalized" ]
          }
        }, {
          "name" : "at",
          "in" : "query",
          "description" : "Specify the center of the search context expressed as coordinates.\n\nFormat: `{latitude},{longitude}`\n\nType: `{decimal},{decimal}`\n\nExample: `-13.163068,-72.545128` (Machu Picchu Mountain, Peru)\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "in",
          "in" : "query",
          "description" : "Search within a geographic area. This is a hard filter. Results will be returned if they are located within the specified area.\n\nA geographic area can be\n\n * a country (or multiple countries), provided as comma-separated [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country codes\n\n   The country codes are to be provided in all uppercase.\n\n   Format: `countryCode:{countryCode}[,{countryCode}]*`\n\n   Examples:\n    * `countryCode:USA`\n    * `countryCode:CAN,MEX,USA`\n\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "postalCodeMode",
          "in" : "query",
          "description" : "Options to return multiple results in areas where a postal code is associated with more than one district or city area.\nWithout these options, the system only provides one result and may leave the district or city name blank or use a default name,\npotentially omitting relevant districts of cities.\n\nDescription of supported values:\n\n- `cityLookup`: When a postal code spans multiple cities, this option gives you all possible combinations of the postal code with the corresponding city names.\n- `districtLookup`: When a postal code spans multiple districts (within one city or across multiple cities), this option gives you all possible combinations of the postal code with the corresponding district and city names.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "cityLookup", "districtLookup" ]
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Enter a free-text query\n\nExamples:\n * `125, Berliner, berlin`\n * `Beacon, Boston, Hospital`\n * `Schnurrbart German Pub and Restaurant, Hong Kong`\n\n_Note: Either `q` or `qq`-parameter is required on this endpoint. Both parameters can be provided in the same request._\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "Invalidenstra√üe 116 Berlin"
          }
        }, {
          "name" : "qq",
          "in" : "query",
          "description" : "Enter a qualified query. A qualified query is similar to a free-text query, but in a structured manner.\n It can take multiple _sub-parameters_, separated by semicolon, allowing to specify different aspects of a query.\n\nCurrently supported _sub-parameters_ are `country`, `state`, `county`, `city`, `district`, `street`,\n `houseNumber`, and `postalCode`.\n\nFormat: `{sub-parameter}={string}[;{sub-parameter}={string}]*`\n\nExamples:\n * `city=Berlin;country=Germany;street=Friedrichstr;houseNumber=20`\n * `city=Berlin;country=Germany`\n * `postalCode=10969`\n\n_Note: Either `q` or `qq`-parameter is required on this endpoint. Both parameters can be provided in the same request._\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "types",
          "in" : "query",
          "description" : "A comma-separated list of the types that should be included in the response.\n\nIf this parameter is not set, all types are considered for the response.\n\nDescription of supported values:\n\n- `address`: restricting results to result types `houseNumber`, `street`, `postalCodePoint`, `intersection`, or `addressBlock`\n- `area`: restricting results to result types `locality` or `administrativeArea` including all the sub-types\n- `city`: restricting results to result type `locality` and locality type `city`\n- `houseNumber`: restricting results to result type: `houseNumber`, including house number types `PA` (Point Address), `MPA` (Micro Point Address) and\n  `interpolated`, including exact house number matches and house number fallbacks\n- `place`: restricting results to result type `place`\n- `postalCode`: restricting results to postal codes: either result type `postalCodePoint` or result type `locality` with locality type `postalCode`.\n\n    Note that in Ireland and Singapore, where each address has unique postal code,\n    `postalCodePoint` results are replaced by `houseNumber` results.\n- `street`: restricting results to result type `street`",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "address", "area", "city", "houseNumber", "place", "postalCode", "street" ]
            }
          }
        }, {
          "name" : "with",
          "in" : "query",
          "description" : "Activate certain features or consider specific kinds of results, that would not be active or provided by default.\n\nDescription of supported values:\n\n- **RESTRICTED** `MPA`: Enables geocoding to Micro Point Address results. GS7 supports micro point addresses in the following countries: AUS, CAN, NZL, USA, PRI.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "MPA" ]
            }
          }
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Select the language to be used for result rendering from a list of [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) compliant language codes.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of results to be returned.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32",
            "default" : 20
          }
        }, {
          "name" : "politicalView",
          "in" : "query",
          "description" : "Toggle the political view.\n\nThis parameter accepts a single ISO 3166-1 alpha-3 country code in all uppercase.\n\nIf a valid 3-letter country code is provided for which GS7 does not have a dedicated political view, it will fallback to the default view.\n\nThe following political views are currently supported:\n\n- `ARG`: Argentina's view on the Southern Patagonian Ice Field and Tierra Del Fuego, including the Falkland Islands, South Georgia, and South Sandwich Islands\n- `EGY`: Egypt's view on Bir Tawil\n- `IND`: India's view on Gilgit-Baltistan\n- `KEN`: Kenya's view on the Ilemi Triangle\n- `MAR`: Morocco's view on Western Sahara\n- `PAK`: Pakistan's view on Jammu and Kashmir and the Junagadh Area\n- `RUS`: Russia's view on Crimea\n- `SDN`: Sudan's view on the Halaib Triangle\n- `SRB`: Serbia's view on Kosovo, Vukovar, and Sarengrad Islands\n- `SUR`: Suriname's view on the Courantyne Headwaters and Lawa Headwaters\n- `SYR`: Syria's view on the Golan Heights\n- `TUR`: Turkey's view on Cyprus and Northern Cyprus\n- `TZA`: Tanzania's view on Lake Malawi\n- `URY`: Uruguay's view on Rincon de Artigas\n- `VNM`: Vietnam's view on the Paracel Islands and Spratly Islands",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "show",
          "in" : "query",
          "description" : "Select additional fields to be rendered in the response.\nPlease note that some of the fields involve additional webservice calls and can increase the overall response time.\n\nThe value is a comma-separated list of the sections to be enabled.\nFor some sections there is a long and a short ID.\n\nDescription of supported values:\n\n- `countryInfo`: For each result item renders additional block with the country info, such as\n  [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) and\n  [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country code.\n- `parsing`\n- `postalCodeDetails`: For each result item of types `postalCodePoint` renders block with additional information about this postal code,\n  such as postal code type: ZIP or ZIP+4; ZIP classification code: PO BOX, Unique or military; record type code for ZIP+4 codes.\n  This feature is currently available only in the countries which are using ZIP codes - USA, PRI, VIR, GUM, MNP and ASM.\n- `secondaryUnitInfo`: For each matched unit designator, the geocode endpoint returns an additional block\n  containing the normalized unit type and unit value. GS7 geocode currently supports\n  normalized secondary unit info in the following countries:\n  AUS, AUT, BRA, CAN, ESP, FRA, GBR, IDN, IND, NZL, TUR, TWN, USA.\n- `streetInfo`: For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.\n- `tz`: Renders result items with additional time zone information.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "countryInfo", "parsing", "postalCodeDetails", "secondaryUnitInfo", "streetInfo", "tz" ]
            }
          }
        }, {
          "name" : "showMapReferences",
          "in" : "query",
          "description" : "Return the map references of the location objects\n\nDescription of supported values:\n\n- `adminIds`: Return the ids for the admin hierarchy of the response, to enable cross referencing into other services or data applications based on HERE Map Content\n- `cmVersion`: Return the core map version number of the region where the result is located\n- `links`: Return the link references from the result's access position,\n  to enable cross referencing into other services or data applications\n- `pointAddress`: Return the reference of the point address,\n  to enable cross referencing into other services or data applications\n  based on HERE Map Content\n- `segments`: Return the street segment references from the result's access position,\n  to enable cross referencing into other services or data applications\n  based on HERE Map Content\n\n    **NOTE** The previous parameter `show=hmcReference` is deprecated and replaced\n    by `showMapReferences=segments` which serves the same purpose.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "adminIds", "cmVersion", "links", "pointAddress", "segments" ]
            }
          }
        }, {
          "name" : "showNavAttributes",
          "in" : "query",
          "description" : "Return requested additional attributes for segments in a road network if `showNavAttributes` parameter is specified with valid value and relevant data is available.\n\nThe value is a comma-separated list of the sections to be enabled.\n\nDescription of supported values:\n\n- `access`: Return the vehicle types allowed on a road or lane.\n- `functionalClass`: Return the functional class which is used to classify roads depending on the speed, importance and connectivity of the road.\n- `physical`: Return the values to describe special physical characteristics of a road.\n- `speedLimits`: Include speed limit and travel direction of the road in the results where available in content and when requested by the client application.\n\n  Note on `speedLimits`:\n  - The feature is not supported in Japan.\n  - This feature is subject to premium pricing. For details, contact your HERE customer representative.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "access", "functionalClass", "physical", "speedLimits" ]
            }
          }
        }, {
          "name" : "showRelated",
          "in" : "query",
          "description" : "allows enriching some types of response items with related items\n\nDescription of supported values:\n\n- **RESTRICTED** `MPA`: For `type=houseNumber` and `houseNumberType=PA` result items, include a block containing a list of micro point addresses associated to this address, such as buildings, floors (levels) or suites (units). GS7 supports micro point addresses in the following countries: AUS, CAN, NZL, USA, PRI.\n- `intersections`: For street and house number results, include a block containing a list of intersections nearest to the address.\n- **RESTRICTED** `parentPA`: For `type=houseNumber` and `houseNumberType=MPA` result items, include a block containing the \"parent\" point addresses associated with this micro point address. GS7 supports micro point addresses in the following countries: AUS, CAN, NZL, USA, PRI.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "MPA", "intersections", "parentPA" ]
            }
          }
        }, {
          "name" : "showTranslations",
          "in" : "query",
          "description" : "Shows translations and alternative names of the provided fields in all available languages.\n\nThis parameter accepts comma separated list of allowed fields for which translations are required.\n\nDescription of supported values:\n\n- `city`: shows alternative names and translations available for address field `city`\n- `county`: shows alternative names and translations available for address field `county`\n- `district`: shows alternative names and translations available for address field `district`\n- `state`: shows alternative names and translations available for address field `state`",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "city", "county", "district", "state" ]
            }
          }
        }, {
          "name" : "X-Request-ID",
          "in" : "header",
          "description" : "Used to correlate requests with their responses within a customer's application, for logging and error reporting.\n\nFormat: Free string, but a valid UUIDv4 is recommended.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The search results.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OpenSearchGeocodeResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Client error: request failed validation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405" : {
            "description" : "Client error: http method not supported.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Client error: Rate limit exceeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503" : {
            "description" : "Temporary server error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "servers" : [ {
        "url" : "https://geocode.search.hereapi.com/v1"
      } ]
    },
    "/discover" : {
      "get" : {
        "summary" : "Discover",
        "description" : "This endpoint processes a free-form text query for an address or place, and returns results in order of relevance.",
        "parameters" : [ {
          "name" : "q",
          "in" : "query",
          "description" : "Enter a free-text query\n\nExamples:\n * `125, Berliner, berlin`\n * `Beacon, Boston, Hospital`\n * `Schnurrbart German Pub and Restaurant, Hong Kong`\n\n _Note: Whitespace, urls, email addresses, or other out-of-scope queries will yield no results.\n",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "Eismieze Berlin"
          }
        }, {
          "name" : "at",
          "in" : "query",
          "description" : "Specify the center of the search context expressed as coordinates\n\nFormat: `{latitude},{longitude}`\n\nType: `{decimal},{decimal}`\n\nExample: `-13.163068,-72.545128` (Machu Picchu Mountain, Peru)\n\nThe following constraints apply:\n\n * One of \"at\", \"in=circle\" or \"in=bbox\" is required.\n\n * Parameters \"at\", \"in=circle\" and \"in=bbox\" are mutually exclusive. Only one of them is allowed.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "52.5308,13.3856"
          }
        }, {
          "name" : "in",
          "in" : "query",
          "description" : "Search within a geographic area. This is a hard filter. Results will be returned if they are located within the specified area.\n\nA geographic area can be\n\n * a country (or multiple countries), provided as comma-separated [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country codes\n\n   The country codes are to be provided in all uppercase.\n\n   Format: `countryCode:{countryCode}[,{countryCode}]*`\n\n   Examples:\n    * `countryCode:USA`\n    * `countryCode:CAN,MEX,USA`\n\n\n * a circular area, provided as latitude, longitude, and radius (in meters)\n\n   Format: `circle:{latitude},{longitude};r={radius}`\n\n   Type: `circle:{decimal},{decimal};r={integer}`\n\n   Example: `circle:52.53,13.38;r=10000`\n\n\n * a bounding box, provided as _west longitude_, _south latitude_, _east longitude_, _north latitude_\n\n   Format: `bbox:{west longitude},{south latitude},{east longitude},{north latitude}`\n\n   Example: `bbox:13.08836,52.33812,13.761,52.6755`\n\n\nThe following constraints apply:\n\n * One of \"at\", \"in=circle\" or \"in=bbox\" is required.\n\n * Parameters \"at\", \"in=circle\" and \"in=bbox\" are mutually exclusive. Only one of them is allowed.\n\n * The \"in=countryCode\" parameter must be accompanied by exactly one of \"at\", \"in=circle\" or \"in=bbox\".\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "mobilityMode",
          "in" : "query",
          "description" : "This field indicates the mode of mobility used by the end user when interacting with the Search\nservice through the customer application. The information is used to improve the relevance of\nsearch results.\n\nFor example, a search for ‚ÄúEV charging station‚Äù will preferentially return charging stations\nsuitable for trucks when the `mobilityMode` field is set to `truck`.\n\nThe `mobilityMode` field accepts a single value.\n\n\nDescription of supported values:\n\n- `car`: A standard motor vehicle primarily designed to transport up to 8 people, rather than cargo.\n- `motorbike`: A two-wheeled vehicle typically used by one or two people, suitable for commuting or long-distance travel.\n- `truck`: A larger vehicle primarily designed for transporting freight.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "car", "motorbike", "truck" ]
          }
        }, {
          "name" : "ranking",
          "in" : "query",
          "description" : "**BETA** Selects the ranking mode to be used.\nThis parameter only applies to places category or chain search use cases (See [discover-use-cases](https://www.here.com/docs/bundle/geocoding-and-search-api-developer-guide/page/topics/endpoint-discover-brief.html#use-cases)).\nIt is ignored for other search use cases.\n\n\nDescription of supported values:\n\n- **BETA** `excursionDistance`: Rank results in along the route parameter by increasing distance\n  from the route polyline.\n\n  Constraint: `ranking=excursionDistance` returns a 400 status code if the `route` parameter is not specified.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "excursionDistance" ]
          }
        }, {
          "name" : "route",
          "in" : "query",
          "description" : "**BETA** Select within a geographic corridor. This is a hard filter. Results will be returned if they are located within the specified area.\n\nA `route` is defined by a [Flexible Polyline Encoding](https://github.com/heremaps/flexible-polyline),\n followed by an optional width, represented by a sub-parameter \"w\".\n\nFormat: `{route};w={width}`\n\nIn regular expression syntax, the values of `route` look like:\n\n`[a-zA-Z0-9_-]+(;w=\\d+)?`\n\n\"[a-zA-Z0-9._-]+\" is the encoded flexible polyline.\n\n\"w=\\d+\" is the optional width. The width is specified in meters from the center of the path. If no width is provided, the default is 1000 meters.\n\nType: `{Flexible Polyline Encoding};w={integer}`\n\nThe following constraints apply:\n * A `route` MUST contain at least two points (one segment).\n * A `route` MUST NOT contain more than 2,000 points.\n * A `route` MUST NOT have a width of more than 50,000 meters.\n\nExamples:\n * `BFoz5xJ67i1B1B7PzIhaxL7Y`\n * `BFoz5xJ67i1B1B7PzIhaxL7Y;w=5000`\n * `BlD05xgKuy2xCCx9B7vUCl0OhnRC54EqSCzpEl-HCxjD3pBCiGnyGCi2CvwFCsgD3nDC4vB6eC;w=2000`\n\nNote: The last example above can be decoded (using the Python class [here](https://github.com/heremaps/flexible-polyline/tree/master/python) as follows:\n\n```\n>>> import flexpolyline\n>>> polyline = 'BlD05xgKuy2xCCx9B7vUCl0OhnRC54EqSCzpEl-HCxjD3pBCiGnyGCi2CvwFCsgD3nDC4vB6eC'\n>>> flexpolyline.decode(polyline)\n[(52.51994, 13.38663, 1.0), (52.51009, 13.28169, 2.0), (52.43518, 13.19352, 3.0), (52.41073, 13.19645, 4.0),\n (52.38871, 13.15578, 5.0), (52.37278, 13.1491, 6.0), (52.37375, 13.11546, 7.0), (52.38752, 13.08722, 8.0),\n (52.40294, 13.07062, 9.0), (52.41058, 13.07555, 10.0)]\n```\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "with",
          "in" : "query",
          "description" : "Activate certain features or consider specific kinds of results, that would not be active or provided by default.\n\nDescription of supported values:\n\n- **ALPHA, RESTRICTED** `recommendPlaces`: The value \"recommendPlaces\" specifies that the endpoint ranks the results of place category search requests according to their importance and prominence, when this applies to the following categories: restaurant, coffee, supermarket, hotel, airport",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "recommendPlaces" ]
            }
          }
        }, {
          "name" : "evStation",
          "in" : "query",
          "description" : "`evStation[<property>]`  deep object parameter allows to add constraints on the places results of category EV station (`700-7600-0322`, `700-7600-0323`, `700-7600-0324`).\nSearch results of other types or categories will be returned without these constraints to be applied. Each property describes a separate constraint.\n\nCurrently, the following properties are supported:\n\n* `evStation[minPower]`: Sets a constraint on the minimum power in kW delivered by at least one of the station EVSE. Accepted is a single decimal value.\n\n* `evStation[connectorTypeIds]`: Sets a constraint on the connector type ID that the EV station result should have for at least one of its EVSE.\n   Accepted are comma-separated integer values for non-deprecated connectors, listed in the [HERE EV Charge Points API v2 documentation](https://www.here.com/docs/bundle/ev-charge-points-api-developer-guide/page/topics/resource-type-connector-types.html)\n\n* `evStation[supplierNames]`: Sets a constraint on the charge point operator name operating of the EV station place result. Accepted are multiple comma-separated names.\n\n* `evStation[current]`: Sets a constraint on the current phase provided at one of the EVSE of the EV station result. Accepted is either AC or DC\n\n* `evStation[eMobilityServiceProviderPartnerIds]`: Sets a constraint on the e-Mobility Service Providers (eMSP) available at the EV station place result.\n\n* `evStation[paymentMethodIds]`: Sets a constraint on the payment methods that the EV station result should support.\n\nExample (line-breaks used for the sake of readability):\n```\nevStation[connectorTypeIds]=29,33&evStation[minPower]=50.0&evStation[supplierNames]=ChargePoint&\nevStation[eMobilityServiceProviderPartnerIds]=1f351b84-cca5-11ed-8155-42010aa40002&evStation[paymentMethodIds]=creditCard\n```\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/evStation"
          }
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Select the language to be used for result rendering from a list of [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) compliant language codes.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of results to be returned. For paginated queries (`offset` parameter) it specifies the expected number of results per page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32",
            "default" : 20
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "**ALPHA** If set, the `offset` parameter switches on the pagination mode:\n\n* The response element items is returned together with the 4 attributes: `limit`, `offset`, `count`, `nextOffset`.\n* The response becomes a \"page\" of `<count>` results at a certain `offset`.\n* If `offset` parameter is not set, there is no pagination and none of the 4 attributes is returned.\n\nNote that if the `offset` value exceeds the total number of `items`, the response `items` list will be empty.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 99,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "politicalView",
          "in" : "query",
          "description" : "Toggle the political view.\n\nThis parameter accepts a single ISO 3166-1 alpha-3 country code in all uppercase.\n\nIf a valid 3-letter country code is provided for which GS7 does not have a dedicated political view, it will fallback to the default view.\n\nThe following political views are currently supported:\n\n- `ARG`: Argentina's view on the Southern Patagonian Ice Field and Tierra Del Fuego, including the Falkland Islands, South Georgia, and South Sandwich Islands\n- `EGY`: Egypt's view on Bir Tawil\n- `IND`: India's view on Gilgit-Baltistan\n- `KEN`: Kenya's view on the Ilemi Triangle\n- `MAR`: Morocco's view on Western Sahara\n- `PAK`: Pakistan's view on Jammu and Kashmir and the Junagadh Area\n- `RUS`: Russia's view on Crimea\n- `SDN`: Sudan's view on the Halaib Triangle\n- `SRB`: Serbia's view on Kosovo, Vukovar, and Sarengrad Islands\n- `SUR`: Suriname's view on the Courantyne Headwaters and Lawa Headwaters\n- `SYR`: Syria's view on the Golan Heights\n- `TUR`: Turkey's view on Cyprus and Northern Cyprus\n- `TZA`: Tanzania's view on Lake Malawi\n- `URY`: Uruguay's view on Rincon de Artigas\n- `VNM`: Vietnam's view on the Paracel Islands and Spratly Islands",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "show",
          "in" : "query",
          "description" : "Select additional fields to be rendered in the response.\nPlease note that some of the fields involve additional webservice calls and can increase the overall response time.\n\nThe value is a comma-separated list of the sections to be enabled.\nFor some sections there is a long and a short ID.\n\nDescription of supported values:\n\n- `eMobilityServiceProviders`: Returns for each place of category EV station (`700-7600-0322`, `700-7600-0323`, `700-7600-0324`)\n  the list of e-Mobility Service Providers (eMSP) in `extended.evStation` field.\n- `ev`: Returns for each place of category EV station (`700-7600-0322`, `700-7600-0323`, `700-7600-0324`)\n\n  * connector groups details in `extended.evStation` field and\n  * detailed connectors availability in `extended.evAvailability` field.\n\n  Please note that the use of this option may impact latency.\n- `phonemes`: Renders phonemes for address and place names into the results.\n- `streetInfo`: For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.\n- `tz`: Renders result items with additional time zone information.\n- **BETA, RESTRICTED** `tripadvisor`: If available, adds images, ratings, and editorials from Tripadvisor (TM) in the `media` field of `place` results.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "eMobilityServiceProviders", "ev", "phonemes", "streetInfo", "tripadvisor", "tz" ]
            }
          }
        }, {
          "name" : "X-Request-ID",
          "in" : "header",
          "description" : "Used to correlate requests with their responses within a customer's application, for logging and error reporting.\n\nFormat: Free string, but a valid UUIDv4 is recommended.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The search results.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OpenSearchSearchResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Client error: request failed validation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405" : {
            "description" : "Client error: http method not supported.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Client error: Rate limit exceeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503" : {
            "description" : "Temporary server error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Discover",
        "description" : "**BETA, RESTRICTED** This endpoint processes a free-form text query for an address or place, and returns results in order of relevance.",
        "parameters" : [ {
          "name" : "q",
          "in" : "query",
          "description" : "Enter a free-text query\n\nExamples:\n * `125, Berliner, berlin`\n * `Beacon, Boston, Hospital`\n * `Schnurrbart German Pub and Restaurant, Hong Kong`\n\n _Note: Whitespace, urls, email addresses, or other out-of-scope queries will yield no results.\n",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "Eismieze Berlin"
          }
        }, {
          "name" : "at",
          "in" : "query",
          "description" : "Specify the center of the search context expressed as coordinates\n\nFormat: `{latitude},{longitude}`\n\nType: `{decimal},{decimal}`\n\nExample: `-13.163068,-72.545128` (Machu Picchu Mountain, Peru)\n\nThe following constraints apply:\n\n * One of \"at\", \"in=circle\" or \"in=bbox\" is required.\n\n * Parameters \"at\", \"in=circle\" and \"in=bbox\" are mutually exclusive. Only one of them is allowed.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "52.5308,13.3856"
          }
        }, {
          "name" : "in",
          "in" : "query",
          "description" : "Search within a geographic area. This is a hard filter. Results will be returned if they are located within the specified area.\n\nA geographic area can be\n\n * a country (or multiple countries), provided as comma-separated [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country codes\n\n   The country codes are to be provided in all uppercase.\n\n   Format: `countryCode:{countryCode}[,{countryCode}]*`\n\n   Examples:\n    * `countryCode:USA`\n    * `countryCode:CAN,MEX,USA`\n\n\n * a circular area, provided as latitude, longitude, and radius (in meters)\n\n   Format: `circle:{latitude},{longitude};r={radius}`\n\n   Type: `circle:{decimal},{decimal};r={integer}`\n\n   Example: `circle:52.53,13.38;r=10000`\n\n\n * a bounding box, provided as _west longitude_, _south latitude_, _east longitude_, _north latitude_\n\n   Format: `bbox:{west longitude},{south latitude},{east longitude},{north latitude}`\n\n   Example: `bbox:13.08836,52.33812,13.761,52.6755`\n\n\nThe following constraints apply:\n\n * One of \"at\", \"in=circle\" or \"in=bbox\" is required.\n\n * Parameters \"at\", \"in=circle\" and \"in=bbox\" are mutually exclusive. Only one of them is allowed.\n\n * The \"in=countryCode\" parameter must be accompanied by exactly one of \"at\", \"in=circle\" or \"in=bbox\".\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "mobilityMode",
          "in" : "query",
          "description" : "This field indicates the mode of mobility used by the end user when interacting with the Search\nservice through the customer application. The information is used to improve the relevance of\nsearch results.\n\nFor example, a search for ‚ÄúEV charging station‚Äù will preferentially return charging stations\nsuitable for trucks when the `mobilityMode` field is set to `truck`.\n\nThe `mobilityMode` field accepts a single value.\n\n\nDescription of supported values:\n\n- `car`: A standard motor vehicle primarily designed to transport up to 8 people, rather than cargo.\n- `motorbike`: A two-wheeled vehicle typically used by one or two people, suitable for commuting or long-distance travel.\n- `truck`: A larger vehicle primarily designed for transporting freight.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "car", "motorbike", "truck" ]
          }
        }, {
          "name" : "ranking",
          "in" : "query",
          "description" : "**BETA** Selects the ranking mode to be used.\nThis parameter only applies to places category or chain search use cases (See [discover-use-cases](https://www.here.com/docs/bundle/geocoding-and-search-api-developer-guide/page/topics/endpoint-discover-brief.html#use-cases)).\nIt is ignored for other search use cases.\n\n\nDescription of supported values:\n\n- **BETA** `excursionDistance`: Rank results in along the route parameter by increasing distance\n  from the route polyline.\n\n  Constraint: `ranking=excursionDistance` returns a 400 status code if the `route` parameter is not specified.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "excursionDistance" ]
          }
        }, {
          "name" : "route",
          "in" : "query",
          "description" : "**BETA** Select within a geographic corridor. This is a hard filter. Results will be returned if they are located within the specified area.\n\nA `route` is defined by a [Flexible Polyline Encoding](https://github.com/heremaps/flexible-polyline),\n followed by an optional width, represented by a sub-parameter \"w\".\n\nFormat: `{route};w={width}`\n\nIn regular expression syntax, the values of `route` look like:\n\n`[a-zA-Z0-9_-]+(;w=\\d+)?`\n\n\"[a-zA-Z0-9._-]+\" is the encoded flexible polyline.\n\n\"w=\\d+\" is the optional width. The width is specified in meters from the center of the path. If no width is provided, the default is 1000 meters.\n\nType: `{Flexible Polyline Encoding};w={integer}`\n\nThe following constraints apply:\n * A `route` MUST contain at least two points (one segment).\n * A `route` MUST NOT contain more than 2,000 points.\n * A `route` MUST NOT have a width of more than 50,000 meters.\n\nExamples:\n * `BFoz5xJ67i1B1B7PzIhaxL7Y`\n * `BFoz5xJ67i1B1B7PzIhaxL7Y;w=5000`\n * `BlD05xgKuy2xCCx9B7vUCl0OhnRC54EqSCzpEl-HCxjD3pBCiGnyGCi2CvwFCsgD3nDC4vB6eC;w=2000`\n\nNote: The last example above can be decoded (using the Python class [here](https://github.com/heremaps/flexible-polyline/tree/master/python) as follows:\n\n```\n>>> import flexpolyline\n>>> polyline = 'BlD05xgKuy2xCCx9B7vUCl0OhnRC54EqSCzpEl-HCxjD3pBCiGnyGCi2CvwFCsgD3nDC4vB6eC'\n>>> flexpolyline.decode(polyline)\n[(52.51994, 13.38663, 1.0), (52.51009, 13.28169, 2.0), (52.43518, 13.19352, 3.0), (52.41073, 13.19645, 4.0),\n (52.38871, 13.15578, 5.0), (52.37278, 13.1491, 6.0), (52.37375, 13.11546, 7.0), (52.38752, 13.08722, 8.0),\n (52.40294, 13.07062, 9.0), (52.41058, 13.07555, 10.0)]\n```\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "with",
          "in" : "query",
          "description" : "Activate certain features or consider specific kinds of results, that would not be active or provided by default.\n\nDescription of supported values:\n\n- **ALPHA, RESTRICTED** `recommendPlaces`: The value \"recommendPlaces\" specifies that the endpoint ranks the results of place category search requests according to their importance and prominence, when this applies to the following categories: restaurant, coffee, supermarket, hotel, airport",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "recommendPlaces" ]
            }
          }
        }, {
          "name" : "evStation",
          "in" : "query",
          "description" : "`evStation[<property>]`  deep object parameter allows to add constraints on the places results of category EV station (`700-7600-0322`, `700-7600-0323`, `700-7600-0324`).\nSearch results of other types or categories will be returned without these constraints to be applied. Each property describes a separate constraint.\n\nCurrently, the following properties are supported:\n\n* `evStation[minPower]`: Sets a constraint on the minimum power in kW delivered by at least one of the station EVSE. Accepted is a single decimal value.\n\n* `evStation[connectorTypeIds]`: Sets a constraint on the connector type ID that the EV station result should have for at least one of its EVSE.\n   Accepted are comma-separated integer values for non-deprecated connectors, listed in the [HERE EV Charge Points API v2 documentation](https://www.here.com/docs/bundle/ev-charge-points-api-developer-guide/page/topics/resource-type-connector-types.html)\n\n* `evStation[supplierNames]`: Sets a constraint on the charge point operator name operating of the EV station place result. Accepted are multiple comma-separated names.\n\n* `evStation[current]`: Sets a constraint on the current phase provided at one of the EVSE of the EV station result. Accepted is either AC or DC\n\n* `evStation[eMobilityServiceProviderPartnerIds]`: Sets a constraint on the e-Mobility Service Providers (eMSP) available at the EV station place result.\n\n* `evStation[paymentMethodIds]`: Sets a constraint on the payment methods that the EV station result should support.\n\nExample (line-breaks used for the sake of readability):\n```\nevStation[connectorTypeIds]=29,33&evStation[minPower]=50.0&evStation[supplierNames]=ChargePoint&\nevStation[eMobilityServiceProviderPartnerIds]=1f351b84-cca5-11ed-8155-42010aa40002&evStation[paymentMethodIds]=creditCard\n```\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/evStation"
          }
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Select the language to be used for result rendering from a list of [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) compliant language codes.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of results to be returned. For paginated queries (`offset` parameter) it specifies the expected number of results per page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32",
            "default" : 20
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "**ALPHA** If set, the `offset` parameter switches on the pagination mode:\n\n* The response element items is returned together with the 4 attributes: `limit`, `offset`, `count`, `nextOffset`.\n* The response becomes a \"page\" of `<count>` results at a certain `offset`.\n* If `offset` parameter is not set, there is no pagination and none of the 4 attributes is returned.\n\nNote that if the `offset` value exceeds the total number of `items`, the response `items` list will be empty.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 99,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "politicalView",
          "in" : "query",
          "description" : "Toggle the political view.\n\nThis parameter accepts a single ISO 3166-1 alpha-3 country code in all uppercase.\n\nIf a valid 3-letter country code is provided for which GS7 does not have a dedicated political view, it will fallback to the default view.\n\nThe following political views are currently supported:\n\n- `ARG`: Argentina's view on the Southern Patagonian Ice Field and Tierra Del Fuego, including the Falkland Islands, South Georgia, and South Sandwich Islands\n- `EGY`: Egypt's view on Bir Tawil\n- `IND`: India's view on Gilgit-Baltistan\n- `KEN`: Kenya's view on the Ilemi Triangle\n- `MAR`: Morocco's view on Western Sahara\n- `PAK`: Pakistan's view on Jammu and Kashmir and the Junagadh Area\n- `RUS`: Russia's view on Crimea\n- `SDN`: Sudan's view on the Halaib Triangle\n- `SRB`: Serbia's view on Kosovo, Vukovar, and Sarengrad Islands\n- `SUR`: Suriname's view on the Courantyne Headwaters and Lawa Headwaters\n- `SYR`: Syria's view on the Golan Heights\n- `TUR`: Turkey's view on Cyprus and Northern Cyprus\n- `TZA`: Tanzania's view on Lake Malawi\n- `URY`: Uruguay's view on Rincon de Artigas\n- `VNM`: Vietnam's view on the Paracel Islands and Spratly Islands",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "show",
          "in" : "query",
          "description" : "Select additional fields to be rendered in the response.\nPlease note that some of the fields involve additional webservice calls and can increase the overall response time.\n\nThe value is a comma-separated list of the sections to be enabled.\nFor some sections there is a long and a short ID.\n\nDescription of supported values:\n\n- `eMobilityServiceProviders`: Returns for each place of category EV station (`700-7600-0322`, `700-7600-0323`, `700-7600-0324`)\n  the list of e-Mobility Service Providers (eMSP) in `extended.evStation` field.\n- `ev`: Returns for each place of category EV station (`700-7600-0322`, `700-7600-0323`, `700-7600-0324`)\n\n  * connector groups details in `extended.evStation` field and\n  * detailed connectors availability in `extended.evAvailability` field.\n\n  Please note that the use of this option may impact latency.\n- `phonemes`: Renders phonemes for address and place names into the results.\n- `streetInfo`: For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.\n- `tz`: Renders result items with additional time zone information.\n- **BETA, RESTRICTED** `tripadvisor`: If available, adds images, ratings, and editorials from Tripadvisor (TM) in the `media` field of `place` results.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "eMobilityServiceProviders", "ev", "phonemes", "streetInfo", "tripadvisor", "tz" ]
            }
          }
        }, {
          "name" : "X-Request-ID",
          "in" : "header",
          "description" : "Used to correlate requests with their responses within a customer's application, for logging and error reporting.\n\nFormat: Free string, but a valid UUIDv4 is recommended.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The request body must only contain those properties that are explicitly mentioned here.\nIn general, those are query parameter that might contain especially long values, e.g. `route`.\nFor POST requests those can alternatively still be supplied as query parameters. However, they\nmust never be provided in both URL and request body simultaneously.\n",
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/body"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "The search results.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OpenSearchSearchResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Client error: request failed validation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405" : {
            "description" : "Client error: http method not supported.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "413" : {
            "description" : "Client error: request body exceeds size limit.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "415" : {
            "description" : "Client error: request body has unsupported content type.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Client error: Rate limit exceeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503" : {
            "description" : "Temporary server error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "servers" : [ {
        "url" : "https://discover.search.hereapi.com/v1"
      } ]
    },
    "/autosuggest" : {
      "get" : {
        "summary" : "Autosuggest",
        "description" : "This endpoint suggests address or place candidates based on an incomplete or misspelled query,\n from which the user selects the best query to submit.\n\n_NOTE: The response may contain **experimental** elements not documented here.\n Any undocumented element is **subject to removal** at any time._\n",
        "parameters" : [ {
          "name" : "q",
          "in" : "query",
          "description" : "Enter a free-text query\n\nExamples:\n * `res`, `rest`, `resta`, `restau`, ...\n * `berlin+bran`, `berlin+brand`, `berlin+branden`, ...\n * `New+Yok+Giants`\n\n _Note: Whitespace, urls, email addresses, or other out-of-scope queries will yield no results.\n",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "Eismieze Berlin"
          }
        }, {
          "name" : "at",
          "in" : "query",
          "description" : "Specify the center of the search context expressed as coordinates\n\nFormat: `{latitude},{longitude}`\n\nType: `{decimal},{decimal}`\n\nExample: `-13.163068,-72.545128` (Machu Picchu Mountain, Peru)\n\nThe following constraints apply:\n\n * One of \"at\", \"in=circle\" or \"in=bbox\" is required.\n\n * Parameters \"at\", \"in=circle\" and \"in=bbox\" are mutually exclusive. Only one of them is allowed.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "52.5308,13.3856"
          }
        }, {
          "name" : "in",
          "in" : "query",
          "description" : "Search within a geographic area. This is a hard filter. Results will be returned if they are located within the specified area.\n\nA geographic area can be\n\n * a country (or multiple countries), provided as comma-separated [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country codes\n\n   The country codes are to be provided in all uppercase.\n\n   Format: `countryCode:{countryCode}[,{countryCode}]*`\n\n   Examples:\n    * `countryCode:USA`\n    * `countryCode:CAN,MEX,USA`\n\n\n * a circular area, provided as latitude, longitude, and radius (in meters)\n\n   Format: `circle:{latitude},{longitude};r={radius}`\n\n   Type: `circle:{decimal},{decimal};r={integer}`\n\n   Example: `circle:52.53,13.38;r=10000`\n\n\n * a bounding box, provided as _west longitude_, _south latitude_, _east longitude_, _north latitude_\n\n   Format: `bbox:{west longitude},{south latitude},{east longitude},{north latitude}`\n\n   Example: `bbox:13.08836,52.33812,13.761,52.6755`\n\n\nThe following constraints apply:\n\n * One of \"at\", \"in=circle\" or \"in=bbox\" is required.\n\n * Parameters \"at\", \"in=circle\" and \"in=bbox\" are mutually exclusive. Only one of them is allowed.\n\n * The \"in=countryCode\" parameter must be accompanied by exactly one of \"at\", \"in=circle\" or \"in=bbox\".\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "mobilityMode",
          "in" : "query",
          "description" : "This field indicates the mode of mobility used by the end user when interacting with the Search\nservice through the customer application. The information is used to improve the relevance of\nsearch results.\n\nFor example, a search for ‚ÄúEV charging station‚Äù will preferentially return charging stations\nsuitable for trucks when the `mobilityMode` field is set to `truck`.\n\nThe `mobilityMode` field accepts a single value.\n\n\nDescription of supported values:\n\n- `car`: A standard motor vehicle primarily designed to transport up to 8 people, rather than cargo.\n- `motorbike`: A two-wheeled vehicle typically used by one or two people, suitable for commuting or long-distance travel.\n- `truck`: A larger vehicle primarily designed for transporting freight.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "car", "motorbike", "truck" ]
          }
        }, {
          "name" : "ranking",
          "in" : "query",
          "description" : "**BETA** Selects the ranking mode to be used.\nThis parameter only applies to places category or chain search use cases (See [discover-use-cases](https://www.here.com/docs/bundle/geocoding-and-search-api-developer-guide/page/topics/endpoint-discover-brief.html#use-cases)).\nIt is ignored for other search use cases.\n\n\nDescription of supported values:\n\n- **BETA** `excursionDistance`: Rank results in along the route parameter by increasing distance\n  from the route polyline.\n\n  Constraint: `ranking=excursionDistance` returns a 400 status code if the `route` parameter is not specified.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "excursionDistance" ]
          }
        }, {
          "name" : "route",
          "in" : "query",
          "description" : "**BETA** Select within a geographic corridor. This is a hard filter. Results will be returned if they are located within the specified area.\n\nA `route` is defined by a [Flexible Polyline Encoding](https://github.com/heremaps/flexible-polyline),\n followed by an optional width, represented by a sub-parameter \"w\".\n\nFormat: `{route};w={width}`\n\nIn regular expression syntax, the values of `route` look like:\n\n`[a-zA-Z0-9_-]+(;w=\\d+)?`\n\n\"[a-zA-Z0-9._-]+\" is the encoded flexible polyline.\n\n\"w=\\d+\" is the optional width. The width is specified in meters from the center of the path. If no width is provided, the default is 1000 meters.\n\nType: `{Flexible Polyline Encoding};w={integer}`\n\nThe following constraints apply:\n * A `route` MUST contain at least two points (one segment).\n * A `route` MUST NOT contain more than 2,000 points.\n * A `route` MUST NOT have a width of more than 50,000 meters.\n\nExamples:\n * `BFoz5xJ67i1B1B7PzIhaxL7Y`\n * `BFoz5xJ67i1B1B7PzIhaxL7Y;w=5000`\n * `BlD05xgKuy2xCCx9B7vUCl0OhnRC54EqSCzpEl-HCxjD3pBCiGnyGCi2CvwFCsgD3nDC4vB6eC;w=2000`\n\nNote: The last example above can be decoded (using the Python class [here](https://github.com/heremaps/flexible-polyline/tree/master/python) as follows:\n\n```\n>>> import flexpolyline\n>>> polyline = 'BlD05xgKuy2xCCx9B7vUCl0OhnRC54EqSCzpEl-HCxjD3pBCiGnyGCi2CvwFCsgD3nDC4vB6eC'\n>>> flexpolyline.decode(polyline)\n[(52.51994, 13.38663, 1.0), (52.51009, 13.28169, 2.0), (52.43518, 13.19352, 3.0), (52.41073, 13.19645, 4.0),\n (52.38871, 13.15578, 5.0), (52.37278, 13.1491, 6.0), (52.37375, 13.11546, 7.0), (52.38752, 13.08722, 8.0),\n (52.40294, 13.07062, 9.0), (52.41058, 13.07555, 10.0)]\n```\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "termsLimit",
          "in" : "query",
          "description" : "Maximum number of Query Terms Suggestions to be returned.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 10,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "with",
          "in" : "query",
          "description" : "Activate certain features or consider specific kinds of results, that would not be active or provided by default.\n\nDescription of supported values:\n\n- **ALPHA, RESTRICTED** `recommendPlaces`: The value \"recommendPlaces\" specifies that the endpoint ranks the results of place category search requests according to their importance and prominence, when this applies to the following categories: restaurant, coffee, supermarket, hotel, airport",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "recommendPlaces" ]
            }
          }
        }, {
          "name" : "evStation",
          "in" : "query",
          "description" : "`evStation[<property>]`  deep object parameter allows to add constraints on the places results of category EV station (`700-7600-0322`, `700-7600-0323`, `700-7600-0324`).\nSearch results of other types or categories will be returned without these constraints to be applied. Each property describes a separate constraint.\n\nCurrently, the following properties are supported:\n\n* `evStation[minPower]`: Sets a constraint on the minimum power in kW delivered by at least one of the station EVSE. Accepted is a single decimal value.\n\n* `evStation[connectorTypeIds]`: Sets a constraint on the connector type ID that the EV station result should have for at least one of its EVSE.\n   Accepted are comma-separated integer values for non-deprecated connectors, listed in the [HERE EV Charge Points API v2 documentation](https://www.here.com/docs/bundle/ev-charge-points-api-developer-guide/page/topics/resource-type-connector-types.html)\n\n* `evStation[supplierNames]`: Sets a constraint on the charge point operator name operating of the EV station place result. Accepted are multiple comma-separated names.\n\n* `evStation[current]`: Sets a constraint on the current phase provided at one of the EVSE of the EV station result. Accepted is either AC or DC\n\n* `evStation[eMobilityServiceProviderPartnerIds]`: Sets a constraint on the e-Mobility Service Providers (eMSP) available at the EV station place result.\n\n* `evStation[paymentMethodIds]`: Sets a constraint on the payment methods that the EV station result should support.\n\nExample (line-breaks used for the sake of readability):\n```\nevStation[connectorTypeIds]=29,33&evStation[minPower]=50.0&evStation[supplierNames]=ChargePoint&\nevStation[eMobilityServiceProviderPartnerIds]=1f351b84-cca5-11ed-8155-42010aa40002&evStation[paymentMethodIds]=creditCard\n```\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/evStation"
          }
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Select the language to be used for result rendering from a list of [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) compliant language codes.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of results to be returned. For paginated queries (`offset` parameter) it specifies the expected number of results per page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32",
            "default" : 20
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "**ALPHA** If set, the `offset` parameter switches on the pagination mode:\n\n* The response element items is returned together with the 4 attributes: `limit`, `offset`, `count`, `nextOffset`.\n* The response becomes a \"page\" of `<count>` results at a certain `offset`.\n* If `offset` parameter is not set, there is no pagination and none of the 4 attributes is returned.\n\nNote that if the `offset` value exceeds the total number of `items`, the response `items` list will be empty.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 99,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "politicalView",
          "in" : "query",
          "description" : "Toggle the political view.\n\nThis parameter accepts a single ISO 3166-1 alpha-3 country code in all uppercase.\n\nIf a valid 3-letter country code is provided for which GS7 does not have a dedicated political view, it will fallback to the default view.\n\nThe following political views are currently supported:\n\n- `ARG`: Argentina's view on the Southern Patagonian Ice Field and Tierra Del Fuego, including the Falkland Islands, South Georgia, and South Sandwich Islands\n- `EGY`: Egypt's view on Bir Tawil\n- `IND`: India's view on Gilgit-Baltistan\n- `KEN`: Kenya's view on the Ilemi Triangle\n- `MAR`: Morocco's view on Western Sahara\n- `PAK`: Pakistan's view on Jammu and Kashmir and the Junagadh Area\n- `RUS`: Russia's view on Crimea\n- `SDN`: Sudan's view on the Halaib Triangle\n- `SRB`: Serbia's view on Kosovo, Vukovar, and Sarengrad Islands\n- `SUR`: Suriname's view on the Courantyne Headwaters and Lawa Headwaters\n- `SYR`: Syria's view on the Golan Heights\n- `TUR`: Turkey's view on Cyprus and Northern Cyprus\n- `TZA`: Tanzania's view on Lake Malawi\n- `URY`: Uruguay's view on Rincon de Artigas\n- `VNM`: Vietnam's view on the Paracel Islands and Spratly Islands",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "show",
          "in" : "query",
          "description" : "Select additional fields to be rendered in the response.\nPlease note that some of the fields involve additional webservice calls and can increase the overall response time.\n\nThe value is a comma-separated list of the sections to be enabled.\nFor some sections there is a long and a short ID.\n\nDescription of supported values:\n\n- `details`: Renders address and contact details, as well as opening hours of the searched place.\n- `phonemes`: Renders phonemes for address and place names into the results.\n- `streetInfo`: For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.\n- `tz`: Renders result items with additional time zone information.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "details", "phonemes", "streetInfo", "tz" ]
            }
          }
        }, {
          "name" : "showMapReferences",
          "in" : "query",
          "description" : "Return the map references of the location objects\n\nDescription of supported values:\n\n- `adminIds`: Return the ids for the admin hierarchy of the response, to enable cross referencing into other services or data applications based on HERE Map Content\n- `pointAddress`: Return the reference of the point address,\n  to enable cross referencing into other services or data applications\n  based on HERE Map Content\n- `segments`: Return the street segment references from the result's access position,\n  to enable cross referencing into other services or data applications\n  based on HERE Map Content",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "adminIds", "pointAddress", "segments" ]
            }
          }
        }, {
          "name" : "X-Request-ID",
          "in" : "header",
          "description" : "Used to correlate requests with their responses within a customer's application, for logging and error reporting.\n\nFormat: Free string, but a valid UUIDv4 is recommended.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The search results.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OpenSearchAutosuggestResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Client error: request failed validation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405" : {
            "description" : "Client error: http method not supported.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Client error: Rate limit exceeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503" : {
            "description" : "Temporary server error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Autosuggest",
        "description" : "**BETA, RESTRICTED** This endpoint suggests address or place candidates based on an incomplete or misspelled query,\n from which the user selects the best query to submit.\n\n_NOTE: The response may contain **experimental** elements not documented here.\n Any undocumented element is **subject to removal** at any time._\n",
        "parameters" : [ {
          "name" : "q",
          "in" : "query",
          "description" : "Enter a free-text query\n\nExamples:\n * `res`, `rest`, `resta`, `restau`, ...\n * `berlin+bran`, `berlin+brand`, `berlin+branden`, ...\n * `New+Yok+Giants`\n\n _Note: Whitespace, urls, email addresses, or other out-of-scope queries will yield no results.\n",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "Eismieze Berlin"
          }
        }, {
          "name" : "at",
          "in" : "query",
          "description" : "Specify the center of the search context expressed as coordinates\n\nFormat: `{latitude},{longitude}`\n\nType: `{decimal},{decimal}`\n\nExample: `-13.163068,-72.545128` (Machu Picchu Mountain, Peru)\n\nThe following constraints apply:\n\n * One of \"at\", \"in=circle\" or \"in=bbox\" is required.\n\n * Parameters \"at\", \"in=circle\" and \"in=bbox\" are mutually exclusive. Only one of them is allowed.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "52.5308,13.3856"
          }
        }, {
          "name" : "in",
          "in" : "query",
          "description" : "Search within a geographic area. This is a hard filter. Results will be returned if they are located within the specified area.\n\nA geographic area can be\n\n * a country (or multiple countries), provided as comma-separated [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country codes\n\n   The country codes are to be provided in all uppercase.\n\n   Format: `countryCode:{countryCode}[,{countryCode}]*`\n\n   Examples:\n    * `countryCode:USA`\n    * `countryCode:CAN,MEX,USA`\n\n\n * a circular area, provided as latitude, longitude, and radius (in meters)\n\n   Format: `circle:{latitude},{longitude};r={radius}`\n\n   Type: `circle:{decimal},{decimal};r={integer}`\n\n   Example: `circle:52.53,13.38;r=10000`\n\n\n * a bounding box, provided as _west longitude_, _south latitude_, _east longitude_, _north latitude_\n\n   Format: `bbox:{west longitude},{south latitude},{east longitude},{north latitude}`\n\n   Example: `bbox:13.08836,52.33812,13.761,52.6755`\n\n\nThe following constraints apply:\n\n * One of \"at\", \"in=circle\" or \"in=bbox\" is required.\n\n * Parameters \"at\", \"in=circle\" and \"in=bbox\" are mutually exclusive. Only one of them is allowed.\n\n * The \"in=countryCode\" parameter must be accompanied by exactly one of \"at\", \"in=circle\" or \"in=bbox\".\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "mobilityMode",
          "in" : "query",
          "description" : "This field indicates the mode of mobility used by the end user when interacting with the Search\nservice through the customer application. The information is used to improve the relevance of\nsearch results.\n\nFor example, a search for ‚ÄúEV charging station‚Äù will preferentially return charging stations\nsuitable for trucks when the `mobilityMode` field is set to `truck`.\n\nThe `mobilityMode` field accepts a single value.\n\n\nDescription of supported values:\n\n- `car`: A standard motor vehicle primarily designed to transport up to 8 people, rather than cargo.\n- `motorbike`: A two-wheeled vehicle typically used by one or two people, suitable for commuting or long-distance travel.\n- `truck`: A larger vehicle primarily designed for transporting freight.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "car", "motorbike", "truck" ]
          }
        }, {
          "name" : "ranking",
          "in" : "query",
          "description" : "**BETA** Selects the ranking mode to be used.\nThis parameter only applies to places category or chain search use cases (See [discover-use-cases](https://www.here.com/docs/bundle/geocoding-and-search-api-developer-guide/page/topics/endpoint-discover-brief.html#use-cases)).\nIt is ignored for other search use cases.\n\n\nDescription of supported values:\n\n- **BETA** `excursionDistance`: Rank results in along the route parameter by increasing distance\n  from the route polyline.\n\n  Constraint: `ranking=excursionDistance` returns a 400 status code if the `route` parameter is not specified.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "excursionDistance" ]
          }
        }, {
          "name" : "route",
          "in" : "query",
          "description" : "**BETA** Select within a geographic corridor. This is a hard filter. Results will be returned if they are located within the specified area.\n\nA `route` is defined by a [Flexible Polyline Encoding](https://github.com/heremaps/flexible-polyline),\n followed by an optional width, represented by a sub-parameter \"w\".\n\nFormat: `{route};w={width}`\n\nIn regular expression syntax, the values of `route` look like:\n\n`[a-zA-Z0-9_-]+(;w=\\d+)?`\n\n\"[a-zA-Z0-9._-]+\" is the encoded flexible polyline.\n\n\"w=\\d+\" is the optional width. The width is specified in meters from the center of the path. If no width is provided, the default is 1000 meters.\n\nType: `{Flexible Polyline Encoding};w={integer}`\n\nThe following constraints apply:\n * A `route` MUST contain at least two points (one segment).\n * A `route` MUST NOT contain more than 2,000 points.\n * A `route` MUST NOT have a width of more than 50,000 meters.\n\nExamples:\n * `BFoz5xJ67i1B1B7PzIhaxL7Y`\n * `BFoz5xJ67i1B1B7PzIhaxL7Y;w=5000`\n * `BlD05xgKuy2xCCx9B7vUCl0OhnRC54EqSCzpEl-HCxjD3pBCiGnyGCi2CvwFCsgD3nDC4vB6eC;w=2000`\n\nNote: The last example above can be decoded (using the Python class [here](https://github.com/heremaps/flexible-polyline/tree/master/python) as follows:\n\n```\n>>> import flexpolyline\n>>> polyline = 'BlD05xgKuy2xCCx9B7vUCl0OhnRC54EqSCzpEl-HCxjD3pBCiGnyGCi2CvwFCsgD3nDC4vB6eC'\n>>> flexpolyline.decode(polyline)\n[(52.51994, 13.38663, 1.0), (52.51009, 13.28169, 2.0), (52.43518, 13.19352, 3.0), (52.41073, 13.19645, 4.0),\n (52.38871, 13.15578, 5.0), (52.37278, 13.1491, 6.0), (52.37375, 13.11546, 7.0), (52.38752, 13.08722, 8.0),\n (52.40294, 13.07062, 9.0), (52.41058, 13.07555, 10.0)]\n```\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "termsLimit",
          "in" : "query",
          "description" : "Maximum number of Query Terms Suggestions to be returned.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 10,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "with",
          "in" : "query",
          "description" : "Activate certain features or consider specific kinds of results, that would not be active or provided by default.\n\nDescription of supported values:\n\n- **ALPHA, RESTRICTED** `recommendPlaces`: The value \"recommendPlaces\" specifies that the endpoint ranks the results of place category search requests according to their importance and prominence, when this applies to the following categories: restaurant, coffee, supermarket, hotel, airport",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "recommendPlaces" ]
            }
          }
        }, {
          "name" : "evStation",
          "in" : "query",
          "description" : "`evStation[<property>]`  deep object parameter allows to add constraints on the places results of category EV station (`700-7600-0322`, `700-7600-0323`, `700-7600-0324`).\nSearch results of other types or categories will be returned without these constraints to be applied. Each property describes a separate constraint.\n\nCurrently, the following properties are supported:\n\n* `evStation[minPower]`: Sets a constraint on the minimum power in kW delivered by at least one of the station EVSE. Accepted is a single decimal value.\n\n* `evStation[connectorTypeIds]`: Sets a constraint on the connector type ID that the EV station result should have for at least one of its EVSE.\n   Accepted are comma-separated integer values for non-deprecated connectors, listed in the [HERE EV Charge Points API v2 documentation](https://www.here.com/docs/bundle/ev-charge-points-api-developer-guide/page/topics/resource-type-connector-types.html)\n\n* `evStation[supplierNames]`: Sets a constraint on the charge point operator name operating of the EV station place result. Accepted are multiple comma-separated names.\n\n* `evStation[current]`: Sets a constraint on the current phase provided at one of the EVSE of the EV station result. Accepted is either AC or DC\n\n* `evStation[eMobilityServiceProviderPartnerIds]`: Sets a constraint on the e-Mobility Service Providers (eMSP) available at the EV station place result.\n\n* `evStation[paymentMethodIds]`: Sets a constraint on the payment methods that the EV station result should support.\n\nExample (line-breaks used for the sake of readability):\n```\nevStation[connectorTypeIds]=29,33&evStation[minPower]=50.0&evStation[supplierNames]=ChargePoint&\nevStation[eMobilityServiceProviderPartnerIds]=1f351b84-cca5-11ed-8155-42010aa40002&evStation[paymentMethodIds]=creditCard\n```\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/evStation"
          }
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Select the language to be used for result rendering from a list of [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) compliant language codes.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of results to be returned. For paginated queries (`offset` parameter) it specifies the expected number of results per page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32",
            "default" : 20
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "**ALPHA** If set, the `offset` parameter switches on the pagination mode:\n\n* The response element items is returned together with the 4 attributes: `limit`, `offset`, `count`, `nextOffset`.\n* The response becomes a \"page\" of `<count>` results at a certain `offset`.\n* If `offset` parameter is not set, there is no pagination and none of the 4 attributes is returned.\n\nNote that if the `offset` value exceeds the total number of `items`, the response `items` list will be empty.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 99,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "politicalView",
          "in" : "query",
          "description" : "Toggle the political view.\n\nThis parameter accepts a single ISO 3166-1 alpha-3 country code in all uppercase.\n\nIf a valid 3-letter country code is provided for which GS7 does not have a dedicated political view, it will fallback to the default view.\n\nThe following political views are currently supported:\n\n- `ARG`: Argentina's view on the Southern Patagonian Ice Field and Tierra Del Fuego, including the Falkland Islands, South Georgia, and South Sandwich Islands\n- `EGY`: Egypt's view on Bir Tawil\n- `IND`: India's view on Gilgit-Baltistan\n- `KEN`: Kenya's view on the Ilemi Triangle\n- `MAR`: Morocco's view on Western Sahara\n- `PAK`: Pakistan's view on Jammu and Kashmir and the Junagadh Area\n- `RUS`: Russia's view on Crimea\n- `SDN`: Sudan's view on the Halaib Triangle\n- `SRB`: Serbia's view on Kosovo, Vukovar, and Sarengrad Islands\n- `SUR`: Suriname's view on the Courantyne Headwaters and Lawa Headwaters\n- `SYR`: Syria's view on the Golan Heights\n- `TUR`: Turkey's view on Cyprus and Northern Cyprus\n- `TZA`: Tanzania's view on Lake Malawi\n- `URY`: Uruguay's view on Rincon de Artigas\n- `VNM`: Vietnam's view on the Paracel Islands and Spratly Islands",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "show",
          "in" : "query",
          "description" : "Select additional fields to be rendered in the response.\nPlease note that some of the fields involve additional webservice calls and can increase the overall response time.\n\nThe value is a comma-separated list of the sections to be enabled.\nFor some sections there is a long and a short ID.\n\nDescription of supported values:\n\n- `details`: Renders address and contact details, as well as opening hours of the searched place.\n- `phonemes`: Renders phonemes for address and place names into the results.\n- `streetInfo`: For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.\n- `tz`: Renders result items with additional time zone information.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "details", "phonemes", "streetInfo", "tz" ]
            }
          }
        }, {
          "name" : "showMapReferences",
          "in" : "query",
          "description" : "Return the map references of the location objects\n\nDescription of supported values:\n\n- `adminIds`: Return the ids for the admin hierarchy of the response, to enable cross referencing into other services or data applications based on HERE Map Content\n- `pointAddress`: Return the reference of the point address,\n  to enable cross referencing into other services or data applications\n  based on HERE Map Content\n- `segments`: Return the street segment references from the result's access position,\n  to enable cross referencing into other services or data applications\n  based on HERE Map Content",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "adminIds", "pointAddress", "segments" ]
            }
          }
        }, {
          "name" : "X-Request-ID",
          "in" : "header",
          "description" : "Used to correlate requests with their responses within a customer's application, for logging and error reporting.\n\nFormat: Free string, but a valid UUIDv4 is recommended.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The request body must only contain those properties that are explicitly mentioned here.\nIn general, those are query parameter that might contain especially long values, e.g. `route`.\nFor POST requests those can alternatively still be supplied as query parameters. However, they\nmust never be provided in both URL and request body simultaneously.\n",
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/body_1"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "The search results.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OpenSearchAutosuggestResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Client error: request failed validation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405" : {
            "description" : "Client error: http method not supported.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "413" : {
            "description" : "Client error: request body exceeds size limit.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "415" : {
            "description" : "Client error: request body has unsupported content type.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Client error: Rate limit exceeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503" : {
            "description" : "Temporary server error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "servers" : [ {
        "url" : "https://autosuggest.search.hereapi.com/v1"
      } ]
    },
    "/autocomplete" : {
      "get" : {
        "summary" : "Autocomplete",
        "description" : "This endpoint completes the few entered keystrokes to the valid street address or\nadministrative area to speed-up entering the address queries.",
        "parameters" : [ {
          "name" : "q",
          "in" : "query",
          "description" : "Enter a free-text query\n\nExamples:\n * `ber`, `berl`, `berli`, ...\n * `berlin+p`, `berlin+paris`, `berlin+parise`, ...\n * `berlin+pariser+20`\n\n _Note: Whitespace, urls, email addresses, or other out-of-scope queries will yield no results._\n",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "Berlin Pariser 20"
          }
        }, {
          "name" : "at",
          "in" : "query",
          "description" : "Specify the center of the search context expressed as coordinates.\n\nFormat: `{latitude},{longitude}`\n\nType: `{decimal},{decimal}`\n\nExample: `-13.163068,-72.545128` (Machu Picchu Mountain, Peru)\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "in",
          "in" : "query",
          "description" : "Search within a geographic area. This is a hard filter. Results will be returned if they are located within the specified area.\n\nA geographic area can be\n\n * a country (or multiple countries), provided as comma-separated [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country codes\n\n   The country codes are to be provided in all uppercase.\n\n   Format: `countryCode:{countryCode}[,{countryCode}]*`\n\n   Examples:\n    * `countryCode:USA`\n    * `countryCode:CAN,MEX,USA`\n\n\n * a circular area, provided as latitude, longitude, and radius (in meters)\n\n   Format: `circle:{latitude},{longitude};r={radius}`\n\n   Type: `circle:{decimal},{decimal};r={integer}`\n\n   Example: `circle:52.53,13.38;r=10000`\n\n\n * a bounding box, provided as _west longitude_, _south latitude_, _east longitude_, _north latitude_\n\n   Format: `bbox:{west longitude},{south latitude},{east longitude},{north latitude}`\n\n   Example: `bbox:13.08836,52.33812,13.761,52.6755`\n\n\nThe following constraints apply:\n\n * Parameters \"at\", \"in=circle\" and \"in=bbox\" are mutually exclusive. Only one of them is allowed.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "postalCodeMode",
          "in" : "query",
          "description" : "Options to return multiple results in areas where a postal code is associated with more than one district or city area.\nWithout these options, the system only provides one result and may leave the district or city name blank or use a default name,\npotentially omitting relevant districts of cities.\n\nDescription of supported values:\n\n- `cityLookup`: When a postal code spans multiple cities, this option gives you all possible combinations of the postal code with the corresponding city names.\n- `districtLookup`: When a postal code spans multiple districts (within one city or across multiple cities), this option gives you all possible combinations of the postal code with the corresponding district and city names.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "cityLookup", "districtLookup" ]
          }
        }, {
          "name" : "types",
          "in" : "query",
          "description" : "Limit the result items to the specified types.\n\nProvide one of the supported values or a comma separated list.\n\nDescription of supported values:\n\n- `area`: restricting results to result types `locality` or `administrativeArea` including all the sub-types\n- `city`: restricting results to result type `locality` and locality type `city`\n- `postalCode`: restricting results to postal codes: either result type `postalCodePoint` or result type `locality` with locality type `postalCode`.\n\n    Note that in Ireland and Singapore, where each address has unique postal code,\n    `postalCodePoint` results are replaced by `houseNumber` results.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "area", "city", "postalCode" ]
            }
          }
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Select the preferred response language for result rendering from a list of BCP47 compliant Language Codes.\nThe Autocomplete endpoint tries to detect the query language based on matching name variants and then chooses the same language for the response.\n\nTherefore the end-user can see and recognize all the entered terms in the same language as in the query.\nThe specified preferred language is used only for not matched address tokens and for matched address tokens in case of ambiguity\n",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of results to be returned.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 20,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32",
            "default" : 5
          }
        }, {
          "name" : "politicalView",
          "in" : "query",
          "description" : "Toggle the political view.\n\nThis parameter accepts a single ISO 3166-1 alpha-3 country code in all uppercase.\n\nIf a valid 3-letter country code is provided for which GS7 does not have a dedicated political view, it will fallback to the default view.\n\nThe following political views are currently supported:\n\n- `ARG`: Argentina's view on the Southern Patagonian Ice Field and Tierra Del Fuego, including the Falkland Islands, South Georgia, and South Sandwich Islands\n- `EGY`: Egypt's view on Bir Tawil\n- `IND`: India's view on Gilgit-Baltistan\n- `KEN`: Kenya's view on the Ilemi Triangle\n- `MAR`: Morocco's view on Western Sahara\n- `PAK`: Pakistan's view on Jammu and Kashmir and the Junagadh Area\n- `RUS`: Russia's view on Crimea\n- `SDN`: Sudan's view on the Halaib Triangle\n- `SRB`: Serbia's view on Kosovo, Vukovar, and Sarengrad Islands\n- `SUR`: Suriname's view on the Courantyne Headwaters and Lawa Headwaters\n- `SYR`: Syria's view on the Golan Heights\n- `TUR`: Turkey's view on Cyprus and Northern Cyprus\n- `TZA`: Tanzania's view on Lake Malawi\n- `URY`: Uruguay's view on Rincon de Artigas\n- `VNM`: Vietnam's view on the Paracel Islands and Spratly Islands",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "show",
          "in" : "query",
          "description" : "Select additional fields to be rendered in the response.\nPlease note that some of the fields involve additional webservice calls and can increase the overall response time.\n\nThe value is a comma-separated list of the sections to be enabled.\nFor some sections there is a long and a short ID.\n\nDescription of supported values:\n\n- `streetInfo`: For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "streetInfo" ]
            }
          }
        }, {
          "name" : "X-Request-ID",
          "in" : "header",
          "description" : "Used to correlate requests with their responses within a customer's application, for logging and error reporting.\n\nFormat: Free string, but a valid UUIDv4 is recommended.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The search results.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OpenSearchAutocompleteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Client error: request failed validation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405" : {
            "description" : "Client error: http method not supported.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Client error: Rate limit exceeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503" : {
            "description" : "Temporary server error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "servers" : [ {
        "url" : "https://autocomplete.search.hereapi.com/v1"
      } ]
    },
    "/browse" : {
      "get" : {
        "summary" : "Browse",
        "description" : "This endpoint provides search results for places based on different filters, such as categories\nor name, ranked by distance from a given search center. The only mandatory elements exposed in the response\nare ID and position. The other elements shown in the response samples section are only dataset attributes\nsuggestions.",
        "parameters" : [ {
          "name" : "at",
          "in" : "query",
          "description" : "Specify the center of the search context expressed as coordinates\n\nRequired parameter for endpoints that are expected to rank results by distance from the explicitly\n specified search center\n\nFormat: `{latitude},{longitude}`\n\nType: `{decimal},{decimal}`\n\nExample: `-13.163068,-72.545128` (Machu Picchu Mountain, Peru)\n",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "52.5308,13.3856"
          }
        }, {
          "name" : "categories",
          "in" : "query",
          "description" : "Category filter consisting of a comma-separated list of category-IDs for Categories defined in the HERE Places Category System, described\nin the Appendix to the HERE Search Developer Guide. Places with any assigned categories that match any of the requested categories are\nincluded in the response.\n\nAn exclamation mark \"`!`\" in front of a category ID causes that category to be excluded from the results.\nIt is possible to mix excluded and included categories in the request - e.g. searching for places that are restaurants but not fast food restaurants.\nAn exclusion will always win over an inclusion.\n",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "chains",
          "in" : "query",
          "description" : "Chain filter consisting of a comma-separated list of chain-IDs for Chains defined in the HERE Places Chain System, described\nin the Appendix to the HERE Search Developer Guide. Places with any assigned chains that match any of the requested chains are\nincluded in the response.\n\nAn exclamation mark \"`!`\" in front of a chain ID causes that chain to be excluded from the results.\nIt is possible to mix excluded and included chains in the request - e.g. searching for places that are amazon but not wholefoods.\nAn exclusion will always win over an inclusion.\n",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "foodTypes",
          "in" : "query",
          "description" : "FoodType filter consisting of a comma-separated list of cuisine-IDs for FoodTypes defined in the HERE Places Cuisine System, described\nin the Appendix to the HERE Search Developer Guide. Places with any assigned foodTypes that match any of the requested foodTypes are\nincluded in the response.\n\nAn exclamation mark \"`!`\" in front of a cuisine ID causes that foodType to be excluded from the results.\nIt is possible to mix excluded and included foodTypes in the request - e.g. searching for places that serve italian but not chinese.\nAn exclusion will always win over an inclusion.\n",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "in",
          "in" : "query",
          "description" : "Search within a geographic area. This is a hard filter. Results will be returned if they are located within the specified area.\n\nA geographic area can be\n\n * a country (or multiple countries), provided as comma-separated [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country codes\n\n   The country codes are to be provided in all uppercase.\n\n   Format: `countryCode:{countryCode}[,{countryCode}]*`\n\n   Examples:\n    * `countryCode:USA`\n    * `countryCode:CAN,MEX,USA`\n\n\n * a circular area, provided as latitude, longitude, and radius (in meters)\n\n   Format: `circle:{latitude},{longitude};r={radius}`\n\n   Type: `circle:{decimal},{decimal};r={integer}`\n\n   Example: `circle:52.53,13.38;r=10000`\n\n\n * a bounding box, provided as _west longitude_, _south latitude_, _east longitude_, _north latitude_\n\n   Format: `bbox:{west longitude},{south latitude},{east longitude},{north latitude}`\n\n   Example: `bbox:13.08836,52.33812,13.761,52.6755`\n\n\nThe following constraints apply:\n\n * Parameters \"in=circle\" and \"in=bbox\" are mutually exclusive. Only one of them is allowed.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Full-text filter on POI names/titles. Results with a partial match on the name parameter are included in the response.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ranking",
          "in" : "query",
          "description" : "**BETA** Selects the ranking mode to be used.\nThis parameter only applies to places category, cuisine or chain search use cases (See [browse-category-filter](https://www.here.com/docs/bundle/geocoding-and-search-api-developer-guide/page/topics/endpoint-browse-brief.html#multigranular-place-category-filter)\nand [browse-chain-filter](https://www.here.com/docs/bundle/geocoding-and-search-api-developer-guide/page/topics/endpoint-browse-brief.html#place-chain-filter)).\nIt is ignored for other search use cases.\n\n\nDescription of supported values:\n\n- **BETA** `excursionDistance`: Rank results in along the route parameter by increasing distance\n  from the route polyline.\n\n  Constraint: `ranking=excursionDistance` returns a 400 status code if the `route` parameter is not specified.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "excursionDistance" ]
          }
        }, {
          "name" : "route",
          "in" : "query",
          "description" : "**BETA** Select within a geographic corridor. This is a hard filter. Results will be returned if they are located within the specified area.\n\nA `route` is defined by a [Flexible Polyline Encoding](https://github.com/heremaps/flexible-polyline),\n followed by an optional width, represented by a sub-parameter \"w\".\n\nFormat: `{route};w={width}`\n\nIn regular expression syntax, the values of `route` look like:\n\n`[a-zA-Z0-9_-]+(;w=\\d+)?`\n\n\"[a-zA-Z0-9._-]+\" is the encoded flexible polyline.\n\n\"w=\\d+\" is the optional width. The width is specified in meters from the center of the path. If no width is provided, the default is 1000 meters.\n\nType: `{Flexible Polyline Encoding};w={integer}`\n\nThe following constraints apply:\n * A `route` MUST contain at least two points (one segment).\n * A `route` MUST NOT contain more than 2,000 points.\n * A `route` MUST NOT have a width of more than 50,000 meters.\n\nExamples:\n * `BFoz5xJ67i1B1B7PzIhaxL7Y`\n * `BFoz5xJ67i1B1B7PzIhaxL7Y;w=5000`\n * `BlD05xgKuy2xCCx9B7vUCl0OhnRC54EqSCzpEl-HCxjD3pBCiGnyGCi2CvwFCsgD3nDC4vB6eC;w=2000`\n\nNote: The last example above can be decoded (using the Python class [here](https://github.com/heremaps/flexible-polyline/tree/master/python) as follows:\n\n```\n>>> import flexpolyline\n>>> polyline = 'BlD05xgKuy2xCCx9B7vUCl0OhnRC54EqSCzpEl-HCxjD3pBCiGnyGCi2CvwFCsgD3nDC4vB6eC'\n>>> flexpolyline.decode(polyline)\n[(52.51994, 13.38663, 1.0), (52.51009, 13.28169, 2.0), (52.43518, 13.19352, 3.0), (52.41073, 13.19645, 4.0),\n (52.38871, 13.15578, 5.0), (52.37278, 13.1491, 6.0), (52.37375, 13.11546, 7.0), (52.38752, 13.08722, 8.0),\n (52.40294, 13.07062, 9.0), (52.41058, 13.07555, 10.0)]\n```\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "evStation",
          "in" : "query",
          "description" : "`evStation[<property>]`  deep object parameter allows to add constraints on the places results of category EV station (`700-7600-0322`, `700-7600-0323`, `700-7600-0324`).\nSearch results of other types or categories will be returned without these constraints to be applied. Each property describes a separate constraint.\n\nCurrently, the following properties are supported:\n\n* `evStation[minPower]`: Sets a constraint on the minimum power in kW delivered by at least one of the station EVSE. Accepted is a single decimal value.\n\n* `evStation[connectorTypeIds]`: Sets a constraint on the connector type ID that the EV station result should have for at least one of its EVSE.\n   Accepted are comma-separated integer values for non-deprecated connectors, listed in the [HERE EV Charge Points API v2 documentation](https://www.here.com/docs/bundle/ev-charge-points-api-developer-guide/page/topics/resource-type-connector-types.html)\n\n* `evStation[supplierNames]`: Sets a constraint on the charge point operator name operating of the EV station place result. Accepted are multiple comma-separated names.\n\n* `evStation[current]`: Sets a constraint on the current phase provided at one of the EVSE of the EV station result. Accepted is either AC or DC\n\n* `evStation[eMobilityServiceProviderPartnerIds]`: Sets a constraint on the e-Mobility Service Providers (eMSP) available at the EV station place result.\n\n* `evStation[paymentMethodIds]`: Sets a constraint on the payment methods that the EV station result should support.\n\nExample (line-breaks used for the sake of readability):\n```\nevStation[connectorTypeIds]=29,33&evStation[minPower]=50.0&evStation[supplierNames]=ChargePoint&\nevStation[eMobilityServiceProviderPartnerIds]=1f351b84-cca5-11ed-8155-42010aa40002&evStation[paymentMethodIds]=creditCard\n```\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/evStation"
          }
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Select the language to be used for result rendering from a list of [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) compliant language codes.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of results to be returned. For paginated queries (`offset` parameter) it specifies the expected number of results per page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32",
            "default" : 20
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "**ALPHA** If set, the `offset` parameter switches on the pagination mode:\n\n* The response element items is returned together with the 4 attributes: `limit`, `offset`, `count`, `nextOffset`.\n* The response becomes a \"page\" of `<count>` results at a certain `offset`.\n* If `offset` parameter is not set, there is no pagination and none of the 4 attributes is returned.\n\nNote that if the `offset` value exceeds the total number of `items`, the response `items` list will be empty.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 99,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "politicalView",
          "in" : "query",
          "description" : "Toggle the political view.\n\nThis parameter accepts a single ISO 3166-1 alpha-3 country code in all uppercase.\n\nIf a valid 3-letter country code is provided for which GS7 does not have a dedicated political view, it will fallback to the default view.\n\nThe following political views are currently supported:\n\n- `ARG`: Argentina's view on the Southern Patagonian Ice Field and Tierra Del Fuego, including the Falkland Islands, South Georgia, and South Sandwich Islands\n- `EGY`: Egypt's view on Bir Tawil\n- `IND`: India's view on Gilgit-Baltistan\n- `KEN`: Kenya's view on the Ilemi Triangle\n- `MAR`: Morocco's view on Western Sahara\n- `PAK`: Pakistan's view on Jammu and Kashmir and the Junagadh Area\n- `RUS`: Russia's view on Crimea\n- `SDN`: Sudan's view on the Halaib Triangle\n- `SRB`: Serbia's view on Kosovo, Vukovar, and Sarengrad Islands\n- `SUR`: Suriname's view on the Courantyne Headwaters and Lawa Headwaters\n- `SYR`: Syria's view on the Golan Heights\n- `TUR`: Turkey's view on Cyprus and Northern Cyprus\n- `TZA`: Tanzania's view on Lake Malawi\n- `URY`: Uruguay's view on Rincon de Artigas\n- `VNM`: Vietnam's view on the Paracel Islands and Spratly Islands",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "show",
          "in" : "query",
          "description" : "Select additional fields to be rendered in the response.\nPlease note that some of the fields involve additional webservice calls and can increase the overall response time.\n\nThe value is a comma-separated list of the sections to be enabled.\nFor some sections there is a long and a short ID.\n\nDescription of supported values:\n\n- `eMobilityServiceProviders`: Returns for each place of category EV station (`700-7600-0322`, `700-7600-0323`, `700-7600-0324`)\n  the list of e-Mobility Service Providers (eMSP) in `extended.evStation` field.\n- `ev`: Returns for each place of category EV station (`700-7600-0322`, `700-7600-0323`, `700-7600-0324`)\n\n  * connector groups details in `extended.evStation` field and\n  * detailed connectors availability in `extended.evAvailability` field.\n\n  Please note that the use of this option may impact latency.\n- `phonemes`: Renders phonemes for address and place names into the results.\n- `streetInfo`: For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.\n- `tz`: Renders result items with additional time zone information.\n- **BETA, RESTRICTED** `tripadvisor`: If available, adds images, ratings, and editorials from Tripadvisor (TM) in the `media` field of `place` results.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "eMobilityServiceProviders", "ev", "phonemes", "streetInfo", "tripadvisor", "tz" ]
            }
          }
        }, {
          "name" : "X-Request-ID",
          "in" : "header",
          "description" : "Used to correlate requests with their responses within a customer's application, for logging and error reporting.\n\nFormat: Free string, but a valid UUIDv4 is recommended.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The search results.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OpenSearchBrowseResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Client error: request failed validation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405" : {
            "description" : "Client error: http method not supported.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Client error: Rate limit exceeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503" : {
            "description" : "Temporary server error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Browse",
        "description" : "**BETA, RESTRICTED** This endpoint provides search results for places based on different filters, such as categories\nor name, ranked by distance from a given search center. The only mandatory elements exposed in the response\nare ID and position. The other elements shown in the response samples section are only dataset attributes\nsuggestions.",
        "parameters" : [ {
          "name" : "at",
          "in" : "query",
          "description" : "Specify the center of the search context expressed as coordinates\n\nRequired parameter for endpoints that are expected to rank results by distance from the explicitly\n specified search center\n\nFormat: `{latitude},{longitude}`\n\nType: `{decimal},{decimal}`\n\nExample: `-13.163068,-72.545128` (Machu Picchu Mountain, Peru)\n",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "52.5308,13.3856"
          }
        }, {
          "name" : "categories",
          "in" : "query",
          "description" : "Category filter consisting of a comma-separated list of category-IDs for Categories defined in the HERE Places Category System, described\nin the Appendix to the HERE Search Developer Guide. Places with any assigned categories that match any of the requested categories are\nincluded in the response.\n\nAn exclamation mark \"`!`\" in front of a category ID causes that category to be excluded from the results.\nIt is possible to mix excluded and included categories in the request - e.g. searching for places that are restaurants but not fast food restaurants.\nAn exclusion will always win over an inclusion.\n",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "chains",
          "in" : "query",
          "description" : "Chain filter consisting of a comma-separated list of chain-IDs for Chains defined in the HERE Places Chain System, described\nin the Appendix to the HERE Search Developer Guide. Places with any assigned chains that match any of the requested chains are\nincluded in the response.\n\nAn exclamation mark \"`!`\" in front of a chain ID causes that chain to be excluded from the results.\nIt is possible to mix excluded and included chains in the request - e.g. searching for places that are amazon but not wholefoods.\nAn exclusion will always win over an inclusion.\n",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "foodTypes",
          "in" : "query",
          "description" : "FoodType filter consisting of a comma-separated list of cuisine-IDs for FoodTypes defined in the HERE Places Cuisine System, described\nin the Appendix to the HERE Search Developer Guide. Places with any assigned foodTypes that match any of the requested foodTypes are\nincluded in the response.\n\nAn exclamation mark \"`!`\" in front of a cuisine ID causes that foodType to be excluded from the results.\nIt is possible to mix excluded and included foodTypes in the request - e.g. searching for places that serve italian but not chinese.\nAn exclusion will always win over an inclusion.\n",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "in",
          "in" : "query",
          "description" : "Search within a geographic area. This is a hard filter. Results will be returned if they are located within the specified area.\n\nA geographic area can be\n\n * a country (or multiple countries), provided as comma-separated [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country codes\n\n   The country codes are to be provided in all uppercase.\n\n   Format: `countryCode:{countryCode}[,{countryCode}]*`\n\n   Examples:\n    * `countryCode:USA`\n    * `countryCode:CAN,MEX,USA`\n\n\n * a circular area, provided as latitude, longitude, and radius (in meters)\n\n   Format: `circle:{latitude},{longitude};r={radius}`\n\n   Type: `circle:{decimal},{decimal};r={integer}`\n\n   Example: `circle:52.53,13.38;r=10000`\n\n\n * a bounding box, provided as _west longitude_, _south latitude_, _east longitude_, _north latitude_\n\n   Format: `bbox:{west longitude},{south latitude},{east longitude},{north latitude}`\n\n   Example: `bbox:13.08836,52.33812,13.761,52.6755`\n\n\nThe following constraints apply:\n\n * Parameters \"in=circle\" and \"in=bbox\" are mutually exclusive. Only one of them is allowed.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Full-text filter on POI names/titles. Results with a partial match on the name parameter are included in the response.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ranking",
          "in" : "query",
          "description" : "**BETA** Selects the ranking mode to be used.\nThis parameter only applies to places category, cuisine or chain search use cases (See [browse-category-filter](https://www.here.com/docs/bundle/geocoding-and-search-api-developer-guide/page/topics/endpoint-browse-brief.html#multigranular-place-category-filter)\nand [browse-chain-filter](https://www.here.com/docs/bundle/geocoding-and-search-api-developer-guide/page/topics/endpoint-browse-brief.html#place-chain-filter)).\nIt is ignored for other search use cases.\n\n\nDescription of supported values:\n\n- **BETA** `excursionDistance`: Rank results in along the route parameter by increasing distance\n  from the route polyline.\n\n  Constraint: `ranking=excursionDistance` returns a 400 status code if the `route` parameter is not specified.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "excursionDistance" ]
          }
        }, {
          "name" : "route",
          "in" : "query",
          "description" : "**BETA** Select within a geographic corridor. This is a hard filter. Results will be returned if they are located within the specified area.\n\nA `route` is defined by a [Flexible Polyline Encoding](https://github.com/heremaps/flexible-polyline),\n followed by an optional width, represented by a sub-parameter \"w\".\n\nFormat: `{route};w={width}`\n\nIn regular expression syntax, the values of `route` look like:\n\n`[a-zA-Z0-9_-]+(;w=\\d+)?`\n\n\"[a-zA-Z0-9._-]+\" is the encoded flexible polyline.\n\n\"w=\\d+\" is the optional width. The width is specified in meters from the center of the path. If no width is provided, the default is 1000 meters.\n\nType: `{Flexible Polyline Encoding};w={integer}`\n\nThe following constraints apply:\n * A `route` MUST contain at least two points (one segment).\n * A `route` MUST NOT contain more than 2,000 points.\n * A `route` MUST NOT have a width of more than 50,000 meters.\n\nExamples:\n * `BFoz5xJ67i1B1B7PzIhaxL7Y`\n * `BFoz5xJ67i1B1B7PzIhaxL7Y;w=5000`\n * `BlD05xgKuy2xCCx9B7vUCl0OhnRC54EqSCzpEl-HCxjD3pBCiGnyGCi2CvwFCsgD3nDC4vB6eC;w=2000`\n\nNote: The last example above can be decoded (using the Python class [here](https://github.com/heremaps/flexible-polyline/tree/master/python) as follows:\n\n```\n>>> import flexpolyline\n>>> polyline = 'BlD05xgKuy2xCCx9B7vUCl0OhnRC54EqSCzpEl-HCxjD3pBCiGnyGCi2CvwFCsgD3nDC4vB6eC'\n>>> flexpolyline.decode(polyline)\n[(52.51994, 13.38663, 1.0), (52.51009, 13.28169, 2.0), (52.43518, 13.19352, 3.0), (52.41073, 13.19645, 4.0),\n (52.38871, 13.15578, 5.0), (52.37278, 13.1491, 6.0), (52.37375, 13.11546, 7.0), (52.38752, 13.08722, 8.0),\n (52.40294, 13.07062, 9.0), (52.41058, 13.07555, 10.0)]\n```\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "evStation",
          "in" : "query",
          "description" : "`evStation[<property>]`  deep object parameter allows to add constraints on the places results of category EV station (`700-7600-0322`, `700-7600-0323`, `700-7600-0324`).\nSearch results of other types or categories will be returned without these constraints to be applied. Each property describes a separate constraint.\n\nCurrently, the following properties are supported:\n\n* `evStation[minPower]`: Sets a constraint on the minimum power in kW delivered by at least one of the station EVSE. Accepted is a single decimal value.\n\n* `evStation[connectorTypeIds]`: Sets a constraint on the connector type ID that the EV station result should have for at least one of its EVSE.\n   Accepted are comma-separated integer values for non-deprecated connectors, listed in the [HERE EV Charge Points API v2 documentation](https://www.here.com/docs/bundle/ev-charge-points-api-developer-guide/page/topics/resource-type-connector-types.html)\n\n* `evStation[supplierNames]`: Sets a constraint on the charge point operator name operating of the EV station place result. Accepted are multiple comma-separated names.\n\n* `evStation[current]`: Sets a constraint on the current phase provided at one of the EVSE of the EV station result. Accepted is either AC or DC\n\n* `evStation[eMobilityServiceProviderPartnerIds]`: Sets a constraint on the e-Mobility Service Providers (eMSP) available at the EV station place result.\n\n* `evStation[paymentMethodIds]`: Sets a constraint on the payment methods that the EV station result should support.\n\nExample (line-breaks used for the sake of readability):\n```\nevStation[connectorTypeIds]=29,33&evStation[minPower]=50.0&evStation[supplierNames]=ChargePoint&\nevStation[eMobilityServiceProviderPartnerIds]=1f351b84-cca5-11ed-8155-42010aa40002&evStation[paymentMethodIds]=creditCard\n```\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/evStation"
          }
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Select the language to be used for result rendering from a list of [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) compliant language codes.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of results to be returned. For paginated queries (`offset` parameter) it specifies the expected number of results per page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32",
            "default" : 20
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "**ALPHA** If set, the `offset` parameter switches on the pagination mode:\n\n* The response element items is returned together with the 4 attributes: `limit`, `offset`, `count`, `nextOffset`.\n* The response becomes a \"page\" of `<count>` results at a certain `offset`.\n* If `offset` parameter is not set, there is no pagination and none of the 4 attributes is returned.\n\nNote that if the `offset` value exceeds the total number of `items`, the response `items` list will be empty.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 99,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "politicalView",
          "in" : "query",
          "description" : "Toggle the political view.\n\nThis parameter accepts a single ISO 3166-1 alpha-3 country code in all uppercase.\n\nIf a valid 3-letter country code is provided for which GS7 does not have a dedicated political view, it will fallback to the default view.\n\nThe following political views are currently supported:\n\n- `ARG`: Argentina's view on the Southern Patagonian Ice Field and Tierra Del Fuego, including the Falkland Islands, South Georgia, and South Sandwich Islands\n- `EGY`: Egypt's view on Bir Tawil\n- `IND`: India's view on Gilgit-Baltistan\n- `KEN`: Kenya's view on the Ilemi Triangle\n- `MAR`: Morocco's view on Western Sahara\n- `PAK`: Pakistan's view on Jammu and Kashmir and the Junagadh Area\n- `RUS`: Russia's view on Crimea\n- `SDN`: Sudan's view on the Halaib Triangle\n- `SRB`: Serbia's view on Kosovo, Vukovar, and Sarengrad Islands\n- `SUR`: Suriname's view on the Courantyne Headwaters and Lawa Headwaters\n- `SYR`: Syria's view on the Golan Heights\n- `TUR`: Turkey's view on Cyprus and Northern Cyprus\n- `TZA`: Tanzania's view on Lake Malawi\n- `URY`: Uruguay's view on Rincon de Artigas\n- `VNM`: Vietnam's view on the Paracel Islands and Spratly Islands",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "show",
          "in" : "query",
          "description" : "Select additional fields to be rendered in the response.\nPlease note that some of the fields involve additional webservice calls and can increase the overall response time.\n\nThe value is a comma-separated list of the sections to be enabled.\nFor some sections there is a long and a short ID.\n\nDescription of supported values:\n\n- `eMobilityServiceProviders`: Returns for each place of category EV station (`700-7600-0322`, `700-7600-0323`, `700-7600-0324`)\n  the list of e-Mobility Service Providers (eMSP) in `extended.evStation` field.\n- `ev`: Returns for each place of category EV station (`700-7600-0322`, `700-7600-0323`, `700-7600-0324`)\n\n  * connector groups details in `extended.evStation` field and\n  * detailed connectors availability in `extended.evAvailability` field.\n\n  Please note that the use of this option may impact latency.\n- `phonemes`: Renders phonemes for address and place names into the results.\n- `streetInfo`: For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.\n- `tz`: Renders result items with additional time zone information.\n- **BETA, RESTRICTED** `tripadvisor`: If available, adds images, ratings, and editorials from Tripadvisor (TM) in the `media` field of `place` results.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "eMobilityServiceProviders", "ev", "phonemes", "streetInfo", "tripadvisor", "tz" ]
            }
          }
        }, {
          "name" : "X-Request-ID",
          "in" : "header",
          "description" : "Used to correlate requests with their responses within a customer's application, for logging and error reporting.\n\nFormat: Free string, but a valid UUIDv4 is recommended.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The request body must only contain those properties that are explicitly mentioned here.\nIn general, those are query parameter that might contain especially long values, e.g. `route`.\nFor POST requests those can alternatively still be supplied as query parameters. However, they\nmust never be provided in both URL and request body simultaneously.\n",
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/body_2"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "The search results.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OpenSearchBrowseResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Client error: request failed validation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405" : {
            "description" : "Client error: http method not supported.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "413" : {
            "description" : "Client error: request body exceeds size limit.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "415" : {
            "description" : "Client error: request body has unsupported content type.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Client error: Rate limit exceeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503" : {
            "description" : "Temporary server error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "servers" : [ {
        "url" : "https://browse.search.hereapi.com/v1"
      } ]
    },
    "/revgeocode" : {
      "get" : {
        "summary" : "Reverse Geocode",
        "description" : "This endpoint returns the nearest address to geo coordinates specified in the request.",
        "parameters" : [ {
          "name" : "at",
          "in" : "query",
          "description" : "Specify the center of the search context expressed as coordinates.\n\nFormat: `{latitude},{longitude}`\n\nType: `{decimal},{decimal}`\n\nExample: `-13.163068,-72.545128` (Machu Picchu Mountain, Peru)\n\nThe following constraints apply:\n\n * Either \"at\" or \"in=circle\" is required.\n\n * Parameters \"at\" and \"in=circle\" are mutually exclusive. Only one of them is allowed.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "52.5308,13.3856"
          }
        }, {
          "name" : "bearing",
          "in" : "query",
          "description" : "Takes the \"bearing\" into account for matching nearby street results.\n\nBearing expresses the direction in which an asset is heading in degrees starting at true north and continuing clockwise around the compass.\nNorth is 0 degrees, east is 90 degrees, south is 180 degrees, west is 270 degrees. Values are expected to be of type Integer.\n\nWhen this parameter is provided, all results will be of type `street`. It is not necessary to provide `types=street` explicitly.\n\nThe following constraints apply:\n\n* If a `types` parameter is provided, the only accepted value is `types=street`.\n\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 359,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32",
            "example" : 42
          }
        }, {
          "name" : "in",
          "in" : "query",
          "description" : "Search within a geographic area. This is a hard filter. Results will be returned if they are located within the specified area.\n\nA geographic area can be\n\n * a circular area, provided as latitude, longitude, and radius (in meters)\n\n   Format: `circle:{latitude},{longitude};r={radius}`\n\n   Type: `circle:{decimal},{decimal};r={integer}`\n\n   Example: `circle:52.53,13.38;r=10000`\n\n\nThe following constraints apply:\n\n * Either \"at\" or \"in=circle\" is required.\n\n * Parameters \"at\" and \"in=circle\" are mutually exclusive. Only one of them is allowed.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "types",
          "in" : "query",
          "description" : "Limit the result items to the specified types.\n\nProvide one of the supported values or a comma separated list.\n\nThe following constraints apply:\n\n* If a `bearing` parameter is provided, the `types` parameter will accept `types=street` only.\n\n\nDescription of supported values:\n\n- `address`: restricting results to result types `houseNumber`, `street`, `postalCodePoint`, or `addressBlock`.\n  Result type \"intersection\" is excluded from this list because it is not supported in reverse geocoder.\n- `area`: restricting results to result types `locality` or `administrativeArea` including all the sub-types\n- `city`: restricting results to result type `locality` and locality type `city`\n- `street`: restricting results to result type `street`",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "address", "area", "city", "street" ]
            }
          }
        }, {
          "name" : "with",
          "in" : "query",
          "description" : "Activate certain features or consider specific kinds of results, that would not be active or provided by default.\n\nDescription of supported values:\n\n- `unnamedStreets`: Enables the retrieval of unnamed street results.\n- **ALPHA** `estimatedAreaFallback`: Adds district and city names to results in areas where the respective names cannot be obtained from area polygon data.\n  Instead, the Reverse Geocoder estimates these names based on administrative assignments to streets.\n  A flag ‚Äú`estimatedAreaFallback: true`‚Äù is returned in response which indicates the administrative result is estimated.\n  'Distance' is calculated from the input to the closest street section, user could judge the result confidence from the distance.\n  While this estimation can be helpful in many cases, it may not always be completely accurate.\n  The probability of false results, such as neighboring district or city names, exists primarily in border regions.\n  This means that when streets are near the border between different administrative districts or cities,\n  the estimation may occasionally provide the wrong district or city name.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "estimatedAreaFallback", "unnamedStreets" ]
            }
          }
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Select the language to be used for result rendering from a list of [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) compliant language codes.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of results to be returned.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32",
            "default" : 1
          }
        }, {
          "name" : "politicalView",
          "in" : "query",
          "description" : "Toggle the political view.\n\nThis parameter accepts a single ISO 3166-1 alpha-3 country code in all uppercase.\n\nIf a valid 3-letter country code is provided for which GS7 does not have a dedicated political view, it will fallback to the default view.\n\nThe following political views are currently supported:\n\n- `ARG`: Argentina's view on the Southern Patagonian Ice Field and Tierra Del Fuego, including the Falkland Islands, South Georgia, and South Sandwich Islands\n- `EGY`: Egypt's view on Bir Tawil\n- `IND`: India's view on Gilgit-Baltistan\n- `KEN`: Kenya's view on the Ilemi Triangle\n- `MAR`: Morocco's view on Western Sahara\n- `PAK`: Pakistan's view on Jammu and Kashmir and the Junagadh Area\n- `RUS`: Russia's view on Crimea\n- `SDN`: Sudan's view on the Halaib Triangle\n- `SRB`: Serbia's view on Kosovo, Vukovar, and Sarengrad Islands\n- `SUR`: Suriname's view on the Courantyne Headwaters and Lawa Headwaters\n- `SYR`: Syria's view on the Golan Heights\n- `TUR`: Turkey's view on Cyprus and Northern Cyprus\n- `TZA`: Tanzania's view on Lake Malawi\n- `URY`: Uruguay's view on Rincon de Artigas\n- `VNM`: Vietnam's view on the Paracel Islands and Spratly Islands",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "showMapReferences",
          "in" : "query",
          "description" : "Return the map references of the location objects\n\nDescription of supported values:\n\n- `adminIds`: Return the ids for the admin hierarchy of the response, to enable cross referencing into other services or data applications based on HERE Map Content\n- `cmVersion`: Return the core map version number of the region where the result is located\n- `links`: Return the link references from the result's access position,\n  to enable cross referencing into other services or data applications\n- `pointAddress`: Return the reference of the point address,\n  to enable cross referencing into other services or data applications\n  based on HERE Map Content\n- `segments`: Return the street segment references from the result's access position,\n  to enable cross referencing into other services or data applications\n  based on HERE Map Content\n\n    **NOTE** The previous parameter `show=hmcReference` is deprecated and replaced\n    by `showMapReferences=segments` which serves the same purpose.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "adminIds", "cmVersion", "links", "pointAddress", "segments" ]
            }
          }
        }, {
          "name" : "show",
          "in" : "query",
          "description" : "Select additional fields to be rendered in the response.\nPlease note that some of the fields involve additional webservice calls and can increase the overall response time.\n\nThe value is a comma-separated list of the sections to be enabled.\nFor some sections there is a long and a short ID.\n\nDescription of supported values:\n\n- `countryInfo`: For each result item renders additional block with the country info, such as\n  [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) and\n  [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country code.\n- `postalCodeDetails`: For each result item of types `postalCodePoint` renders block with additional information about this postal code,\n  such as postal code type: ZIP or ZIP+4; ZIP classification code: PO BOX, Unique or military; record type code for ZIP+4 codes.\n  This feature is currently available only in the countries which are using ZIP codes - USA, PRI, VIR, GUM, MNP and ASM.\n- `streetInfo`: For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.\n- `tz`: Renders result items with additional time zone information.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "countryInfo", "postalCodeDetails", "streetInfo", "tz" ]
            }
          }
        }, {
          "name" : "showNavAttributes",
          "in" : "query",
          "description" : "Return requested additional attributes for segments in a road network if `showNavAttributes` parameter is specified with valid value and relevant data is available.\n\nThe value is a comma-separated list of the sections to be enabled.\n\nDescription of supported values:\n\n- `access`: Return the vehicle types allowed on a road or lane.\n- `functionalClass`: Return the functional class which is used to classify roads depending on the speed, importance and connectivity of the road.\n- `physical`: Return the values to describe special physical characteristics of a road.\n- `speedLimits`: Include speed limit and travel direction of the road in the results where available in content and when requested by the client application.\n\n  Note on `speedLimits`:\n  - The feature is not supported in Japan.\n  - This feature is subject to premium pricing. For details, contact your HERE customer representative.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "access", "functionalClass", "physical", "speedLimits" ]
            }
          }
        }, {
          "name" : "showRelated",
          "in" : "query",
          "description" : "allows enriching some types of response items with related items\n\nDescription of supported values:\n\n- `intersections`: For street and house number results, include a block containing a list of intersections nearest to the address.\n- `nearbyAddress`: Add nearby address as additional reference to the street level results in Reverse Geocode or Multi-Reverse Geocode, the feature is only available with parameter `bearing` or `types=street`.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "intersections", "nearbyAddress" ]
            }
          }
        }, {
          "name" : "X-Request-ID",
          "in" : "header",
          "description" : "Used to correlate requests with their responses within a customer's application, for logging and error reporting.\n\nFormat: Free string, but a valid UUIDv4 is recommended.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The search results.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OpenSearchReverseGeocodeResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Client error: request failed validation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405" : {
            "description" : "Client error: http method not supported.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Client error: Rate limit exceeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503" : {
            "description" : "Temporary server error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "servers" : [ {
        "url" : "https://revgeocode.search.hereapi.com/v1"
      } ]
    },
    "/multi-revgeocode" : {
      "post" : {
        "summary" : "Multi-Reverse Geocode",
        "description" : "This endpoint returns addresses/places for a list of geo-coordinates specified in the request.",
        "parameters" : [ {
          "name" : "types",
          "in" : "query",
          "description" : "Limit the result items to the specified types.\n\nProvide one of the supported values or a comma separated list.\n\nThe following constraints apply:\n\n* If a `bearing` parameter is provided, the `types` parameter will accept `types=street` only.\n\n\nDescription of supported values:\n\n- `address`: restricting results to result types `houseNumber`, `street`, `postalCodePoint`, or `addressBlock`.\n  Result type \"intersection\" is excluded from this list because it is not supported in reverse geocoder.\n- `area`: restricting results to result types `locality` or `administrativeArea` including all the sub-types\n- `city`: restricting results to result type `locality` and locality type `city`\n- `street`: restricting results to result type `street`",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "address", "area", "city", "street" ]
            }
          }
        }, {
          "name" : "with",
          "in" : "query",
          "description" : "Activate certain features or consider specific kinds of results, that would not be active or provided by default.\n\nDescription of supported values:\n\n- `unnamedStreets`: Enables the retrieval of unnamed street results.\n- **ALPHA** `estimatedAreaFallback`: Adds district and city names to results in areas where the respective names cannot be obtained from area polygon data.\n  Instead, the Reverse Geocoder estimates these names based on administrative assignments to streets.\n  A flag ‚Äú`estimatedAreaFallback: true`‚Äù is returned in response which indicates the administrative result is estimated.\n  'Distance' is calculated from the input to the closest street section, user could judge the result confidence from the distance.\n  While this estimation can be helpful in many cases, it may not always be completely accurate.\n  The probability of false results, such as neighboring district or city names, exists primarily in border regions.\n  This means that when streets are near the border between different administrative districts or cities,\n  the estimation may occasionally provide the wrong district or city name.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "estimatedAreaFallback", "unnamedStreets" ]
            }
          }
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Select the language to be used for result rendering from a list of [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) compliant language codes.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of results to be returned.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 10,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32",
            "default" : 1
          }
        }, {
          "name" : "politicalView",
          "in" : "query",
          "description" : "Toggle the political view.\n\nThis parameter accepts a single ISO 3166-1 alpha-3 country code in all uppercase.\n\nIf a valid 3-letter country code is provided for which GS7 does not have a dedicated political view, it will fallback to the default view.\n\nThe following political views are currently supported:\n\n- `ARG`: Argentina's view on the Southern Patagonian Ice Field and Tierra Del Fuego, including the Falkland Islands, South Georgia, and South Sandwich Islands\n- `EGY`: Egypt's view on Bir Tawil\n- `IND`: India's view on Gilgit-Baltistan\n- `KEN`: Kenya's view on the Ilemi Triangle\n- `MAR`: Morocco's view on Western Sahara\n- `PAK`: Pakistan's view on Jammu and Kashmir and the Junagadh Area\n- `RUS`: Russia's view on Crimea\n- `SDN`: Sudan's view on the Halaib Triangle\n- `SRB`: Serbia's view on Kosovo, Vukovar, and Sarengrad Islands\n- `SUR`: Suriname's view on the Courantyne Headwaters and Lawa Headwaters\n- `SYR`: Syria's view on the Golan Heights\n- `TUR`: Turkey's view on Cyprus and Northern Cyprus\n- `TZA`: Tanzania's view on Lake Malawi\n- `URY`: Uruguay's view on Rincon de Artigas\n- `VNM`: Vietnam's view on the Paracel Islands and Spratly Islands",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "showMapReferences",
          "in" : "query",
          "description" : "Return the map references of the location objects\n\nDescription of supported values:\n\n- `adminIds`: Return the ids for the admin hierarchy of the response, to enable cross referencing into other services or data applications based on HERE Map Content\n- `cmVersion`: Return the core map version number of the region where the result is located\n- `links`: Return the link references from the result's access position,\n  to enable cross referencing into other services or data applications\n- `pointAddress`: Return the reference of the point address,\n  to enable cross referencing into other services or data applications\n  based on HERE Map Content\n- `segments`: Return the street segment references from the result's access position,\n  to enable cross referencing into other services or data applications\n  based on HERE Map Content\n\n    **NOTE** The previous parameter `show=hmcReference` is deprecated and replaced\n    by `showMapReferences=segments` which serves the same purpose.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "adminIds", "cmVersion", "links", "pointAddress", "segments" ]
            }
          }
        }, {
          "name" : "show",
          "in" : "query",
          "description" : "Select additional fields to be rendered in the response.\nPlease note that some of the fields involve additional webservice calls and can increase the overall response time.\n\nThe value is a comma-separated list of the sections to be enabled.\nFor some sections there is a long and a short ID.\n\nDescription of supported values:\n\n- `countryInfo`: For each result item renders additional block with the country info, such as\n  [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) and\n  [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country code.\n- `postalCodeDetails`: For each result item of types `postalCodePoint` renders block with additional information about this postal code,\n  such as postal code type: ZIP or ZIP+4; ZIP classification code: PO BOX, Unique or military; record type code for ZIP+4 codes.\n  This feature is currently available only in the countries which are using ZIP codes - USA, PRI, VIR, GUM, MNP and ASM.\n- `streetInfo`: For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.\n- `tz`: Renders result items with additional time zone information.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "countryInfo", "postalCodeDetails", "streetInfo", "tz" ]
            }
          }
        }, {
          "name" : "showNavAttributes",
          "in" : "query",
          "description" : "Return requested additional attributes for segments in a road network if `showNavAttributes` parameter is specified with valid value and relevant data is available.\n\nThe value is a comma-separated list of the sections to be enabled.\n\nDescription of supported values:\n\n- `access`: Return the vehicle types allowed on a road or lane.\n- `functionalClass`: Return the functional class which is used to classify roads depending on the speed, importance and connectivity of the road.\n- `physical`: Return the values to describe special physical characteristics of a road.\n- `speedLimits`: Include speed limit and travel direction of the road in the results where available in content and when requested by the client application.\n\n  Note on `speedLimits`:\n  - The feature is not supported in Japan.\n  - This feature is subject to premium pricing. For details, contact your HERE customer representative.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "access", "functionalClass", "physical", "speedLimits" ]
            }
          }
        }, {
          "name" : "showRelated",
          "in" : "query",
          "description" : "allows enriching some types of response items with related items\n\nDescription of supported values:\n\n- `intersections`: For street and house number results, include a block containing a list of intersections nearest to the address.\n- `nearbyAddress`: Add nearby address as additional reference to the street level results in Reverse Geocode or Multi-Reverse Geocode, the feature is only available with parameter `bearing` or `types=street`.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "intersections", "nearbyAddress" ]
            }
          }
        }, {
          "name" : "X-Request-ID",
          "in" : "header",
          "description" : "Used to correlate requests with their responses within a customer's application, for logging and error reporting.\n\nFormat: Free string, but a valid UUIDv4 is recommended.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Takes a newline-separated list of requests, following the URL query parameter syntax. Each line may only contain the following parameters.\n\n* The mandatory `id` parameter to identify the sub-request. Its value has to be unique per request. Its value has a size limit of 64 characters and\nmay only contain alphanumeric characters or underscore or dash.\n\n* A mandatory location context: either `at` or `in:circle` have to be specified, but not both at the same time.\n  The supported values are the same as for their query parameter counterparts in the Reverse Geocode endpoint.\n\n* An optional `bearing` parameter, to expresses the direction in which an asset is heading in degrees starting at true north and continuing clockwise around the compass.\n  North is 0 degrees, east is 90 degrees, south is 180 degrees, west is 270 degrees. Values are expected to be of type Integer.\n\n  For additional constraints coming with the `bearing` parameter, please consult the parameter description in the Reverse Geocode endpoint.\n\nNo other parameters are allowed in the body. The body parameters must not be put in the URL here, even though other endpoints might except them there.\nOther request parameters can be given in the URL, as specified in the corresponding section.\nThose are then active for all sub-requests, and combined with the location context from a body line they build a complete sub-request.\nNote that Multi-Reverse Geocode requests may only use `limit`-parameter values of up to ten and it is suggested to keep the value as low as possible for good performance.\n\nAt most one hundred sub-requests are allowed per Multi Reverse Geocode request.\n",
          "content" : {
            "text/plain; charset=UTF-8" : {
              "schema" : {
                "type" : "string"
              },
              "example" : "id=1&at=52.4,13.4\nid=2&at=52.3,13.4"
            },
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "type" : "string"
              },
              "example" : "id=1&at=52.4,13.4\nid=2&at=52.3,13.4"
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The search results.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OpenSearchMultiReverseGeocodeResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Client error: request failed validation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405" : {
            "description" : "Client error: http method not supported.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "413" : {
            "description" : "Client error: request body exceeds size limit.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "415" : {
            "description" : "Client error: request body has unsupported content type.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Client error: Rate limit exceeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503" : {
            "description" : "Temporary server error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "servers" : [ {
        "url" : "https://multi-revgeocode.search.hereapi.com/v1"
      } ]
    },
    "/lookup" : {
      "get" : {
        "summary" : "Lookup By ID",
        "description" : "This endpoint looks up a known place by the HERE ID included in the request.",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "description" : "Location ID, which is the ID of a result item eg. of a Discover request",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "here:pds:place:276u33db-8097f3194e4b411081b761ea9a366776"
          }
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Select the language to be used for result rendering from a list of [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) compliant language codes.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "politicalView",
          "in" : "query",
          "description" : "Toggle the political view.\n\nThis parameter accepts a single ISO 3166-1 alpha-3 country code in all uppercase.\n\nIf a valid 3-letter country code is provided for which GS7 does not have a dedicated political view, it will fallback to the default view.\n\nThe following political views are currently supported:\n\n- `ARG`: Argentina's view on the Southern Patagonian Ice Field and Tierra Del Fuego, including the Falkland Islands, South Georgia, and South Sandwich Islands\n- `EGY`: Egypt's view on Bir Tawil\n- `IND`: India's view on Gilgit-Baltistan\n- `KEN`: Kenya's view on the Ilemi Triangle\n- `MAR`: Morocco's view on Western Sahara\n- `PAK`: Pakistan's view on Jammu and Kashmir and the Junagadh Area\n- `RUS`: Russia's view on Crimea\n- `SDN`: Sudan's view on the Halaib Triangle\n- `SRB`: Serbia's view on Kosovo, Vukovar, and Sarengrad Islands\n- `SUR`: Suriname's view on the Courantyne Headwaters and Lawa Headwaters\n- `SYR`: Syria's view on the Golan Heights\n- `TUR`: Turkey's view on Cyprus and Northern Cyprus\n- `TZA`: Tanzania's view on Lake Malawi\n- `URY`: Uruguay's view on Rincon de Artigas\n- `VNM`: Vietnam's view on the Paracel Islands and Spratly Islands",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "show",
          "in" : "query",
          "description" : "Select additional fields to be rendered in the response.\nPlease note that some of the fields involve additional webservice calls and can increase the overall response time.\n\nThe value is a comma-separated list of the sections to be enabled.\nFor some sections there is a long and a short ID.\n\nDescription of supported values:\n\n- `countryInfo`: For each result item renders additional block with the country info, such as\n  [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) and\n  [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country code.\n- `eMobilityServiceProviders`: Returns for each place of category EV station (`700-7600-0322`, `700-7600-0323`, `700-7600-0324`)\n  the list of e-Mobility Service Providers (eMSP) in `extended.evStation` field.\n- `ev`: Returns for each place of category EV station (`700-7600-0322`, `700-7600-0323`, `700-7600-0324`)\n\n  * connector groups details in `extended.evStation` field and\n  * detailed connectors availability in `extended.evAvailability` field.\n\n  Please note that the use of this option may impact latency.\n- `phonemes`: Renders phonemes for address and place names into the results.\n- `postalCodeDetails`: For each result item of types `postalCodePoint` renders block with additional information about this postal code,\n  such as postal code type: ZIP or ZIP+4; ZIP classification code: PO BOX, Unique or military; record type code for ZIP+4 codes.\n  This feature is currently available only in the countries which are using ZIP codes - USA, PRI, VIR, GUM, MNP and ASM.\n- `streetInfo`: For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.\n- `tz`: Renders result items with additional time zone information.\n- **BETA, RESTRICTED** `tripadvisor`: If available, adds images, ratings, and editorials from Tripadvisor (TM) in the `media` field of `place` results.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "countryInfo", "eMobilityServiceProviders", "ev", "phonemes", "postalCodeDetails", "streetInfo", "tripadvisor", "tz" ]
            }
          }
        }, {
          "name" : "showMapReferences",
          "in" : "query",
          "description" : "Return the map references of the location objects\n\nDescription of supported values:\n\n- `adminIds`: Return the ids for the admin hierarchy of the response, to enable cross referencing into other services or data applications based on HERE Map Content\n- `cmVersion`: Return the core map version number of the region where the result is located\n- `links`: Return the link references from the result's access position,\n  to enable cross referencing into other services or data applications\n- `pointAddress`: Return the reference of the point address,\n  to enable cross referencing into other services or data applications\n  based on HERE Map Content\n- `segments`: Return the street segment references from the result's access position,\n  to enable cross referencing into other services or data applications\n  based on HERE Map Content\n\n    **NOTE** The previous parameter `show=hmcReference` is deprecated and replaced\n    by `showMapReferences=segments` which serves the same purpose.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "adminIds", "cmVersion", "links", "pointAddress", "segments" ]
            }
          }
        }, {
          "name" : "showNavAttributes",
          "in" : "query",
          "description" : "Return requested additional attributes for segments in a road network if `showNavAttributes` parameter is specified with valid value and relevant data is available.\n\nThe value is a comma-separated list of the sections to be enabled.\n\nDescription of supported values:\n\n- `access`: Return the vehicle types allowed on a road or lane.\n- `functionalClass`: Return the functional class which is used to classify roads depending on the speed, importance and connectivity of the road.\n- `physical`: Return the values to describe special physical characteristics of a road.\n- `speedLimits`: Include speed limit and travel direction of the road in the results where available in content and when requested by the client application.\n\n  Note on `speedLimits`:\n  - The feature is not supported in Japan.\n  - This feature is subject to premium pricing. For details, contact your HERE customer representative.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "access", "functionalClass", "physical", "speedLimits" ]
            }
          }
        }, {
          "name" : "showRelated",
          "in" : "query",
          "description" : "allows enriching some types of response items with related items\n\nDescription of supported values:\n\n- **RESTRICTED** `MPA`: For `type=houseNumber` and `houseNumberType=PA` result items, include a block containing a list of micro point addresses associated to this address, such as buildings, floors (levels) or suites (units). GS7 supports micro point addresses in the following countries: AUS, CAN, NZL, USA, PRI.\n- **RESTRICTED** `parentPA`: For `type=houseNumber` and `houseNumberType=MPA` result items, include a block containing the \"parent\" point addresses associated with this micro point address. GS7 supports micro point addresses in the following countries: AUS, CAN, NZL, USA, PRI.",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "MPA", "parentPA" ]
            }
          }
        }, {
          "name" : "X-Request-ID",
          "in" : "header",
          "description" : "Used to correlate requests with their responses within a customer's application, for logging and error reporting.\n\nFormat: Free string, but a valid UUIDv4 is recommended.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The search results.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LookupResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Client error: request failed validation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Requested id could not be found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405" : {
            "description" : "Client error: http method not supported.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Client error: Rate limit exceeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503" : {
            "description" : "Temporary server error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "servers" : [ {
        "url" : "https://lookup.search.hereapi.com/v1"
      } ]
    }
  },
  "components" : {
    "schemas" : {
      "OpenSearchGeocodeResponse" : {
        "required" : [ "items" ],
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "description" : "The results are presented as a JSON list of candidates in ranked order (most-likely to least-likely) based on the matched location criteria.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/GeocodeResultItem"
              } ]
            }
          }
        }
      },
      "GeocodeResultItem" : {
        "required" : [ "address", "id", "title" ],
        "type" : "object",
        "properties" : {
          "title" : {
            "type" : "string",
            "description" : "The localized display name of this result item."
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the result item. This ID can be used for a Look Up by ID search as well."
          },
          "politicalView" : {
            "type" : "string",
            "description" : "ISO3 country code of the item political view (default for international). This response element is populated when the politicalView parameter is set in the query"
          },
          "resultType" : {
            "type" : "string",
            "enum" : [ "addressBlock", "administrativeArea", "houseNumber", "intersection", "locality", "place", "postalCodePoint", "street" ]
          },
          "houseNumberType" : {
            "type" : "string",
            "description" : "\n\nDescription of supported values:\n\n- **RESTRICTED** `MPA`: A Micro Point Address represents a secondary address for a Point\n  Address; for example, building, floor (level) and suite (unit).\n  Micro Point Addresses can be used to enhance Point Address with\n  greater address detail and higher coordinate accuracy. This result\n  type is only returned by Lookup endpoint or Geocode endpoint when\n  `with=MPA` parameter is provided.\n- `PA`: A Point Address represents an individual address as a point object.\n  Point Addresses are coming from trusted sources. We can say with\n  high certainty that the address exists and at what position. A\n  Point Address result contains two types of coordinates. One is the\n  access point (or navigation coordinates), which is the point to\n  start or end a drive. The other point is the position or display\n  point. This point varies per source and country. The point can be\n  the rooftop point, a point close to the building entry, or a point\n  close to the building, driveway or parking lot that belongs to the\n  building.\n- `interpolated`: An interpolated address. These are approximate positions as a\n  result of a linear interpolation based on address ranges. Address\n  ranges, especially in the USA, are typical per block. For\n  interpolated addresses, we cannot say with confidence that the\n  address exists in reality. But the interpolation provides a good\n  location approximation that brings people in most use cases close\n  to the target location. The access point of an interpolated address\n  result is calculated based on the address range and the road\n  geometry. The position (display) point is pre-configured offset\n  from the street geometry. Compared to Point Addresses, interpolated\n  addresses are less accurate.",
            "enum" : [ "MPA", "PA", "interpolated" ]
          },
          "addressBlockType" : {
            "type" : "string",
            "enum" : [ "block", "subblock" ]
          },
          "localityType" : {
            "type" : "string",
            "enum" : [ "city", "district", "postalCode", "subdistrict" ]
          },
          "administrativeAreaType" : {
            "type" : "string",
            "enum" : [ "country", "county", "state" ]
          },
          "address" : {
            "description" : "Postal address of the result item.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Address"
            } ]
          },
          "postalCodeDetails" : {
            "type" : "array",
            "description" : "Additional information for `postalCodePoint` results (only rendered if `show=postalCodeDetails` is\nprovided and only in the countries which are using ZIP codes - USA, PRI, VIR, GUM, MNP, ASM and JPN)",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/PostalCodeDetails_JapanPost"
              }, {
                "$ref" : "#/components/schemas/PostalCodeDetails_Usps_Zip"
              }, {
                "$ref" : "#/components/schemas/PostalCodeDetails_Usps_ZipPlus4"
              } ]
            }
          },
          "position" : {
            "description" : "The coordinates (latitude, longitude) of a pin on a map corresponding to the searched place.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/DisplayResponseCoordinate"
            } ]
          },
          "access" : {
            "type" : "array",
            "description" : "Coordinates of the response item on a HERE map navigable link (for example, for driving or walking).",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/BasicAccessPoint"
              } ]
            }
          },
          "distance" : {
            "type" : "integer",
            "description" : "The distance \"as the crow flies\" from the search center to this result item in meters.\nFor example: \"172039\"",
            "format" : "int64",
            "example" : 172039
          },
          "mapView" : {
            "description" : "The bounding box enclosing the geometric shape (area or line) that an individual result covers. `place` typed results have no `mapView`.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/MapView"
            } ]
          },
          "categories" : {
            "type" : "array",
            "description" : "The list of categories assigned to this place.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Category"
              } ]
            }
          },
          "foodTypes" : {
            "type" : "array",
            "description" : "The list of food types assigned to this place.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Category"
              } ]
            }
          },
          "houseNumberFallback" : {
            "type" : "boolean",
            "description" : "If true, indicates that the requested house number was corrected to match the nearest known house number. This field is visible only when the value is true."
          },
          "estimatedPointAddress" : {
            "type" : "boolean",
            "description" : "If true, indicates that the coordinates of `position` and `access` points of the Point Address are\nestimated.\nThis field is visible only for result items with resultType `houseNumber` and houseNumberType `PA` and\nonly when the value is `true`"
          },
          "timeZone" : {
            "description" : "Provides time zone information for this place. (rendered only if `show=tz` is provided.)",
            "allOf" : [ {
              "$ref" : "#/components/schemas/TimeZoneInfo"
            } ]
          },
          "scoring" : {
            "description" : "Indicates for each result how good the result matches to the original query. This can be used by the\ncustomer application to accept or reject the results depending on how \"expensive\" is the mistake for\ntheir use case",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Scoring"
            } ]
          },
          "parsing" : {
            "description" : "Parsed terms and their positions in the input query (only rendered if `show=parsing` is provided.)",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Parsing"
            } ]
          },
          "streetInfo" : {
            "type" : "array",
            "description" : "Street Details (only rendered if `show=streetInfo` is provided.)",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/StreetInfo"
              } ]
            }
          },
          "countryInfo" : {
            "description" : "Country Details (only rendered if `show=countryInfo` is provided.)",
            "allOf" : [ {
              "$ref" : "#/components/schemas/CountryInfo"
            } ]
          },
          "translations" : {
            "description" : "Features all name translations and alternative names for requested address fields.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/TranslationsGeocode"
            } ]
          },
          "mapReferences" : {
            "description" : "Return the map references of the location objects.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/MapReferenceSection"
            } ]
          },
          "related" : {
            "type" : "array",
            "description" : "List of related objects",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/RelatedAddress"
              } ]
            }
          },
          "navigationAttributes" : {
            "description" : "Return requested additional attributes for segments in a road network if `showNavAttributes` parameter\nis specified with valid value and relevant data is available. The value is a comma-separated list\nof the sections to be enabled.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/NavigationAttributes"
            } ]
          },
          "secondaryUnitInfo" : {
            "type" : "array",
            "description" : "Secondary unit designator and unit value for each secondary unit recognized in the query in normalized country specific form (only returned if `show=secondaryUnitInfo` is provided.)",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/SecondaryUnitInfo"
              } ]
            }
          }
        }
      },
      "Address" : {
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "string",
            "description" : "Assembled address value built out of the address components according to the regional postal rules.\nThese are the same rules for all endpoints. It may not include all the input terms. For example:\n\"Schulstra√üe 4, 32547 Bad Oeynhausen, Germany\""
          },
          "countryCode" : {
            "type" : "string",
            "description" : "A three-letter country code. For example: \"DEU\""
          },
          "countryName" : {
            "type" : "string",
            "description" : "The localised country name. For example: \"Deutschland\""
          },
          "stateCode" : {
            "type" : "string",
            "description" : "A state code or state name abbreviation ‚Äì country specific. For example, in the United States it is the two letter state abbreviation: \"CA\" for California."
          },
          "state" : {
            "type" : "string",
            "description" : "The state division of a country. For example: \"North Rhine-Westphalia\""
          },
          "countyCode" : {
            "type" : "string",
            "description" : "A county code or county name abbreviation ‚Äì country specific. For example, for Italy it is the province abbreviation: \"RM\" for Rome."
          },
          "county" : {
            "type" : "string",
            "description" : "A division of a state; typically, a secondary-level administrative division of a country or equivalent."
          },
          "city" : {
            "type" : "string",
            "description" : "The name of the primary locality of the place. For example: \"Bad Oyenhausen\""
          },
          "district" : {
            "type" : "string",
            "description" : "A division of city; typically an administrative unit within a larger city or a customary name of a city's neighborhood. For example: \"Bad Oyenhausen\""
          },
          "subdistrict" : {
            "type" : "string",
            "description" : "A subdivision of a district. For example: \"Minden-L√ºbbecke\""
          },
          "street" : {
            "type" : "string",
            "description" : "Name of street. For example: \"Schulstrasse\""
          },
          "streets" : {
            "type" : "array",
            "description" : "Names of streets in case of intersection result. For example: [\"Friedrichstra√üe\",\"Unter den Linden\"]",
            "items" : {
              "type" : "string"
            }
          },
          "block" : {
            "type" : "string",
            "description" : "Name of block."
          },
          "subblock" : {
            "type" : "string",
            "description" : "Name of sub-block."
          },
          "postalCode" : {
            "type" : "string",
            "description" : "An alphanumeric string included in a postal address to facilitate mail sorting, such as post code, postcode, or ZIP code. For example: \"32547\""
          },
          "houseNumber" : {
            "type" : "string",
            "description" : "House number. For example: \"4\""
          },
          "building" : {
            "type" : "string",
            "description" : "Name of building."
          },
          "unit" : {
            "type" : "string",
            "description" : "Secondary unit information. It may include building, floor (level), and suite (unit) details. This field is returned by Geocode and Lookup endpoints only."
          }
        }
      },
      "PostalCodeDetails_JapanPost" : {
        "required" : [ "postalCode" ],
        "type" : "object",
        "properties" : {
          "postalCode" : {
            "type" : "string",
            "description" : "**ALPHA** 7-digit business postal code in `XXX-XXXX` format (separated by dash)"
          },
          "postalEntity" : {
            "type" : "string",
            "description" : "**ALPHA** The postal entity. This could be a governmental authority, a regulatory authority, or a designated postal operator.\n\nDescription of supported values:\n\n- **ALPHA** `Japan Post`: Field indicating the data source (fixed as `Japan Post` for Japan)",
            "enum" : [ "Japan Post" ]
          },
          "postalCodeType" : {
            "type" : "string",
            "description" : "**ALPHA** The postal code type.\n\nDescription of supported values:\n\n- **ALPHA** `ZIP`: Field describing the postal code type (fixed as `ZIP` for Japan)",
            "enum" : [ "ZIP" ]
          },
          "businessName" : {
            "type" : "string",
            "description" : "**ALPHA** Detailed information specifies company name, building name, floor number, etc. mapped to the corresponding business postal code"
          }
        }
      },
      "PostalCodeDetails_Usps_Zip" : {
        "required" : [ "postalCode" ],
        "type" : "object",
        "properties" : {
          "postalCode" : {
            "type" : "string",
            "description" : "The postal code."
          },
          "postalEntity" : {
            "type" : "string",
            "description" : "The postal entity. This could be a governmental authority, a regulatory authority, or a designated postal operator.\n\nDescription of supported values:\n\n- `USPS`: The USPS postal code system.",
            "enum" : [ "USPS" ]
          },
          "postalCodeType" : {
            "type" : "string",
            "description" : "The postal code type. Currently supported values: `ZIP` and `ZIP+4`\n\nDescription of supported values:\n\n- `ZIP`: A 5-digit code that identifies a specific geographic delivery area. ZIP codes can represent an area within a state, or a single building or company that has a very high mail volume.",
            "enum" : [ "ZIP" ]
          },
          "zipClassificationCode" : {
            "type" : "string",
            "description" : "The ZIP Classification Code.\n\nDescription of supported values:\n\n- `M`: Military ZIP code.\n- `P`: ZIP code having only Post Office boxes.\n- `U`: Unique ZIP code: A ZIP assigned to a company, agency, or entity with sufficient mail volume, based on average daily volume of letter-size pieces.",
            "enum" : [ "M", "P", "U" ]
          }
        }
      },
      "PostalCodeDetails_Usps_ZipPlus4" : {
        "required" : [ "postalCode" ],
        "type" : "object",
        "properties" : {
          "postalCode" : {
            "type" : "string",
            "description" : "The postal code."
          },
          "postalEntity" : {
            "type" : "string",
            "description" : "The postal entity. This could be a governmental authority, a regulatory authority, or a designated postal operator.\n\nDescription of supported values:\n\n- `USPS`: The USPS postal code system.",
            "enum" : [ "USPS" ]
          },
          "postalCodeType" : {
            "type" : "string",
            "description" : "The postal code type. Currently supported values: `ZIP` and `ZIP+4`\n\nDescription of supported values:\n\n- `ZIP+4`: Nine-digit code that identifies a small geographic delivery area that is serviceable by a single carrier; appears in the last line of the address on a mail piece.",
            "enum" : [ "ZIP+4" ]
          },
          "recordTypeCode" : {
            "type" : "string",
            "description" : "The USPS ZIP+4 Record Type Code.\n\nDescription of supported values:\n\n- `F`: Firm\n- `G`: General delivery\n- `H`: High-rise\n- `P`: PO Box\n- `R`: Rural route/contract\n- `S`: Street",
            "enum" : [ "F", "G", "H", "P", "R", "S" ]
          }
        }
      },
      "DisplayResponseCoordinate" : {
        "required" : [ "lat", "lng" ],
        "type" : "object",
        "properties" : {
          "lat" : {
            "type" : "number",
            "description" : "Latitude of the address. For example: `\"52.19404\"`",
            "format" : "double"
          },
          "lng" : {
            "type" : "number",
            "description" : "Longitude of the address. For example: `\"8.80135\"`",
            "format" : "double"
          }
        }
      },
      "BasicAccessPoint" : {
        "required" : [ "lat", "lng" ],
        "type" : "object",
        "properties" : {
          "lat" : {
            "type" : "number",
            "description" : "Latitude of the address. For example: `\"52.19404\"`",
            "format" : "double"
          },
          "lng" : {
            "type" : "number",
            "description" : "Longitude of the address. For example: `\"8.80135\"`",
            "format" : "double"
          }
        }
      },
      "MapView" : {
        "required" : [ "east", "north", "south", "west" ],
        "type" : "object",
        "properties" : {
          "west" : {
            "type" : "number",
            "description" : "Longitude of the western-side of the box. For example: \"8.80068\"",
            "format" : "double"
          },
          "south" : {
            "type" : "number",
            "description" : "Latitude of the southern-side of the box. For example: \"52.19333\"",
            "format" : "double"
          },
          "east" : {
            "type" : "number",
            "description" : "Longitude of the eastern-side of the box. For example: \"8.8167\"",
            "format" : "double"
          },
          "north" : {
            "type" : "number",
            "description" : "Latitude of the northern-side of the box. For example: \"52.19555\"",
            "format" : "double"
          }
        }
      },
      "Category" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Identifier number for an associated category. For example: \"900-9300-0000\""
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the place category in the result item language."
          },
          "primary" : {
            "type" : "boolean",
            "description" : "Whether or not it is a primary category. This field is visible only when the value is `true`."
          }
        }
      },
      "TimeZoneInfo" : {
        "required" : [ "name", "utcOffset" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the time zone as defined in the [tz database](https://en.wikipedia.org/wiki/Tz_database). For example: \"Europe/Berlin\""
          },
          "utcOffset" : {
            "type" : "string",
            "description" : "The UTC offset for this time zone at request time. For example \"+02:00\""
          }
        }
      },
      "Scoring" : {
        "type" : "object",
        "properties" : {
          "queryScore" : {
            "type" : "number",
            "description" : "Indicates how good the input matches the returned address. It is equal to 1 if all input tokens are recognized and matched.",
            "format" : "double"
          },
          "fieldScore" : {
            "description" : "Indicates how good the individual result fields match to the corresponding part of the query. Is\nincluded only for the result fields that are actually matched to the query.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/FieldScore"
            } ]
          }
        }
      },
      "FieldScore" : {
        "type" : "object",
        "properties" : {
          "country" : {
            "type" : "number",
            "description" : "Indicates how good the result country name or [ISO 3166-1 alpha-3] country code matches to the freeform or qualified input.",
            "format" : "double"
          },
          "countryCode" : {
            "type" : "number",
            "description" : "Indicates how good the result [ISO 3166-1 alpha-3] country code matches to the freeform or qualified input.",
            "format" : "double"
          },
          "state" : {
            "type" : "number",
            "description" : "Indicates how good the result state name matches to the freeform or qualified input.",
            "format" : "double"
          },
          "stateCode" : {
            "type" : "number",
            "description" : "Indicates how good the result state code matches to the freeform or qualified input.",
            "format" : "double"
          },
          "county" : {
            "type" : "number",
            "description" : "Indicates how good the result county name matches to the freeform or qualified input.",
            "format" : "double"
          },
          "countyCode" : {
            "type" : "number",
            "description" : "Indicates how good the result county code matches to the freeform or qualified input.",
            "format" : "double"
          },
          "city" : {
            "type" : "number",
            "description" : "Indicates how good the result city name matches to the freeform or qualified input.",
            "format" : "double"
          },
          "district" : {
            "type" : "number",
            "description" : "Indicates how good the result district name matches to the freeform or qualified input.",
            "format" : "double"
          },
          "subdistrict" : {
            "type" : "number",
            "description" : "Indicates how good the result sub-district name matches to the freeform or qualified input.",
            "format" : "double"
          },
          "streets" : {
            "type" : "array",
            "description" : "Indicates how good the result street names match to the freeform or qualified input. If the input\ncontains multiple street names, the field score is calculated and returned for each of them\nindividually.",
            "items" : {
              "type" : "number",
              "format" : "double"
            }
          },
          "block" : {
            "type" : "number",
            "description" : "Indicates how good the result block name matches to the freeform or qualified input.",
            "format" : "double"
          },
          "subblock" : {
            "type" : "number",
            "description" : "Indicates how good the result sub-block name matches to the freeform or qualified input.",
            "format" : "double"
          },
          "houseNumber" : {
            "type" : "number",
            "description" : "Indicates how good the result house number matches to the freeform or qualified input. It may\nhappen, that the house number, which one is looking for, is not yet in the map data. For such cases,\nthe Geocode endpoint returns the nearest known house number on the same street. This represents the\nnumeric difference between the requested and the returned house numbers.",
            "format" : "double"
          },
          "postalCode" : {
            "type" : "number",
            "description" : "Indicates how good the result postal code matches to the freeform or qualified input.",
            "format" : "double"
          },
          "building" : {
            "type" : "number",
            "description" : "Indicates how good the result building name matches to the freeform or qualified input.",
            "format" : "double"
          },
          "unit" : {
            "type" : "number",
            "description" : "Indicates whether a secondary unit (such as building, floor or suite) has been recognized in the freeform or qualified input.",
            "format" : "double"
          },
          "placeName" : {
            "type" : "number",
            "description" : "Indicates how good the result place name matches to the freeform or qualified input.",
            "format" : "double"
          },
          "ontologyName" : {
            "type" : "number",
            "description" : "Indicates how good the result ontology name matches to the freeform or qualified input.",
            "format" : "double"
          }
        }
      },
      "Parsing" : {
        "type" : "object",
        "properties" : {
          "placeName" : {
            "type" : "array",
            "description" : "Place name matches",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/MatchInfo"
              } ]
            }
          },
          "country" : {
            "type" : "array",
            "description" : "Country matches",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/MatchInfo"
              } ]
            }
          },
          "state" : {
            "type" : "array",
            "description" : "State matches",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/MatchInfo"
              } ]
            }
          },
          "county" : {
            "type" : "array",
            "description" : "County matches",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/MatchInfo"
              } ]
            }
          },
          "city" : {
            "type" : "array",
            "description" : "City matches",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/MatchInfo"
              } ]
            }
          },
          "district" : {
            "type" : "array",
            "description" : "District matches",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/MatchInfo"
              } ]
            }
          },
          "subdistrict" : {
            "type" : "array",
            "description" : "Subdistrict matches",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/MatchInfo"
              } ]
            }
          },
          "street" : {
            "type" : "array",
            "description" : "Street matches",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/MatchInfo"
              } ]
            }
          },
          "block" : {
            "type" : "array",
            "description" : "Block matches",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/MatchInfo"
              } ]
            }
          },
          "subblock" : {
            "type" : "array",
            "description" : "Subblock matches",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/MatchInfo"
              } ]
            }
          },
          "houseNumber" : {
            "type" : "array",
            "description" : "HouseNumber matches",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/MatchInfo"
              } ]
            }
          },
          "postalCode" : {
            "type" : "array",
            "description" : "PostalCode matches",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/MatchInfo"
              } ]
            }
          },
          "building" : {
            "type" : "array",
            "description" : "Building matches",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/MatchInfo"
              } ]
            }
          },
          "secondaryUnits" : {
            "type" : "array",
            "description" : "secondaryUnits matches",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/MatchInfo"
              } ]
            }
          },
          "ontologyName" : {
            "type" : "array",
            "description" : "Ontology name matches",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/MatchInfo"
              } ]
            }
          },
          "additionalInfo" : {
            "type" : "array",
            "description" : "Additional information extracted from the query that do not correspond to any recognized address components in the map data.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/MatchInfo"
              } ]
            }
          }
        }
      },
      "MatchInfo" : {
        "required" : [ "end", "start", "value" ],
        "type" : "object",
        "properties" : {
          "start" : {
            "type" : "integer",
            "description" : "First index of the matched range (0-based indexing, inclusive)",
            "format" : "int32"
          },
          "end" : {
            "type" : "integer",
            "description" : "One past the last index of the matched range (0-based indexing, exclusive); The difference between end and start gives the length of the term",
            "format" : "int32"
          },
          "value" : {
            "type" : "string",
            "description" : "Matched term in the input string"
          },
          "qq" : {
            "type" : "string",
            "description" : "The matched qualified query field type. If this is not returned, then matched value refers to the freetext query",
            "enum" : [ "city", "country", "county", "district", "houseNumber", "postalCode", "state", "street" ]
          }
        }
      },
      "StreetInfo" : {
        "type" : "object",
        "properties" : {
          "baseName" : {
            "type" : "string",
            "description" : "Base name part of the street name."
          },
          "streetType" : {
            "type" : "string",
            "description" : "Street type part of the street name."
          },
          "streetTypePrecedes" : {
            "type" : "boolean",
            "description" : "Defines if the street type is before or after the base name."
          },
          "streetTypeAttached" : {
            "type" : "boolean",
            "description" : "Defines if the street type is attached or unattached to the base name."
          },
          "prefix" : {
            "type" : "string",
            "description" : "A prefix is a directional identifier that precedes, but is not included in, the base name of a road."
          },
          "suffix" : {
            "type" : "string",
            "description" : "A suffix is a directional identifier that follows, but is not included in, the base name of a road."
          },
          "direction" : {
            "type" : "string",
            "description" : "Indicates the official directional identifiers assigned to highways, typically either \"North/South\" or \"East/West\""
          },
          "language" : {
            "type" : "string",
            "description" : "BCP 47 compliant language code"
          }
        }
      },
      "CountryInfo" : {
        "type" : "object",
        "properties" : {
          "alpha2" : {
            "type" : "string",
            "description" : "[ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code"
          },
          "alpha3" : {
            "type" : "string",
            "description" : "[ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country code"
          }
        }
      },
      "TranslationsGeocode" : {
        "type" : "object",
        "properties" : {
          "stateNames" : {
            "type" : "array",
            "description" : "The list of all state names and translations applicable to an address field, grouped by alternative views on it. For example, if subdivision of a country from administrative and postal views is different, some administrative levels may have two groups of names: from administrative and from postal views.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/AdminNames"
              } ]
            }
          },
          "countyNames" : {
            "type" : "array",
            "description" : "The list of all county names and translations applicable to an address field, grouped by alternative views on it. For example, if subdivision of a country from administrative and postal views is different, some administrative levels may have two groups of names: from administrative and from postal views.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/AdminNames"
              } ]
            }
          },
          "cityNames" : {
            "type" : "array",
            "description" : "The list of all city names and translations applicable to an address field, grouped by alternative views on it. For example, if subdivision of a country from administrative and postal views is different, some administrative levels may have two groups of names: from administrative and from postal views.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/AdminNames"
              } ]
            }
          },
          "districtNames" : {
            "type" : "array",
            "description" : "The list of all district names and translations applicable to an address field, grouped by alternative views on it. For example, if subdivision of a country from administrative and postal views is different, some administrative levels may have two groups of names: from administrative and from postal views.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/AdminNames"
              } ]
            }
          }
        }
      },
      "AdminNames" : {
        "required" : [ "names" ],
        "type" : "object",
        "properties" : {
          "names" : {
            "type" : "array",
            "description" : "The list of all values for a name. Those might be for different languages or different name types.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Name"
              } ]
            }
          },
          "preference" : {
            "type" : "string",
            "description" : "The preference of the view on an address field expressed by this group of names.\n\nDescription of supported values:\n\n- `alternative`: Alternative view on this address field. Names of this group are exposed in the result only if matching to the query so that the end-user can better recognize the result.\n- `primary`: The default or only view on this address filed. These are the names which are exposed in the result by default.",
            "enum" : [ "alternative", "primary" ]
          }
        }
      },
      "Name" : {
        "required" : [ "type", "value" ],
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "description" : "The text value of this name."
          },
          "language" : {
            "type" : "string",
            "description" : "The [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) language code."
          },
          "type" : {
            "type" : "string",
            "description" : "The type of this name.\n\nDescription of supported values:\n\n- `abbreviation`: Abbreviation is a shortened form of the official name.  For example, \"CA\" for \"California\". Abbreviation may also be an area code.\n- `areaCode`: Area code is a code representation of an admin. For example for countries this can be an ISO-3 or ISO-2 Code: \"USA\", \"US\" for \"United States\".\n- `baseName`: Base name represents the official name in one of the country official languages. For example, \"Frankfurt am Main\".\n- `exonym`: Exonym is a translation of the official name to a language that is not one of the country official languages. For example \"Francfort-sur-le-Main\" for \"Frankfurt am Main\".\n- `shortened`: A shortened variant of a long name where optional parts are omitted. For example, \"Bad Soden\" for \"Bad Soden am Taunus\".\n- `synonym`: A synonym is an additional commonly used name that is different than the official name, in the same language as the official name. For example, \"Frankfurt\" for \"Frankfurt am Main\".",
            "enum" : [ "abbreviation", "areaCode", "baseName", "exonym", "shortened", "synonym" ]
          },
          "primary" : {
            "type" : "boolean",
            "description" : "Flag indicating whether it is a primary name. This is the name which is exposed in the result by default. This field is visible only when the value is `true`."
          },
          "transliterated" : {
            "type" : "boolean",
            "description" : "Flag indicating whether the name is transliterated. Additional transliterated form of the name is included for all non-Latin-1 names. This field is visible only when the value is `true`."
          }
        }
      },
      "MapReferenceSection" : {
        "type" : "object",
        "properties" : {
          "links" : {
            "type" : "array",
            "description" : "An identifier for link and the side of link the attribute is applicable to",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/LinkInfoSection"
              } ]
            }
          },
          "pointAddress" : {
            "description" : "The section containing the point address reference",
            "allOf" : [ {
              "$ref" : "#/components/schemas/PointAddressSection"
            } ]
          },
          "segments" : {
            "type" : "array",
            "description" : "The section containing the segment references",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Segment"
              } ]
            }
          },
          "country" : {
            "description" : "country ID in HERE Map Content",
            "allOf" : [ {
              "$ref" : "#/components/schemas/AdminIdSection"
            } ]
          },
          "state" : {
            "description" : "state ID in HERE Map Content",
            "allOf" : [ {
              "$ref" : "#/components/schemas/AdminIdSection"
            } ]
          },
          "county" : {
            "description" : "county ID in HERE Map Content",
            "allOf" : [ {
              "$ref" : "#/components/schemas/AdminIdSection"
            } ]
          },
          "city" : {
            "description" : "city ID in HERE Map Content",
            "allOf" : [ {
              "$ref" : "#/components/schemas/AdminIdSection"
            } ]
          },
          "district" : {
            "description" : "district ID in HERE Map Content",
            "allOf" : [ {
              "$ref" : "#/components/schemas/AdminIdSection"
            } ]
          },
          "subdistrict" : {
            "description" : "subdistrict ID in HERE Map Content",
            "allOf" : [ {
              "$ref" : "#/components/schemas/AdminIdSection"
            } ]
          },
          "cmVersion" : {
            "description" : "cmVerison info in HERE Map Content",
            "allOf" : [ {
              "$ref" : "#/components/schemas/CmVersionSection"
            } ]
          }
        }
      },
      "LinkInfoSection" : {
        "required" : [ "cmId", "side" ],
        "type" : "object",
        "properties" : {
          "cmId" : {
            "type" : "string",
            "description" : "link ID in HERE core map"
          },
          "side" : {
            "type" : "string",
            "description" : "The side of the link the attribute is applicable to\n\n- for `resultType=houseNumber` and `resultType=place`: side of the entity to the link\n- for `resultType=street`:\n  - on endpoints *Geocode* and *Lookup*: side of the entity to the link, it is always \"both\"\n  - on endpoints *Reverse Geocode* and *Multi-Reverse Geocode*: relative side from input to the link\n"
          }
        }
      },
      "PointAddressSection" : {
        "required" : [ "hmcId" ],
        "type" : "object",
        "properties" : {
          "hmcId" : {
            "type" : "string",
            "description" : "The point address ID in HERE Map Content"
          },
          "partitionId" : {
            "type" : "string",
            "description" : "**ALPHA** Unique identifier that references a specific subset of geo-location related layers\n(e.g., address, location, street, or place) in the HERE Map Content"
          }
        }
      },
      "Segment" : {
        "type" : "object",
        "properties" : {
          "ref" : {
            "type" : "string",
            "description" : "The segment reference follows the format `{segmentId}(#{offset})?`,\nrepresenting its relative position from the result location to a segment."
          },
          "side" : {
            "type" : "string",
            "description" : "The side of the link the attribute is applicable to\n\n- for `resultType=houseNumber` and `resultType=place`: side of the entity to the link\n- for `resultType=street`:\n  - on endpoints *Geocode* and *Lookup*: side of the entity to the link, it is always \"both\"\n  - on endpoints *Reverse Geocode* and *Multi-Reverse Geocode*: relative side from input to the link\n"
          }
        }
      },
      "AdminIdSection" : {
        "required" : [ "hmcId" ],
        "type" : "object",
        "properties" : {
          "hmcId" : {
            "type" : "string",
            "description" : "Admin ID in HERE Map Content"
          },
          "partitionId" : {
            "type" : "string",
            "description" : "**ALPHA** Unique identifier that references a specific subset of geo-location related layers\n(e.g., address, location, street, or place) in the HERE Map Content"
          }
        }
      },
      "CmVersionSection" : {
        "required" : [ "dvn", "region" ],
        "type" : "object",
        "properties" : {
          "region" : {
            "type" : "string",
            "description" : "Region ID"
          },
          "dvn" : {
            "type" : "string",
            "description" : "Map version details (DVN) containing the base line for the map schema and an identifier for the weekly or quarterly update.\n\n- Format: YYQ<weekly/quaterly update>\n  - Example: 23150 (map schema: Q1/2023, weekly update 50)\n"
          }
        }
      },
      "RelatedAddress" : {
        "required" : [ "id", "relationship" ],
        "type" : "object",
        "properties" : {
          "relationship" : {
            "type" : "string",
            "description" : "\n\nDescription of supported values:\n\n- **RESTRICTED** `MPA`: Micro Point Addresses related to a result items with\n  `resultType` = `houseNumber` and `houseNumberType` = `PA`;\n  for example, buildings, floors (levels) or suites (units)\n  associated to this address. This type of relationship is\n  only returned by Lookup endpoint or Geocode endpoint\n  when `with=MPA` parameter is provided.\n- `intersection`: The Intersections nearest to the address. This type of relationship is\n  only returned by Reverse Geocode, Geocode or Multi-Reverse Geocode\n  endpoints when `showRelated=intersections` parameter is provided.\n- `nearbyAddress`: Nearby address on the same street of main result. This type of\n  relationship is only returned by Reverse Geocode endpoint or\n  Multi-Reverse Geocode endpoint when `showRelated=nearbyAddress`\n  parameter is provided.\n- **RESTRICTED** `parentPA`: The Point Address to which the Micro Point Address\n  belongs; for example the house number to which this\n  suite is associated. This type of relationship is only\n  returned by Lookup endpoint or Geocode endpoint when\n  `with=MPA` parameter is provided.",
            "enum" : [ "MPA", "intersection", "nearbyAddress", "parentPA" ]
          },
          "title" : {
            "type" : "string",
            "description" : "The localized display name of this related entity."
          },
          "id" : {
            "type" : "string",
            "description" : "The ID of the related entity."
          },
          "resultType" : {
            "type" : "string",
            "description" : "The resultType of the related entity.",
            "enum" : [ "addressBlock", "administrativeArea", "houseNumber", "intersection", "locality", "place", "postalCodePoint", "street" ]
          },
          "houseNumberType" : {
            "type" : "string",
            "description" : "The houseNumberType of the related entity.\n\nDescription of supported values:\n\n- **RESTRICTED** `MPA`: A Micro Point Address represents a secondary address for a Point\n  Address; for example, building, floor (level) and suite (unit).\n  Micro Point Addresses can be used to enhance Point Address with\n  greater address detail and higher coordinate accuracy. This result\n  type is only returned by Lookup endpoint or Geocode endpoint when\n  `with=MPA` parameter is provided.\n- `PA`: A Point Address represents an individual address as a point object.\n  Point Addresses are coming from trusted sources. We can say with\n  high certainty that the address exists and at what position. A\n  Point Address result contains two types of coordinates. One is the\n  access point (or navigation coordinates), which is the point to\n  start or end a drive. The other point is the position or display\n  point. This point varies per source and country. The point can be\n  the rooftop point, a point close to the building entry, or a point\n  close to the building, driveway or parking lot that belongs to the\n  building.\n- `interpolated`: An interpolated address. These are approximate positions as a\n  result of a linear interpolation based on address ranges. Address\n  ranges, especially in the USA, are typical per block. For\n  interpolated addresses, we cannot say with confidence that the\n  address exists in reality. But the interpolation provides a good\n  location approximation that brings people in most use cases close\n  to the target location. The access point of an interpolated address\n  result is calculated based on the address range and the road\n  geometry. The position (display) point is pre-configured offset\n  from the street geometry. Compared to Point Addresses, interpolated\n  addresses are less accurate.",
            "enum" : [ "MPA", "PA", "interpolated" ]
          },
          "address" : {
            "description" : "The address of the related entity. The fields are only rendered, if they differ from the main result item.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/RelatedResultAddress"
            } ]
          },
          "position" : {
            "description" : "The coordinates (latitude, longitude) of a pin on a map corresponding to the searched place.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/DisplayResponseCoordinate"
            } ]
          },
          "access" : {
            "type" : "array",
            "description" : "Coordinates of the response item on a HERE map navigable link (for example, for driving or walking).",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/BasicAccessPoint"
              } ]
            }
          },
          "distance" : {
            "type" : "integer",
            "description" : "The distance \"as the crow flies\" from the search center to this related address' position in meters.\nIt is only returned by Reverse Geocode endpoint or Multi-Reverse Geocode endpoint.",
            "format" : "int64"
          },
          "routeDistance" : {
            "type" : "integer",
            "description" : "The distance from routing position of the nearby address to the street result, the distance is\ncalculated based on the underlying road geometry. It is only returned by Reverse Geocode endpoint or\nMulti-Reverse Geocode endpoint.",
            "format" : "int64"
          },
          "bearing" : {
            "type" : "integer",
            "description" : "Bearing (measured clockwise from true north) from the projected coordinate on the street to the\ndisplay position of the related location. True clockwise degree, 0 is north. It is only returned by\nReverse Geocode endpoint or Multi-Reverse Geocode endpoint.",
            "format" : "int32"
          },
          "mapView" : {
            "description" : "The bounding box enclosing the geometric shape (area or line) that the related address covers. It is\n only returned by Reverse Geocode endpoint or Multi-Reverse Geocode endpoint.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/MapView"
            } ]
          },
          "mapReferences" : {
            "description" : "Return the map references of the location objects. It is only returned by Reverse Geocode endpoint\nor Multi-Reverse Geocode endpoint.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/MapReferenceSection"
            } ]
          }
        }
      },
      "RelatedResultAddress" : {
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "string",
            "description" : "Assembled address value built out of the address components according to the regional postal rules.\nThese are the same rules for all endpoints. It may not include all the input terms."
          },
          "countryCode" : {
            "type" : "string",
            "description" : "A three-letter country code. For example: \"DEU\""
          },
          "countryName" : {
            "type" : "string",
            "description" : "The localised country name. For example: \"Deutschland\""
          },
          "stateCode" : {
            "type" : "string",
            "description" : "A state code or state name abbreviation ‚Äì country specific. For example, in the United States it is the two letter state abbreviation: \"CA\" for California."
          },
          "state" : {
            "type" : "string",
            "description" : "The state division of a country. For example: \"North Rhine-Westphalia\""
          },
          "countyCode" : {
            "type" : "string",
            "description" : "A county code or county name abbreviation ‚Äì country specific. For example, for Italy it is the province abbreviation: \"RM\" for Rome."
          },
          "county" : {
            "type" : "string",
            "description" : "A division of a state; typically, a secondary-level administrative division of a country or equivalent."
          },
          "city" : {
            "type" : "string",
            "description" : "The name of the primary locality of the place. For example: \"Bad Oyenhausen\""
          },
          "district" : {
            "type" : "string",
            "description" : "A division of city; typically an administrative unit within a larger city or a customary name of a city's neighborhood. For example: \"Bad Oyenhausen\""
          },
          "subdistrict" : {
            "type" : "string",
            "description" : "A subdivision of a district. For example: \"Minden-L√ºbbecke\""
          },
          "street" : {
            "type" : "string",
            "description" : "Name of street. For example: \"Schulstrasse\""
          },
          "streets" : {
            "type" : "array",
            "description" : "Names of streets in case of intersection result. For example: [\"Friedrichstra√üe\",\"Unter den Linden\"]",
            "items" : {
              "type" : "string"
            }
          },
          "block" : {
            "type" : "string",
            "description" : "Name of block."
          },
          "subblock" : {
            "type" : "string",
            "description" : "Name of sub-block."
          },
          "postalCode" : {
            "type" : "string",
            "description" : "An alphanumeric string included in a postal address to facilitate mail sorting, such as post code, postcode, or ZIP code. For example: \"32547\""
          },
          "houseNumber" : {
            "type" : "string",
            "description" : "House number. For example: \"4\""
          },
          "building" : {
            "type" : "string",
            "description" : "Name of building."
          },
          "unit" : {
            "type" : "string",
            "description" : "defining a Micro Point Address. Combines unit name (suite, flat, etc.), level name (floor) and\nbuilding unit name for a Micro Point Address"
          }
        }
      },
      "NavigationAttributes" : {
        "type" : "object",
        "properties" : {
          "speedLimits" : {
            "type" : "array",
            "description" : "Speed limit for the navigable road following the direction of traffic on the street. If traffic is allowed in both directions\ntwo value sets will be returned. If the request contained a bearing parameter, then the first entry will match the returned\ndirection.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/SpeedLimit"
              } ]
            }
          },
          "functionalClass" : {
            "type" : "array",
            "description" : "The value represents one of the five levels:",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/FunctionalClass"
              } ]
            }
          },
          "access" : {
            "type" : "array",
            "description" : "The following boolean values are available for access attributes:",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Access"
              } ]
            }
          },
          "physical" : {
            "type" : "array",
            "description" : "The following boolean values are available for physical attributes:",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Physical"
              } ]
            }
          }
        }
      },
      "SpeedLimit" : {
        "required" : [ "maxSpeed", "speedUnit" ],
        "type" : "object",
        "properties" : {
          "maxSpeed" : {
            "type" : "integer",
            "description" : "Used in combination with speed limit unit to indicate allowable speed limit at a location, for unlimited speed, the value is \"999\"",
            "format" : "int32"
          },
          "direction" : {
            "type" : "string",
            "description" : "Rendered in compass value, which is N, S, E, W, NE, SE, NW, SW",
            "enum" : [ "E", "N", "NE", "NW", "S", "SE", "SW", "W" ]
          },
          "speedUnit" : {
            "type" : "string",
            "description" : "Country defined speed unit",
            "enum" : [ "kph", "mph" ]
          },
          "source" : {
            "type" : "string",
            "description" : "A generalised identification of the source of `Speed Limit` information.\n\nDescription of supported values:\n\n- `derived`: Based on administrative regulations, for example: highway exit/entry ramps that do not have posted speed limits.\n- `posted`: Based on a posted speed limit sign, speed limit information painted on the road, or data obtained from official sources.",
            "enum" : [ "derived", "posted" ]
          }
        }
      },
      "FunctionalClass" : {
        "required" : [ "value" ],
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "description" : "\n\nDescription of supported values:\n\n- `1`: allowing for high volume, maximum speed traffic movement\n- `2`: allowing for high volume, high speed traffic movement\n- `3`: providing a high volume of traffic movement\n- `4`: providing for a high volume of traffic movement at moderate speeds between neighbourhoods\n- `5`: roads whose volume and traffic movement are below the level of any functional class",
            "enum" : [ "1", "2", "3", "4", "5" ]
          }
        }
      },
      "Access" : {
        "type" : "object",
        "properties" : {
          "automobiles" : {
            "type" : "boolean",
            "description" : "Applicable to automobiles.\n\n- `true`: The road allows automobiles.\n- `false`: The road doesn't allow automobiles.\n"
          },
          "bicycles" : {
            "type" : "boolean",
            "description" : "Applicable to bicycles.\n\n- `true`: The road allows bicycles.\n- `false`: The road doesn't allow bicycles.\n"
          },
          "buses" : {
            "type" : "boolean",
            "description" : "Applicable to buses.\n\n- `true`: The road allows buses.\n- `false`: The road doesn't allow buses.\n"
          },
          "carpools" : {
            "type" : "boolean",
            "description" : "Applicable to carpools.\n\n- `true`: The road allows carpooling.\n- `false`: The road doesn't allow carpooling.\n"
          },
          "deliveries" : {
            "type" : "boolean",
            "description" : "Applicable to deliveries.\n\n- `true`: The road allows deliveries.\n- `false`: The road doesn't allow deliveries.\n"
          },
          "emergencyVehicles" : {
            "type" : "boolean",
            "description" : "Applicable to emergency vehicles.\n\n- `true`: The road allows emergency vehicles.\n- `false`: The road doesn't allow emergency vehicles.\n"
          },
          "motorcycles" : {
            "type" : "boolean",
            "description" : "Applicable to motorcycles.\n\n- `true`: The road allows motorcycles.\n- `false`: The road doesn't allow motorcycles.\n"
          },
          "pedestrians" : {
            "type" : "boolean",
            "description" : "Applicable to pedestrians.\n\n- `true`: The road allows pedestrians.\n- `false`: The road doesn't allow pedestrians.\n"
          },
          "taxis" : {
            "type" : "boolean",
            "description" : "Applicable to taxis.\n\n- `true`: The road allows taxis.\n- `false`: The road doesn't allow taxis.\n"
          },
          "throughTraffic" : {
            "type" : "boolean",
            "description" : "Applicable to through traffic.\n\n- `true`: The road allows through traffic.\n- `false`: The road doesn't allow through traffic.\n"
          },
          "trucks" : {
            "type" : "boolean",
            "description" : "Applicable to trucks.\n\n- `true`: The road allows trucks.\n- `false`: The road doesn't allow trucks.\n"
          }
        }
      },
      "Physical" : {
        "type" : "object",
        "properties" : {
          "boatFerry" : {
            "type" : "boolean",
            "description" : "The segment represents a generalised route of a boat ferry for passengers or vehicles over water,\nincluding routes to pedestrian only islands, tourist areas, commuter ferry routes open to only pedestrians, etc.\n\n- `true`: The road is a boat ferry.\n- `false`: The road isn't a boat ferry."
          },
          "bridge" : {
            "type" : "boolean",
            "description" : "Identifies a structure that allows a road, railway, or walkway to pass over another road,\nrailway, waterway, or valley serving map display and route guidance functionalities.\n\n- `true`: The road is a bridge.\n- `false`: The road isn't a bridge."
          },
          "deliveryRoad" : {
            "type" : "boolean",
            "description" : "Indication of a delivery road.\n\n- `true`: The physical characteristic of the road is that it functions as a delivery road.\n- `false`: The physical characteristic of the road is that it doesn't function as a delivery road."
          },
          "movableBridge" : {
            "type" : "boolean",
            "description" : "Movable Bridge indicates a bridge that moves to allow passage (usually) for boats or barges.\n\n- `true`: The road is a movable bridge.\n- `false`: The road isn't a movable bridge.\n"
          },
          "multiplyDigitized" : {
            "type" : "boolean",
            "description" : "Multiply Digitised identifies separately digitised roads, i.e., roads that are digitised with one line per\ndirection of traffic instead of one line per road.\n\n- `true`: The physical characteristic of the road is that it functions as multiplyDigitized.\n- `false`: The physical characteristic of the road is that it doesn't function as multiplyDigitized."
          },
          "paved" : {
            "type" : "boolean",
            "description" : "Indicates whether the navigable segment is paved.\n\n- `true`: The physical characteristic of the road is paved.\n- `false`: The physical characteristic of the road isn't paved."
          },
          "private" : {
            "type" : "boolean",
            "description" : "Private identifies roads that are not maintained by an organisation responsible for maintenance of\npublic roads.\n\n- `true`: The road is private..\n- `false`: The road isn't private."
          },
          "railFerry" : {
            "type" : "boolean",
            "description" : "The segment represents a generalised route of a ferry for passengers or vehicles via rail.\n\n- `true`: The road is a rail flerry.\n- `false`: The road isn't a rail flerry.\n"
          },
          "tunnel" : {
            "type" : "boolean",
            "description" : "Identifies an enclosed (on all sides) passageway through or under an obstruction.\n\n- `true`: The road is a tunnel.\n- `false`: The road isn't a tunnel.\n"
          }
        }
      },
      "SecondaryUnitInfo" : {
        "required" : [ "normalizedUnitType", "unitValue" ],
        "type" : "object",
        "properties" : {
          "normalizedUnitType" : {
            "type" : "string",
            "description" : "The secondary unit designator is provided in a normalized, country-specific format. If the secondary unit designator is omitted or unrecognized, it is returned as \"unknown\"."
          },
          "unitValue" : {
            "type" : "string",
            "description" : "The unit value in normalized form. It may be empty when secondary unit designator has no unit value, for example \"Basement\"."
          }
        }
      },
      "ErrorResponse" : {
        "required" : [ "correlationId", "requestId", "status", "title" ],
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "integer",
            "description" : "The HTTP status code",
            "format" : "int32"
          },
          "title" : {
            "type" : "string",
            "description" : "Human-readable error description"
          },
          "code" : {
            "type" : "string",
            "description" : "Error code"
          },
          "cause" : {
            "type" : "string",
            "description" : "Human-readable explanation for the error"
          },
          "action" : {
            "type" : "string",
            "description" : "Human-readable action for the user"
          },
          "correlationId" : {
            "type" : "string",
            "description" : "Auto-generated ID univocally identifying this request"
          },
          "requestId" : {
            "type" : "string",
            "description" : "Request identifier provided by the user"
          }
        }
      },
      "OpenSearchSearchResponse" : {
        "required" : [ "items" ],
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "description" : "If the `offset` request parameter is not set, `items` contains a *full list* of JSON objects with a payload relevant to the request.\nThe ranking order is from most to least relevant and is based on the matched location criteria.\n\nIf the `offset` request parameter is set, `items` contains a contiguous subset of objects from the *full list* described before: A page of `<count>` objects at a certain `<offset>` value from the beginning of the *full list*.\n",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/OneboxSearchResultItem"
              } ]
            }
          },
          "offset" : {
            "type" : "integer",
            "description" : "**ALPHA** The `offset` value from the full list from which the page is taken.\n\nThis is expected to reflect the `offset` request parameter value\n",
            "format" : "int32"
          },
          "nextOffset" : {
            "type" : "integer",
            "description" : "**ALPHA** The `offset` value of the next page. This element is omitted on the last page.\n\nThis response element is only set when in pagination mode (when the query parameter `offset` is set).\n",
            "format" : "int32"
          },
          "count" : {
            "type" : "integer",
            "description" : "**ALPHA** The actual page size: The number of objects returned in the `items` array.\n\nThis response element is only set when in pagination mode (when the query parameter `offset` is set).\n",
            "format" : "int32"
          },
          "limit" : {
            "type" : "integer",
            "description" : "**ALPHA** Maximum number of objects in `items` as specified in request.\n\nThis response element is only set when in pagination mode (when the query parameter `offset` is set).\n",
            "format" : "int32"
          }
        }
      },
      "OneboxSearchResultItem" : {
        "required" : [ "address", "id", "title" ],
        "type" : "object",
        "properties" : {
          "title" : {
            "type" : "string",
            "description" : "The localized display name of this result item."
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the result item. This ID can be used for a Look Up by ID search as well."
          },
          "politicalView" : {
            "type" : "string",
            "description" : "ISO3 country code of the item political view (default for international). This response element is populated when the politicalView parameter is set in the query"
          },
          "ontologyId" : {
            "type" : "string",
            "description" : "Related ontology ID"
          },
          "resultType" : {
            "type" : "string",
            "enum" : [ "addressBlock", "administrativeArea", "houseNumber", "intersection", "locality", "place", "postalCodePoint", "street" ]
          },
          "houseNumberType" : {
            "type" : "string",
            "description" : "\n\nDescription of supported values:\n\n- **RESTRICTED** `MPA`: A Micro Point Address represents a secondary address for a Point\n  Address; for example, building, floor (level) and suite (unit).\n  Micro Point Addresses can be used to enhance Point Address with\n  greater address detail and higher coordinate accuracy. This result\n  type is only returned by Lookup endpoint or Geocode endpoint when\n  `with=MPA` parameter is provided.\n- `PA`: A Point Address represents an individual address as a point object.\n  Point Addresses are coming from trusted sources. We can say with\n  high certainty that the address exists and at what position. A\n  Point Address result contains two types of coordinates. One is the\n  access point (or navigation coordinates), which is the point to\n  start or end a drive. The other point is the position or display\n  point. This point varies per source and country. The point can be\n  the rooftop point, a point close to the building entry, or a point\n  close to the building, driveway or parking lot that belongs to the\n  building.\n- `interpolated`: An interpolated address. These are approximate positions as a\n  result of a linear interpolation based on address ranges. Address\n  ranges, especially in the USA, are typical per block. For\n  interpolated addresses, we cannot say with confidence that the\n  address exists in reality. But the interpolation provides a good\n  location approximation that brings people in most use cases close\n  to the target location. The access point of an interpolated address\n  result is calculated based on the address range and the road\n  geometry. The position (display) point is pre-configured offset\n  from the street geometry. Compared to Point Addresses, interpolated\n  addresses are less accurate.",
            "enum" : [ "MPA", "PA", "interpolated" ]
          },
          "addressBlockType" : {
            "type" : "string",
            "enum" : [ "block", "subblock" ]
          },
          "localityType" : {
            "type" : "string",
            "enum" : [ "city", "district", "postalCode", "subdistrict" ]
          },
          "administrativeAreaType" : {
            "type" : "string",
            "enum" : [ "country", "county", "state" ]
          },
          "address" : {
            "description" : "Postal address of the result item.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Address"
            } ]
          },
          "position" : {
            "description" : "The coordinates (latitude, longitude) of a pin on a map corresponding to the searched place.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/DisplayResponseCoordinate"
            } ]
          },
          "access" : {
            "type" : "array",
            "description" : "Coordinates of the response item on a HERE map navigable link (for example, for driving or walking).\n\nWhen a response item is of type `\"place\"`, it can contain more than one access object.\nEach access object contains a position (`lat`, `lng`), with potentially a type (field `type`),\na textual label (field `label`) and a `primary` boolean field set to true for the main access to the place.\n\nThe first object in the `access` array is the primary access to the place.\n\nResponse items of other types than `\"place\"` have a maximum of one access position.\n",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/ExtendedAccessPoint"
              } ]
            }
          },
          "driveThrough" : {
            "type" : "boolean",
            "description" : "Set to `true` if the related business allows customers to purchase products \n(or use the service provided by the business) without leaving their cars."
          },
          "distance" : {
            "type" : "integer",
            "description" : "The distance \"as the crow flies\" from the search center to this result item in meters. For example: \"172039\".\n\nWhen searching along a route this is the distance along the route plus the distance from the route polyline to this result item.",
            "format" : "int64",
            "example" : 172039
          },
          "excursionDistance" : {
            "type" : "integer",
            "description" : "Two times the distance from the polyline to this result item in meters while searching along the route",
            "format" : "int64"
          },
          "mapView" : {
            "description" : "The bounding box enclosing the geometric shape (area or line) that an individual result covers. `place` typed results have no `mapView`.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/MapView"
            } ]
          },
          "categories" : {
            "type" : "array",
            "description" : "The list of categories assigned to this place.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Category"
              } ]
            }
          },
          "chains" : {
            "type" : "array",
            "description" : "The list of chains assigned to this place.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Chain"
              } ]
            }
          },
          "references" : {
            "type" : "array",
            "description" : "The list of supplier references available for this place.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/SupplierReference"
              } ]
            }
          },
          "foodTypes" : {
            "type" : "array",
            "description" : "The list of food types assigned to this place.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Category"
              } ]
            }
          },
          "houseNumberFallback" : {
            "type" : "boolean",
            "description" : "If true, indicates that the requested house number was corrected to match the nearest known house number. This field is visible only when the value is true."
          },
          "contacts" : {
            "type" : "array",
            "description" : "Contact information like phone, email, WWW.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/ContactInformation"
              } ]
            }
          },
          "openingHours" : {
            "type" : "array",
            "description" : "A list of hours during which the place is open for business.\nThis field is optional: When it is not present, it means that we are lacking data about the place opening hours.\nDays without opening hours have to be considered as closed.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/OpeningHours"
              } ]
            }
          },
          "timeZone" : {
            "description" : "Provides time zone information for this place. (rendered only if `show=tz` is provided.)",
            "allOf" : [ {
              "$ref" : "#/components/schemas/TimeZoneInfo"
            } ]
          },
          "extended" : {
            "description" : "Extended attributes section to contain detailed information for specific result types.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/ExtendedAttribute"
            } ]
          },
          "phonemes" : {
            "description" : "Phonemes for address and place names. (rendered only if `show=phonemes` is provided.)",
            "allOf" : [ {
              "$ref" : "#/components/schemas/PhonemesSection"
            } ]
          },
          "media" : {
            "description" : "**BETA, RESTRICTED** A set of rich media types aggregated from multiple sources. When the current place has no ratings, description or images, this element is not present.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Media"
            } ]
          },
          "streetInfo" : {
            "type" : "array",
            "description" : "Street Details (only rendered if `show=streetInfo` is provided.)",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/StreetInfo"
              } ]
            }
          },
          "accessRestrictions" : {
            "type" : "array",
            "description" : "A list of access restrictions related to a `place` result item.\n\nA place response item has a restricted access when the place is not publicly accessible without a specific authorization, membership or customer relationship.\nExamples: the place is for customers or visitors only.\n\nThis field is optional: When it is not present, it means that the place response item has no known access restriction.",
            "example" : [ {
              "categories" : [ {
                "id" : "800-8500-0177"
              } ],
              "restricted" : true
            } ],
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/AccessRestrictionAttributes"
              } ]
            }
          }
        }
      },
      "ExtendedAccessPoint" : {
        "required" : [ "lat", "lng" ],
        "type" : "object",
        "properties" : {
          "lat" : {
            "type" : "number",
            "description" : "Latitude of the access position. For example: `\"52.19404\"`",
            "format" : "double"
          },
          "lng" : {
            "type" : "number",
            "description" : "Longitude of the access position. For example: `\"8.80135\"`",
            "format" : "double"
          },
          "primary" : {
            "type" : "boolean",
            "description" : "Only applies to response items of type `\"place\"`. Set to true for the primary access position when the place\nresult has more than one `access` position.\nOnly the first element in the access array can have a primary field set to `true`.\n"
          },
          "type" : {
            "type" : "string",
            "description" : "Only applies to response items of type `\"place\"`\n\nDescription of supported values:\n\n- `delivery`: A designated access position for receiving goods and services, typically used by delivery personnel.\n- `emergency`: A position specifically designated for emergency access or services,\n  such as ambulance or fire vehicle entry points.\n- `entrance`: A designated access position for larger or complex places, such as shopping malls or sports centers,\n  where multiple entrances are located around the perimeter of the place. Each entrance provides a specific\n  point of entry for visitors.\n- `loading`: An access position to a designated area for the loading and unloading of goods, typically used by delivery and service vehicles.\n- `other`: An access type that does not fit into predefined categories, used for unique or less common situations.\n- `parking`: An access position to a designated private area for vehicle parking, associated with the place.\n- `taxi`: A position specifically designated for taxi/ride-share pick-up and drop-off services.",
            "enum" : [ "delivery", "emergency", "entrance", "loading", "other", "parking", "taxi" ]
          },
          "label" : {
            "type" : "string",
            "description" : "Only applies to response items of type `\"place\"`. The value is a short textual description of the access point. Example: \"North Entrance\""
          }
        }
      },
      "Chain" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Identifier number for an associated chain. For example: `\"1396\"`"
          },
          "name" : {
            "type" : "string",
            "description" : "\nName of the chain in the result item language. If the script is not available, fallback to latin.\nFor example: `\"STARBUCKS\"` is returned for the Greek language, while `\"ÿ≥ÿ™ÿßÿ±ÿ®ŸÉÿ≥\"` is returned for the arabic language.\n"
          }
        }
      },
      "SupplierReference" : {
        "required" : [ "id", "supplier" ],
        "type" : "object",
        "properties" : {
          "supplier" : {
            "description" : "Information about the supplier of this reference.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/ReferenceSupplier"
            } ]
          },
          "id" : {
            "type" : "string",
            "description" : "Identifier of the place as provided by the supplier."
          }
        }
      },
      "ReferenceSupplier" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "An identifier for the supplier.",
            "enum" : [ "booking.com", "core", "nsr", "parkopedia", "ryd", "tripadvisor", "venues", "vinfast", "yelp" ]
          }
        }
      },
      "ContactInformation" : {
        "type" : "object",
        "properties" : {
          "phone" : {
            "type" : "array",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Contact"
              } ]
            }
          },
          "mobile" : {
            "type" : "array",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Contact"
              } ]
            }
          },
          "tollFree" : {
            "type" : "array",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Contact"
              } ]
            }
          },
          "fax" : {
            "type" : "array",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Contact"
              } ]
            }
          },
          "www" : {
            "type" : "array",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Contact"
              } ]
            }
          },
          "email" : {
            "type" : "array",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Contact"
              } ]
            }
          }
        }
      },
      "Contact" : {
        "required" : [ "value" ],
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "string",
            "description" : "Optional label for the contact string, such as \"Customer Service\" or \"Pharmacy Fax\"."
          },
          "value" : {
            "type" : "string",
            "description" : "Contact information, as specified by the contact type."
          },
          "categories" : {
            "type" : "array",
            "description" : "The list of place categories this contact refers to.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/CategoryRef"
              } ]
            }
          }
        }
      },
      "CategoryRef" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Identifier number for an associated category. For example: \"900-9300-0000\""
          }
        }
      },
      "OpeningHours" : {
        "required" : [ "structured", "text" ],
        "type" : "object",
        "properties" : {
          "categories" : {
            "type" : "array",
            "description" : "The list of place categories, this set of opening hours refers to.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/CategoryRef"
              } ]
            }
          },
          "text" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "isOpen" : {
            "type" : "boolean"
          },
          "structured" : {
            "type" : "array",
            "description" : "List of iCalender-based structured representations of opening hours",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/StructuredOpeningHours"
              } ]
            }
          }
        }
      },
      "StructuredOpeningHours" : {
        "required" : [ "duration", "recurrence", "start" ],
        "type" : "object",
        "properties" : {
          "start" : {
            "type" : "string",
            "description" : "String with a modified [iCalendar DATE-TIME](https://datatracker.ietf.org/doc/html/rfc5545#section-3.3.5) value.\nThe date part is omitted, values starts with the time section maker \"T\". Example: T132000"
          },
          "duration" : {
            "type" : "string",
            "description" : "String with an [iCalendar DURATION](https://datatracker.ietf.org/doc/html/rfc5545#section-3.3.6) value.\nA closed day has the value PT00:00M"
          },
          "recurrence" : {
            "type" : "string",
            "description" : "String with a [RECUR](https://datatracker.ietf.org/doc/html/rfc5545#section-3.3.10) rule. Note that,\n in contrast to the RFC, the assignment operator is a colon `:` and not an equal sign `=`."
          }
        }
      },
      "ExtendedAttribute" : {
        "type" : "object",
        "properties" : {
          "evStation" : {
            "description" : "EV charging pool information.\nThis element and its children are only rendered when `show=ev` is provided.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/EvChargingAttributes"
            } ]
          },
          "evAvailability" : {
            "description" : "EV charging pool detailed availability\nDetailed information about the pool stations, EVSE and connectors.\nThis element and its children are only rendered when `show=ev` is provided.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/EvAvailabilityAttributes"
            } ]
          }
        }
      },
      "EvChargingAttributes" : {
        "type" : "object",
        "properties" : {
          "connectors" : {
            "type" : "array",
            "description" : "List of EV pool groups of connectors. Each group is defined by a common charging connector type and max power level. The numberOfConnectors field contains the number of connectors in the group.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/EvConnector"
              } ]
            }
          },
          "totalNumberOfConnectors" : {
            "type" : "integer",
            "description" : "Total number of charging connectors in the EV charging pool",
            "format" : "int32"
          },
          "access" : {
            "type" : "string",
            "description" : "Information about accessibility",
            "enum" : [ "private", "public", "restricted" ]
          },
          "eMobilityServiceProviders" : {
            "type" : "array",
            "description" : "The list of eMSP (e-Mobility Service Provider) for which the EV station operator has EV roaming agreements.\nEach element contains both the name and the partner ID of the eMSP.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/EMobilityServiceProvider"
              } ]
            }
          },
          "paymentMethods" : {
            "type" : "array",
            "description" : "List of payment methods supported at the EV station",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/EvPaymentSupport"
              } ]
            }
          }
        }
      },
      "EvConnector" : {
        "type" : "object",
        "properties" : {
          "supplierName" : {
            "type" : "string",
            "description" : "The EV charge point operator"
          },
          "connectorType" : {
            "description" : "Id and name element pair representing the connector type in the EV pool group.\nFor more information on the current connector types, see the [connectorTypes](https://www.here.com/docs/bundle/ev-charge-points-api-developer-guide/page/topics/resource-type-connector-types.html) values in the HERE EV Charge Points API.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/EvNameId"
            } ]
          },
          "fixedCable" : {
            "type" : "boolean",
            "description" : "Boolean indicating if a cable is provided for the connector group.If true, then there is a cable for the connector group at the station."
          },
          "maxPowerLevel" : {
            "type" : "number",
            "description" : "Maximum charge power (in kilowatt) of connectors in connectors group.",
            "format" : "double"
          },
          "chargingPoint" : {
            "description" : "Connectors group additional charging information",
            "allOf" : [ {
              "$ref" : "#/components/schemas/EvChargingPoint"
            } ]
          }
        }
      },
      "EvNameId" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Any string value"
          },
          "id" : {
            "type" : "string",
            "description" : "Unique ID"
          }
        }
      },
      "EvChargingPoint" : {
        "type" : "object",
        "properties" : {
          "numberOfConnectors" : {
            "type" : "integer",
            "description" : "Number of physical connectors in the connectors group",
            "format" : "int32"
          },
          "voltsRange" : {
            "type" : "string",
            "description" : "Voltage provided by the connectors group",
            "example" : "100-120V AC"
          },
          "phases" : {
            "type" : "integer",
            "description" : "Number of phases provided by the connectors group",
            "format" : "int32"
          },
          "ampsRange" : {
            "type" : "string",
            "description" : "Amperage provided by the connectors group",
            "example" : "12A-80A"
          },
          "numberOfAvailable" : {
            "type" : "integer",
            "description" : "Number of available physical connectors in the connectors group (i.e not being used to charge a vehicle, out of service, etc)",
            "format" : "int32"
          },
          "numberOfInUse" : {
            "type" : "integer",
            "description" : "Number of occupied physical connectors in the connectors group.",
            "format" : "int32"
          },
          "numberOfOutOfService" : {
            "type" : "integer",
            "description" : "Number of physical connectors that are out of service at the charge point.",
            "format" : "int32"
          },
          "numberOfReserved" : {
            "type" : "integer",
            "description" : "Number of physical connectors that are reserved at the charge point.",
            "format" : "int32"
          },
          "lastUpdateTimestamp" : {
            "type" : "string",
            "description" : "\nInformation about when the `numberOfAvailable` and `numberOfInUse` fields were last updated, in ISO 8601 format.\nIf the time is UTC, a Z is added. \nIf the time is not UTC , then the offset is added as a ¬±[hh][mm] value.\n",
            "example" : "2013-12-31T12:00:00.000Z"
          }
        }
      },
      "EMobilityServiceProvider" : {
        "required" : [ "name", "partnerId" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the e-Mobility Service Provider. The eMSP name may change but the respective partner ID will remain stable."
          },
          "partnerId" : {
            "type" : "string",
            "description" : "The unique and stable ID for the e-Mobility Service Provider provided by HERE platform.\nThe partner ID can be used to display EV stations supported by eMSP for which drivers have a subscription.\nThe list of eMSP partner IDs can be retrieved using the EV Charge Points API\n[`roaming`](https://www.here.com/docs/bundle/ev-charge-points-api-developer-guide/page/topics/resource-roamings.html) resource."
          }
        }
      },
      "EvPaymentSupport" : {
        "required" : [ "accepted", "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "payment method identifier.\n\nDescription of supported values:\n\n- `authByCarPlugAndCharge`: indicates whether this EV station supports Plug&Charge.ISO 15118 Plug&Charge enables drivers to plug in and charge up instantly using automatic EV-to-charging station authentication technology.\n- `creditCard`: indicates if this EV station accepts credit card payment or not.\n- `debitCard`: indicates if this EV station accepts debit card payment or not.\n- `onlineApplePay`: indicates whether this EV station accepts Apple Pay (TM) authentication and payment method.\n- `onlineGooglePay`:  indicates whether this EV station accepts Google Pay (TM) authentication and payment method.\n- `onlinePaypal`: indicates whether this EV station accepts PayPal (TM) authentication and payment method.\n- `operatorApp`: indicates whether this EV station support authentication and payment through an app from the Charging Point Operator.",
            "enum" : [ "authByCarPlugAndCharge", "creditCard", "debitCard", "onlineApplePay", "onlineGooglePay", "onlinePaypal", "operatorApp" ]
          },
          "accepted" : {
            "type" : "boolean",
            "description" : "set to `true` if the related payment method is accepted at the EV station"
          }
        }
      },
      "EvAvailabilityAttributes" : {
        "type" : "object",
        "properties" : {
          "stations" : {
            "type" : "array",
            "description" : "List of EV stations at the place (Currently only one is expected)",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/EvAvailabilityStation"
              } ]
            }
          }
        }
      },
      "EvAvailabilityStation" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "HERE ID of the station"
          },
          "cpoId" : {
            "type" : "string",
            "description" : "The unique ID of the location in the system of the CPO."
          },
          "evses" : {
            "type" : "array",
            "description" : "List of EVSE (electric vehicle supply equipment) in the EV station",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/EvAvailabilityEvse"
              } ]
            }
          }
        }
      },
      "EvAvailabilityEvse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "HERE ID of the EVSE"
          },
          "cpoId" : {
            "type" : "string",
            "description" : "The unique ID of an EVSE in the system of the CPO.\n This ID is unique in the system of the CPO but not necessarily globally unique.\n The format will differ between different CPOs. This ID is always provided."
          },
          "cpoEvseEMI3Id" : {
            "type" : "string",
            "description" : "Identifier in eMI3 format of the EVSE within the Charge Point Operator (CPO) platform.\nThis ID is not always present. Example of ID format: \"`DE*ICT*E0001897`\". "
          },
          "state" : {
            "type" : "string",
            "description" : "EVSE status\n\nDescription of supported values:\n\n- `AVAILABLE`: The EVSE is able to start a new charging session.\n- `OCCUPIED`: The EVSE is in use\n- `OFFLINE`: No status information available. (Also used when offline)\n- `OTHER`: No status information available. (Also used when offline)\n- `OUT_OF_SERVICE`: The EVSE is currently out of order.\n- `RESERVED`: The EVSE has been reserved for a particular EV driver and is unavailable for other drivers\n- `UNAVAILABLE`: The EVSE is not available because of a physical barrier, for example a car",
            "enum" : [ "AVAILABLE", "OCCUPIED", "OFFLINE", "OTHER", "OUT_OF_SERVICE", "RESERVED", "UNAVAILABLE" ]
          },
          "last_updated" : {
            "type" : "string",
            "description" : "Last update of the dynamic connector availability information reflected in the connectorStatus elements,\nin ISO 8601 format. If the time is UTC, a Z is added.\nAn example of this kind of timestamp value is \"`2013-12-31T12:00:00.000Z`\". If the time is not UTC ,\nthen the offset is added as a ¬±[hh][mm] value (for example, \"`2014-01-14T10:00:00.000+0100`\")."
          },
          "connectors" : {
            "type" : "array",
            "description" : "List of connectors of this EVSE.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/EvAvailabilityConnector"
              } ]
            }
          }
        }
      },
      "EvAvailabilityConnector" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "HERE ID of the connector."
          },
          "cpoId" : {
            "type" : "string",
            "description" : "CPO ID of the connector."
          },
          "typeId" : {
            "type" : "string",
            "description" : "Connector type ID. For more information on the current connector types,\nsee [resource-type-connector-types.html](https://www.here.com/docs/bundle/ev-charge-points-api-developer-guide/page/topics/resource-type-connector-types.html)"
          },
          "maxPowerLevel" : {
            "type" : "number",
            "description" : "Maximum charge power of connector in kilowatts.",
            "format" : "double"
          }
        }
      },
      "PhonemesSection" : {
        "type" : "object",
        "properties" : {
          "placeName" : {
            "type" : "array",
            "description" : "Phonemes for the name of the place.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Phoneme"
              } ]
            }
          },
          "countryName" : {
            "type" : "array",
            "description" : "Phonemes for the county name.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Phoneme"
              } ]
            }
          },
          "state" : {
            "type" : "array",
            "description" : "Phonemes for the state name.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Phoneme"
              } ]
            }
          },
          "county" : {
            "type" : "array",
            "description" : "Phonemes for the county name.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Phoneme"
              } ]
            }
          },
          "city" : {
            "type" : "array",
            "description" : "Phonemes for the city name.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Phoneme"
              } ]
            }
          },
          "district" : {
            "type" : "array",
            "description" : "Phonemes for the district name.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Phoneme"
              } ]
            }
          },
          "subdistrict" : {
            "type" : "array",
            "description" : "Phonemes for the subdistrict name.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Phoneme"
              } ]
            }
          },
          "street" : {
            "type" : "array",
            "description" : "Phonemes for the street name.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Phoneme"
              } ]
            }
          },
          "block" : {
            "type" : "array",
            "description" : "Phonemes for the block.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Phoneme"
              } ]
            }
          },
          "subblock" : {
            "type" : "array",
            "description" : "Phonemes for the sub-block.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Phoneme"
              } ]
            }
          }
        }
      },
      "Phoneme" : {
        "required" : [ "value" ],
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "description" : "The actual phonetic transcription in the NT-SAMPA format."
          },
          "language" : {
            "type" : "string",
            "description" : "The [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) language code."
          },
          "preferred" : {
            "type" : "boolean",
            "description" : "Whether or not it is the preferred phoneme."
          }
        }
      },
      "Media" : {
        "type" : "object",
        "properties" : {
          "images" : {
            "description" : "An object that provides access to images attached to the place result.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/ImageMediaCollection"
            } ]
          },
          "editorials" : {
            "description" : "An object that provides editorial descriptions about a place result.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/EditorialMediaCollection"
            } ]
          },
          "ratings" : {
            "description" : "An object that provides 3rd party supplier ratings about the place result.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/RatingMediaCollection"
            } ]
          }
        }
      },
      "ImageMediaCollection" : {
        "required" : [ "items" ],
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "description" : "An array containing the image objects of the current place result.\nIf the place has no image, the parent element `images` is not present.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Image"
              } ]
            }
          }
        }
      },
      "Image" : {
        "required" : [ "href", "supplier" ],
        "type" : "object",
        "properties" : {
          "href" : {
            "type" : "string",
            "description" : "The URL to the actual image"
          },
          "supplier" : {
            "description" : "Information about the supplier of this image.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/MediaSupplier"
            } ]
          }
        }
      },
      "MediaSupplier" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "An identifier for the supplier.",
            "enum" : [ "tripadvisor" ]
          }
        }
      },
      "EditorialMediaCollection" : {
        "required" : [ "items" ],
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "description" : "An array containing the editorial objects of the current place result.\nIf the place has no editorials, the parent element `editorials` is not present.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Editorial"
              } ]
            }
          }
        }
      },
      "Editorial" : {
        "required" : [ "description", "language", "supplier" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "The editorial content."
          },
          "language" : {
            "type" : "string",
            "description" : "A language code indicating what language the editorial is in, if known."
          },
          "href" : {
            "type" : "string",
            "description" : "An optional deep link to a 3rd party source providing the editorials."
          },
          "supplier" : {
            "description" : "Information about the supplier of this editorial.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/MediaSupplier"
            } ]
          }
        }
      },
      "RatingMediaCollection" : {
        "required" : [ "items" ],
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "description" : "An array containing the ratings objects of the current place result.\nIf the place has no ratings, the parent element `ratings` is not present.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Rating"
              } ]
            }
          }
        }
      },
      "Rating" : {
        "required" : [ "average", "count", "supplier" ],
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "description" : "The count of user ratings in the supplier database.",
            "format" : "int32"
          },
          "average" : {
            "type" : "number",
            "description" : "The average user rating in the supplier database.",
            "format" : "double"
          },
          "href" : {
            "type" : "string",
            "description" : "An optional deep link to a 3rd party source providing the ratings information."
          },
          "supplier" : {
            "description" : "Information about the supplier of this rating.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/MediaSupplier"
            } ]
          }
        }
      },
      "AccessRestrictionAttributes" : {
        "type" : "object",
        "properties" : {
          "categories" : {
            "type" : "array",
            "description" : "The list of place categories, this set of access restrictions refers to.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/CategoryRef"
              } ]
            }
          },
          "restricted" : {
            "type" : "boolean",
            "description" : "When set to `true`, the place response item has a known access restriction.\nWhen the place has no known access restriction, the `accessRestrictions` element is omitted, so `restricted` value is never set to `false`."
          }
        }
      },
      "OpenSearchAutosuggestResponse" : {
        "required" : [ "items", "queryTerms" ],
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "description" : "If the `offset` request parameter is not set, `items` contains a *full list* of JSON objects with a payload relevant to the request.\nThe ranking order is from most to least relevant and is based on the matched location criteria.\n\nIf the `offset` request parameter is set, `items` contains a contiguous subset of objects from the *full list* described before: A page of `<count>` objects at a certain `<offset>` value from the beginning of the *full list*.\n",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/AutosuggestEntityResultItem"
              }, {
                "$ref" : "#/components/schemas/AutosuggestQueryResultItem"
              } ]
            }
          },
          "offset" : {
            "type" : "integer",
            "description" : "**ALPHA** The `offset` value from the full list from which the page is taken.\n\nThis is expected to reflect the `offset` request parameter value\n",
            "format" : "int32"
          },
          "nextOffset" : {
            "type" : "integer",
            "description" : "**ALPHA** The `offset` value of the next page. This element is omitted on the last page.\n\nThis response element is only set when in pagination mode (when the query parameter `offset` is set).\n",
            "format" : "int32"
          },
          "count" : {
            "type" : "integer",
            "description" : "**ALPHA** The actual page size: The number of objects returned in the `items` array.\n\nThis response element is only set when in pagination mode (when the query parameter `offset` is set).\n",
            "format" : "int32"
          },
          "limit" : {
            "type" : "integer",
            "description" : "**ALPHA** Maximum number of objects in `items` as specified in request.\n\nThis response element is only set when in pagination mode (when the query parameter `offset` is set).\n",
            "format" : "int32"
          },
          "queryTerms" : {
            "type" : "array",
            "description" : "Suggestions for refining individual query terms",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/QueryTermResultItem"
              } ]
            }
          }
        }
      },
      "AutosuggestEntityResultItem" : {
        "required" : [ "address", "id", "title" ],
        "type" : "object",
        "properties" : {
          "title" : {
            "type" : "string",
            "description" : "The localized display name of this result item."
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the result item. This ID can be used for a Look Up by ID search as well."
          },
          "politicalView" : {
            "type" : "string",
            "description" : "ISO3 country code of the item political view (default for international). This response element is populated when the politicalView parameter is set in the query"
          },
          "ontologyId" : {
            "type" : "string",
            "description" : "Related ontology ID"
          },
          "resultType" : {
            "type" : "string",
            "enum" : [ "addressBlock", "administrativeArea", "houseNumber", "intersection", "locality", "place", "postalCodePoint", "street" ]
          },
          "houseNumberType" : {
            "type" : "string",
            "description" : "\n\nDescription of supported values:\n\n- **RESTRICTED** `MPA`: A Micro Point Address represents a secondary address for a Point\n  Address; for example, building, floor (level) and suite (unit).\n  Micro Point Addresses can be used to enhance Point Address with\n  greater address detail and higher coordinate accuracy. This result\n  type is only returned by Lookup endpoint or Geocode endpoint when\n  `with=MPA` parameter is provided.\n- `PA`: A Point Address represents an individual address as a point object.\n  Point Addresses are coming from trusted sources. We can say with\n  high certainty that the address exists and at what position. A\n  Point Address result contains two types of coordinates. One is the\n  access point (or navigation coordinates), which is the point to\n  start or end a drive. The other point is the position or display\n  point. This point varies per source and country. The point can be\n  the rooftop point, a point close to the building entry, or a point\n  close to the building, driveway or parking lot that belongs to the\n  building.\n- `interpolated`: An interpolated address. These are approximate positions as a\n  result of a linear interpolation based on address ranges. Address\n  ranges, especially in the USA, are typical per block. For\n  interpolated addresses, we cannot say with confidence that the\n  address exists in reality. But the interpolation provides a good\n  location approximation that brings people in most use cases close\n  to the target location. The access point of an interpolated address\n  result is calculated based on the address range and the road\n  geometry. The position (display) point is pre-configured offset\n  from the street geometry. Compared to Point Addresses, interpolated\n  addresses are less accurate.",
            "enum" : [ "MPA", "PA", "interpolated" ]
          },
          "addressBlockType" : {
            "type" : "string",
            "enum" : [ "block", "subblock" ]
          },
          "localityType" : {
            "type" : "string",
            "enum" : [ "city", "district", "postalCode", "subdistrict" ]
          },
          "administrativeAreaType" : {
            "type" : "string",
            "enum" : [ "country", "county", "state" ]
          },
          "address" : {
            "description" : "Postal address of the result item.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Address"
            } ]
          },
          "position" : {
            "description" : "The coordinates (latitude, longitude) of a pin on a map corresponding to the searched place.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/DisplayResponseCoordinate"
            } ]
          },
          "access" : {
            "type" : "array",
            "description" : "Coordinates of the response item on a HERE map navigable link (for example, for driving or walking).\n\nWhen a response item is of type `\"place\"`, it can contain more than one access object.\nEach access object contains a position (`lat`, `lng`), with potentially a type (field `type`),\na textual label (field `label`) and a `primary` boolean field set to true for the main access to the place.\n\nThe first object in the `access` array is the primary access to the place.\n\nResponse items of other types than `\"place\"` have a maximum of one access position.\n",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/ExtendedAccessPoint"
              } ]
            }
          },
          "driveThrough" : {
            "type" : "boolean",
            "description" : "Set to `true` if the related business allows customers to purchase products \n(or use the service provided by the business) without leaving their cars."
          },
          "distance" : {
            "type" : "integer",
            "description" : "The distance \"as the crow flies\" from the search center to this result item in meters. For example: \"172039\".\n\nWhen searching along a route this is the distance along the route plus the distance from the route polyline to this result item.",
            "format" : "int64",
            "example" : 172039
          },
          "excursionDistance" : {
            "type" : "integer",
            "description" : "Two times the distance from the polyline to this result item in meters while searching along the route",
            "format" : "int64"
          },
          "mapView" : {
            "description" : "The bounding box enclosing the geometric shape (area or line) that an individual result covers. `place` typed results have no `mapView`.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/MapView"
            } ]
          },
          "categories" : {
            "type" : "array",
            "description" : "The list of categories assigned to this place.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Category"
              } ]
            }
          },
          "chains" : {
            "type" : "array",
            "description" : "The list of chains assigned to this place.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Chain"
              } ]
            }
          },
          "references" : {
            "type" : "array",
            "description" : "The list of supplier references available for this place.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/SupplierReference"
              } ]
            }
          },
          "foodTypes" : {
            "type" : "array",
            "description" : "The list of food types assigned to this place.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Category"
              } ]
            }
          },
          "contacts" : {
            "type" : "array",
            "description" : "Contact information like phone, email, WWW.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/ContactInformation"
              } ]
            }
          },
          "openingHours" : {
            "type" : "array",
            "description" : "A list of hours during which the place is open for business.\nThis field is optional: When it is not present, it means that we are lacking data about the place opening hours.\nDays without opening hours have to be considered as closed.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/OpeningHours"
              } ]
            }
          },
          "timeZone" : {
            "description" : "Provides time zone information for this place. (rendered only if `show=tz` is provided.)",
            "allOf" : [ {
              "$ref" : "#/components/schemas/TimeZoneInfo"
            } ]
          },
          "highlights" : {
            "description" : "Describes how the parts of the response element matched the input query",
            "allOf" : [ {
              "$ref" : "#/components/schemas/TitleAndAddressHighlighting"
            } ]
          },
          "phonemes" : {
            "description" : "Phonemes for address and place names. (rendered only if `show=phonemes` is provided.)",
            "allOf" : [ {
              "$ref" : "#/components/schemas/PhonemesSection"
            } ]
          },
          "media" : {
            "description" : "**BETA, RESTRICTED** A set of rich media types aggregated from multiple sources. When the current place has no ratings, description or images, this element is not present.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Media"
            } ]
          },
          "streetInfo" : {
            "type" : "array",
            "description" : "Street Details (only rendered if `show=streetInfo` is provided.)",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/StreetInfo"
              } ]
            }
          },
          "accessRestrictions" : {
            "type" : "array",
            "description" : "A list of access restrictions related to a `place` result item.\n\nA place response item has a restricted access when the place is not publicly accessible without a specific authorization, membership or customer relationship.\nExamples: the place is for customers or visitors only.\n\nThis field is optional: When it is not present, it means that the place response item has no known access restriction.",
            "example" : [ {
              "categories" : [ {
                "id" : "800-8500-0177"
              } ],
              "restricted" : true
            } ],
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/AccessRestrictionAttributes"
              } ]
            }
          },
          "mapReferences" : {
            "description" : "Return the map references of the location objects.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/MapReferenceSectionAS"
            } ]
          }
        }
      },
      "TitleAndAddressHighlighting" : {
        "type" : "object",
        "properties" : {
          "title" : {
            "type" : "array",
            "description" : "Ranges of indexes that matched in the title attribute",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Range"
              } ]
            }
          },
          "address" : {
            "description" : "Ranges of indexes that matched in the individual address attributes",
            "allOf" : [ {
              "$ref" : "#/components/schemas/AddressHighlightingInformation"
            } ]
          }
        }
      },
      "Range" : {
        "required" : [ "end", "start" ],
        "type" : "object",
        "properties" : {
          "start" : {
            "type" : "integer",
            "description" : "first index of the matched range (0-based indexing, inclusive)",
            "format" : "int32"
          },
          "end" : {
            "type" : "integer",
            "description" : "one past the last index of the matched range (0-based indexing, exclusive); The difference between end and start gives the length of the term",
            "format" : "int32"
          }
        }
      },
      "AddressHighlightingInformation" : {
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "array",
            "description" : "Indicates matched substrings in the address label.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Range"
              } ]
            }
          },
          "country" : {
            "type" : "array",
            "description" : "Indicates matched substrings in the Country field.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Range"
              } ]
            }
          },
          "countryCode" : {
            "type" : "array",
            "description" : "Indicates matched substrings in the Country Code field.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Range"
              } ]
            }
          },
          "state" : {
            "type" : "array",
            "description" : "Indicates matched substrings in the State field.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Range"
              } ]
            }
          },
          "stateCode" : {
            "type" : "array",
            "description" : "Indicates matched substrings in the State Code field.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Range"
              } ]
            }
          },
          "county" : {
            "type" : "array",
            "description" : "Indicates matched substrings in the County field.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Range"
              } ]
            }
          },
          "countyCode" : {
            "type" : "array",
            "description" : "Indicates matched substrings in the County Code field.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Range"
              } ]
            }
          },
          "city" : {
            "type" : "array",
            "description" : "Indicates matched substrings in the City field.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Range"
              } ]
            }
          },
          "district" : {
            "type" : "array",
            "description" : "Indicates matched substrings in the District field.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Range"
              } ]
            }
          },
          "subdistrict" : {
            "type" : "array",
            "description" : "Indicates matched substrings in the Sub-District field.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Range"
              } ]
            }
          },
          "block" : {
            "type" : "array",
            "description" : "Indicates matched substrings in the Block field.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Range"
              } ]
            }
          },
          "subblock" : {
            "type" : "array",
            "description" : "Indicates matched substrings in the Sub-Block field.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Range"
              } ]
            }
          },
          "street" : {
            "type" : "array",
            "description" : "Indicates matched substrings in the Street field.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Range"
              } ]
            }
          },
          "streets" : {
            "type" : "array",
            "description" : "Indicates matched substrings in the Streets field.",
            "items" : {
              "type" : "array",
              "items" : {
                "allOf" : [ {
                  "$ref" : "#/components/schemas/Range"
                } ]
              }
            }
          },
          "postalCode" : {
            "type" : "array",
            "description" : "Indicates matched substrings in the Postal Code field.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Range"
              } ]
            }
          },
          "houseNumber" : {
            "type" : "array",
            "description" : "Indicates matched substrings in the House Number field.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Range"
              } ]
            }
          },
          "building" : {
            "type" : "array",
            "description" : "Indicates matched substrings in the Building field.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Range"
              } ]
            }
          }
        }
      },
      "MapReferenceSectionAS" : {
        "type" : "object",
        "properties" : {
          "pointAddress" : {
            "description" : "The section containing the point address reference",
            "allOf" : [ {
              "$ref" : "#/components/schemas/PointAddressSection"
            } ]
          },
          "segments" : {
            "type" : "array",
            "description" : "The section containing the segment references",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Segment"
              } ]
            }
          },
          "country" : {
            "description" : "country ID in HERE Map Content",
            "allOf" : [ {
              "$ref" : "#/components/schemas/AdminIdSection"
            } ]
          },
          "state" : {
            "description" : "state ID in HERE Map Content",
            "allOf" : [ {
              "$ref" : "#/components/schemas/AdminIdSection"
            } ]
          },
          "county" : {
            "description" : "county ID in HERE Map Content",
            "allOf" : [ {
              "$ref" : "#/components/schemas/AdminIdSection"
            } ]
          },
          "city" : {
            "description" : "city ID in HERE Map Content",
            "allOf" : [ {
              "$ref" : "#/components/schemas/AdminIdSection"
            } ]
          },
          "district" : {
            "description" : "district ID in HERE Map Content",
            "allOf" : [ {
              "$ref" : "#/components/schemas/AdminIdSection"
            } ]
          },
          "subdistrict" : {
            "description" : "subdistrict ID in HERE Map Content",
            "allOf" : [ {
              "$ref" : "#/components/schemas/AdminIdSection"
            } ]
          }
        }
      },
      "AutosuggestQueryResultItem" : {
        "required" : [ "id", "title" ],
        "type" : "object",
        "properties" : {
          "title" : {
            "type" : "string",
            "description" : "The localized display name of this result item."
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the result item. The identifier of an `AutosuggestQueryResultItem` cannot be used for a Lookup by ID search."
          },
          "resultType" : {
            "type" : "string",
            "enum" : [ "categoryQuery", "chainQuery" ]
          },
          "noResultOnFollowUp" : {
            "type" : "boolean",
            "description" : "noResultOnFollowUp is added with a value true when the chainQuery response item is providing a\nfollow-up href likely to not lead to any result. If noResultOnFollowUp is not added, there are good\nchances that the follow-up href lead to places near the search center. Customers can use the\nnoResultOnFollowUp to for instance not expose the chainQuery response item in their application, or\nsignal that there is \"no nearby result for the chain query\"."
          },
          "href" : {
            "type" : "string",
            "description" : "URL of the follow-up query"
          },
          "highlights" : {
            "description" : "Describes how the parts of the response element matched the input query",
            "allOf" : [ {
              "$ref" : "#/components/schemas/TitleHighlighting"
            } ]
          }
        }
      },
      "TitleHighlighting" : {
        "type" : "object",
        "properties" : {
          "title" : {
            "type" : "array",
            "description" : "Ranges of indexes that matched in the title attribute",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Range"
              } ]
            }
          }
        }
      },
      "QueryTermResultItem" : {
        "required" : [ "end", "replaces", "start", "term" ],
        "type" : "object",
        "properties" : {
          "term" : {
            "type" : "string",
            "description" : "The term that will be suggested to the user."
          },
          "replaces" : {
            "type" : "string",
            "description" : "The sub-string of the original query that is replaced by this Query Term."
          },
          "start" : {
            "type" : "integer",
            "description" : "The start index in codepoints (inclusive) of the text replaced in the original query.",
            "format" : "int32"
          },
          "end" : {
            "type" : "integer",
            "description" : "The end index in codepoints (exclusive) of the text replaced in the original query.",
            "format" : "int32"
          }
        }
      },
      "OpenSearchAutocompleteResponse" : {
        "required" : [ "items" ],
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "description" : "The results are presented as a JSON list of candidates in ranked order (most-likely to least-likely) based on the matched location criteria.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/AutocompleteResultItem"
              } ]
            }
          }
        }
      },
      "AutocompleteResultItem" : {
        "required" : [ "address", "id", "title" ],
        "type" : "object",
        "properties" : {
          "title" : {
            "type" : "string",
            "description" : "The unified display name of this result item. The result title is composed so that the customer\napplication can use it to render the suggestions with highlighting. It is build in a unified way for\nall the countries starting from the country name and down to the address line. It is build out of\nthe address components that are important for the end-user to recognize and eventually to choose a\nresult and includes all the input terms. For example: \"Germany, 32547, Bad Oeynhausen, Schulstra√üe 4\""
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the result item. This ID can be used for a Look Up by ID search as well."
          },
          "language" : {
            "type" : "string",
            "description" : "The preferred language of address elements in the result."
          },
          "politicalView" : {
            "type" : "string",
            "description" : "ISO3 country code of the item political view (default for international). This response element is populated when the politicalView parameter is set in the query"
          },
          "resultType" : {
            "type" : "string",
            "enum" : [ "addressBlock", "administrativeArea", "houseNumber", "intersection", "locality", "place", "postalCodePoint", "street" ]
          },
          "houseNumberType" : {
            "type" : "string",
            "description" : "\n\nDescription of supported values:\n\n- **RESTRICTED** `MPA`: A Micro Point Address represents a secondary address for a Point\n  Address; for example, building, floor (level) and suite (unit).\n  Micro Point Addresses can be used to enhance Point Address with\n  greater address detail and higher coordinate accuracy. This result\n  type is only returned by Lookup endpoint or Geocode endpoint when\n  `with=MPA` parameter is provided.\n- `PA`: A Point Address represents an individual address as a point object.\n  Point Addresses are coming from trusted sources. We can say with\n  high certainty that the address exists and at what position. A\n  Point Address result contains two types of coordinates. One is the\n  access point (or navigation coordinates), which is the point to\n  start or end a drive. The other point is the position or display\n  point. This point varies per source and country. The point can be\n  the rooftop point, a point close to the building entry, or a point\n  close to the building, driveway or parking lot that belongs to the\n  building.\n- `interpolated`: An interpolated address. These are approximate positions as a\n  result of a linear interpolation based on address ranges. Address\n  ranges, especially in the USA, are typical per block. For\n  interpolated addresses, we cannot say with confidence that the\n  address exists in reality. But the interpolation provides a good\n  location approximation that brings people in most use cases close\n  to the target location. The access point of an interpolated address\n  result is calculated based on the address range and the road\n  geometry. The position (display) point is pre-configured offset\n  from the street geometry. Compared to Point Addresses, interpolated\n  addresses are less accurate.",
            "enum" : [ "MPA", "PA", "interpolated" ]
          },
          "estimatedPointAddress" : {
            "type" : "boolean",
            "description" : "If true, indicates that the coordinates of `position` and `access` points of the Point Address are\nestimated.\nThis field is visible only for result items with resultType `houseNumber` and houseNumberType `PA` and\nonly when the value is `true`"
          },
          "localityType" : {
            "type" : "string",
            "enum" : [ "city", "district", "postalCode", "subdistrict" ]
          },
          "administrativeAreaType" : {
            "type" : "string",
            "enum" : [ "country", "county", "state" ]
          },
          "address" : {
            "description" : "Detailed address of the result item.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Address"
            } ]
          },
          "distance" : {
            "type" : "integer",
            "description" : "The distance \"as the crow flies\" from the search center to this result item in meters. For example: \"172039\".\n\nWhen searching along a route this is the distance along the route plus the distance from the route polyline to this result item.",
            "format" : "int64",
            "example" : 172039
          },
          "highlights" : {
            "description" : "Describes how the parts of the response element matched the input query",
            "allOf" : [ {
              "$ref" : "#/components/schemas/TitleAndAddressHighlighting"
            } ]
          },
          "streetInfo" : {
            "type" : "array",
            "description" : "Street Details (only rendered if `show=streetInfo` is provided.)",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/StreetInfo"
              } ]
            }
          }
        }
      },
      "OpenSearchBrowseResponse" : {
        "required" : [ "items" ],
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "description" : "If the `offset` request parameter is not set, `items` contains a *full list* of JSON objects with a payload relevant to the request.\nThe ranking order is from most to least relevant and is based on the matched location criteria.\n\nIf the `offset` request parameter is set, `items` contains a contiguous subset of objects from the *full list* described before: A page of `<count>` objects at a certain `<offset>` value from the beginning of the *full list*.\n",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/BrowseResultItem"
              } ]
            }
          },
          "offset" : {
            "type" : "integer",
            "description" : "**ALPHA** The `offset` value from the full list from which the page is taken.\n\nThis is expected to reflect the `offset` request parameter value\n",
            "format" : "int32"
          },
          "nextOffset" : {
            "type" : "integer",
            "description" : "**ALPHA** The `offset` value of the next page. This element is omitted on the last page.\n\nThis response element is only set when in pagination mode (when the query parameter `offset` is set).\n",
            "format" : "int32"
          },
          "count" : {
            "type" : "integer",
            "description" : "**ALPHA** The actual page size: The number of objects returned in the `items` array.\n\nThis response element is only set when in pagination mode (when the query parameter `offset` is set).\n",
            "format" : "int32"
          },
          "limit" : {
            "type" : "integer",
            "description" : "**ALPHA** Maximum number of objects in `items` as specified in request.\n\nThis response element is only set when in pagination mode (when the query parameter `offset` is set).\n",
            "format" : "int32"
          }
        }
      },
      "BrowseResultItem" : {
        "required" : [ "address", "id", "title" ],
        "type" : "object",
        "properties" : {
          "title" : {
            "type" : "string",
            "description" : "The localized display name of this result item."
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the result item. This ID can be used for a Look Up by ID search as well."
          },
          "politicalView" : {
            "type" : "string",
            "description" : "ISO3 country code of the item political view (default for international). This response element is populated when the politicalView parameter is set in the query"
          },
          "resultType" : {
            "type" : "string",
            "enum" : [ "addressBlock", "administrativeArea", "houseNumber", "intersection", "locality", "place", "postalCodePoint", "street" ]
          },
          "houseNumberType" : {
            "type" : "string",
            "description" : "\n\nDescription of supported values:\n\n- **RESTRICTED** `MPA`: A Micro Point Address represents a secondary address for a Point\n  Address; for example, building, floor (level) and suite (unit).\n  Micro Point Addresses can be used to enhance Point Address with\n  greater address detail and higher coordinate accuracy. This result\n  type is only returned by Lookup endpoint or Geocode endpoint when\n  `with=MPA` parameter is provided.\n- `PA`: A Point Address represents an individual address as a point object.\n  Point Addresses are coming from trusted sources. We can say with\n  high certainty that the address exists and at what position. A\n  Point Address result contains two types of coordinates. One is the\n  access point (or navigation coordinates), which is the point to\n  start or end a drive. The other point is the position or display\n  point. This point varies per source and country. The point can be\n  the rooftop point, a point close to the building entry, or a point\n  close to the building, driveway or parking lot that belongs to the\n  building.\n- `interpolated`: An interpolated address. These are approximate positions as a\n  result of a linear interpolation based on address ranges. Address\n  ranges, especially in the USA, are typical per block. For\n  interpolated addresses, we cannot say with confidence that the\n  address exists in reality. But the interpolation provides a good\n  location approximation that brings people in most use cases close\n  to the target location. The access point of an interpolated address\n  result is calculated based on the address range and the road\n  geometry. The position (display) point is pre-configured offset\n  from the street geometry. Compared to Point Addresses, interpolated\n  addresses are less accurate.",
            "enum" : [ "MPA", "PA", "interpolated" ]
          },
          "addressBlockType" : {
            "type" : "string",
            "enum" : [ "block", "subblock" ]
          },
          "localityType" : {
            "type" : "string",
            "enum" : [ "city", "district", "postalCode", "subdistrict" ]
          },
          "administrativeAreaType" : {
            "type" : "string",
            "enum" : [ "country", "county", "state" ]
          },
          "houseNumberFallback" : {
            "type" : "boolean",
            "description" : "If true, indicates that the requested house number was corrected to match the nearest known house number. This field is visible only when the value is true."
          },
          "address" : {
            "description" : "Postal address of the result item.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Address"
            } ]
          },
          "position" : {
            "description" : "The coordinates (latitude, longitude) of a pin on a map corresponding to the searched place.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/DisplayResponseCoordinate"
            } ]
          },
          "access" : {
            "type" : "array",
            "description" : "Coordinates of the response item on a HERE map navigable link (for example, for driving or walking).\n\nWhen a response item is of type `\"place\"`, it can contain more than one access object.\nEach access object contains a position (`lat`, `lng`), with potentially a type (field `type`),\na textual label (field `label`) and a `primary` boolean field set to true for the main access to the place.\n\nThe first object in the `access` array is the primary access to the place.\n\nResponse items of other types than `\"place\"` have a maximum of one access position.\n",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/ExtendedAccessPoint"
              } ]
            }
          },
          "driveThrough" : {
            "type" : "boolean",
            "description" : "Set to `true` if the related business allows customers to purchase products \n(or use the service provided by the business) without leaving their cars."
          },
          "distance" : {
            "type" : "integer",
            "description" : "The distance \"as the crow flies\" from the search center to this result item in meters. For example: \"172039\".\n\nWhen searching along a route this is the distance along the route plus the distance from the route polyline to this result item.",
            "format" : "int64",
            "example" : 172039
          },
          "excursionDistance" : {
            "type" : "integer",
            "description" : "Two times the distance from the polyline to this result item in meters while searching along the route",
            "format" : "int64"
          },
          "mapView" : {
            "description" : "The bounding box enclosing the geometric shape (area or line) that an individual result covers. `place` typed results have no `mapView`.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/MapView"
            } ]
          },
          "categories" : {
            "type" : "array",
            "description" : "The list of categories assigned to this place.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Category"
              } ]
            }
          },
          "chains" : {
            "type" : "array",
            "description" : "The list of chains assigned to this place.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Chain"
              } ]
            }
          },
          "references" : {
            "type" : "array",
            "description" : "The list of supplier references available for this place.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/SupplierReference"
              } ]
            }
          },
          "foodTypes" : {
            "type" : "array",
            "description" : "The list of food types assigned to this place.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Category"
              } ]
            }
          },
          "contacts" : {
            "type" : "array",
            "description" : "Contact information like phone, email, WWW.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/ContactInformation"
              } ]
            }
          },
          "openingHours" : {
            "type" : "array",
            "description" : "A list of hours during which the place is open for business.\nThis field is optional: When it is not present, it means that we are lacking data about the place opening hours.\nDays without opening hours have to be considered as closed.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/OpeningHours"
              } ]
            }
          },
          "timeZone" : {
            "description" : "Provides time zone information for this place. (rendered only if `show=tz` is provided.)",
            "allOf" : [ {
              "$ref" : "#/components/schemas/TimeZoneInfo"
            } ]
          },
          "extended" : {
            "description" : "Extended attributes section to contain detailed information for specific result types.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/ExtendedAttribute"
            } ]
          },
          "phonemes" : {
            "description" : "Phonemes for address and place names. (rendered only if `show=phonemes` is provided.)",
            "allOf" : [ {
              "$ref" : "#/components/schemas/PhonemesSection"
            } ]
          },
          "media" : {
            "description" : "**BETA, RESTRICTED** A set of rich media types aggregated from multiple sources. When the current place has no ratings, description or images, this element is not present.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Media"
            } ]
          },
          "streetInfo" : {
            "type" : "array",
            "description" : "Street Details (only rendered if `show=streetInfo` is provided.)",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/StreetInfo"
              } ]
            }
          },
          "accessRestrictions" : {
            "type" : "array",
            "description" : "A list of access restrictions related to a `place` result item.\n\nA place response item has a restricted access when the place is not publicly accessible without a specific authorization, membership or customer relationship.\nExamples: the place is for customers or visitors only.\n\nThis field is optional: When it is not present, it means that the place response item has no known access restriction.",
            "example" : [ {
              "categories" : [ {
                "id" : "800-8500-0177"
              } ],
              "restricted" : true
            } ],
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/AccessRestrictionAttributes"
              } ]
            }
          }
        }
      },
      "OpenSearchReverseGeocodeResponse" : {
        "required" : [ "items" ],
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "description" : "The results are presented as a JSON list of candidates in ranked order (most-likely to least-likely) based on the matched location criteria.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/ReverseGeocodeResultItem"
              } ]
            }
          }
        }
      },
      "ReverseGeocodeResultItem" : {
        "required" : [ "address", "id", "title" ],
        "type" : "object",
        "properties" : {
          "title" : {
            "type" : "string",
            "description" : "The localized display name of this result item."
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the result item. This ID can be used for a Look Up by ID search as well."
          },
          "politicalView" : {
            "type" : "string",
            "description" : "ISO3 country code of the item political view (default for international). This response element is populated when the politicalView parameter is set in the query"
          },
          "resultType" : {
            "type" : "string",
            "enum" : [ "addressBlock", "administrativeArea", "houseNumber", "intersection", "locality", "place", "postalCodePoint", "street" ]
          },
          "houseNumberType" : {
            "type" : "string",
            "description" : "\n\nDescription of supported values:\n\n- **RESTRICTED** `MPA`: A Micro Point Address represents a secondary address for a Point\n  Address; for example, building, floor (level) and suite (unit).\n  Micro Point Addresses can be used to enhance Point Address with\n  greater address detail and higher coordinate accuracy. This result\n  type is only returned by Lookup endpoint or Geocode endpoint when\n  `with=MPA` parameter is provided.\n- `PA`: A Point Address represents an individual address as a point object.\n  Point Addresses are coming from trusted sources. We can say with\n  high certainty that the address exists and at what position. A\n  Point Address result contains two types of coordinates. One is the\n  access point (or navigation coordinates), which is the point to\n  start or end a drive. The other point is the position or display\n  point. This point varies per source and country. The point can be\n  the rooftop point, a point close to the building entry, or a point\n  close to the building, driveway or parking lot that belongs to the\n  building.\n- `interpolated`: An interpolated address. These are approximate positions as a\n  result of a linear interpolation based on address ranges. Address\n  ranges, especially in the USA, are typical per block. For\n  interpolated addresses, we cannot say with confidence that the\n  address exists in reality. But the interpolation provides a good\n  location approximation that brings people in most use cases close\n  to the target location. The access point of an interpolated address\n  result is calculated based on the address range and the road\n  geometry. The position (display) point is pre-configured offset\n  from the street geometry. Compared to Point Addresses, interpolated\n  addresses are less accurate.",
            "enum" : [ "MPA", "PA", "interpolated" ]
          },
          "addressBlockType" : {
            "type" : "string",
            "enum" : [ "block", "subblock" ]
          },
          "localityType" : {
            "type" : "string",
            "enum" : [ "city", "district", "postalCode", "subdistrict" ]
          },
          "administrativeAreaType" : {
            "type" : "string",
            "enum" : [ "country", "county", "state" ]
          },
          "address" : {
            "description" : "Postal address of the result item.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/RgcAddress"
            } ]
          },
          "postalCodeDetails" : {
            "type" : "array",
            "description" : "Additional information for `postalCodePoint` results (only rendered if `show=postalCodeDetails` is\nprovided and only in the countries which are using ZIP codes - USA, PRI, VIR, GUM, MNP, ASM and JPN)",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/PostalCodeDetails_Usps_Zip"
              }, {
                "$ref" : "#/components/schemas/PostalCodeDetails_Usps_ZipPlus4"
              } ]
            }
          },
          "position" : {
            "description" : "The coordinates (latitude, longitude) of a pin on a map corresponding to the searched place.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/DisplayResponseCoordinate"
            } ]
          },
          "access" : {
            "type" : "array",
            "description" : "Coordinates of the response item on a HERE map navigable link (for example, for driving or walking).",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/BasicAccessPoint"
              } ]
            }
          },
          "distance" : {
            "type" : "integer",
            "description" : "The distance \"as the crow flies\" from the search center to this result item in meters.\nFor example: \"172039\"",
            "format" : "int64",
            "example" : 172039
          },
          "mapView" : {
            "description" : "The bounding box enclosing the geometric shape (area or line) that an individual result covers. `place` typed results have no `mapView`.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/MapView"
            } ]
          },
          "categories" : {
            "type" : "array",
            "description" : "The list of categories assigned to this place.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Category"
              } ]
            }
          },
          "foodTypes" : {
            "type" : "array",
            "description" : "The list of food types assigned to this place.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Category"
              } ]
            }
          },
          "houseNumberFallback" : {
            "type" : "boolean",
            "description" : "If true, indicates that the requested house number was corrected to match the nearest known house number. This field is visible only when the value is true."
          },
          "estimatedPointAddress" : {
            "type" : "boolean",
            "description" : "If true, indicates that the coordinates of `position` and `access` points of the Point Address are\nestimated.\nThis field is visible only for result items with resultType `houseNumber` and houseNumberType `PA` and\nonly when the value is `true`"
          },
          "timeZone" : {
            "description" : "Provides time zone information for this place. (rendered only if `show=tz` is provided.)",
            "allOf" : [ {
              "$ref" : "#/components/schemas/TimeZoneInfo"
            } ]
          },
          "streetInfo" : {
            "type" : "array",
            "description" : "Street Details (only rendered if `show=streetInfo` is provided.)",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/StreetInfo"
              } ]
            }
          },
          "countryInfo" : {
            "description" : "Country Details (only rendered if `show=countryInfo` is provided.)",
            "allOf" : [ {
              "$ref" : "#/components/schemas/CountryInfo"
            } ]
          },
          "estimatedAreaFallback" : {
            "type" : "boolean",
            "description" : "**ALPHA** Indicates that the admin result is not retrieved from a carto shape but from the closest street.\n(Only rendered, if `with=estimatedAreaFallback` is provided.)"
          },
          "mapReferences" : {
            "description" : "Return the map references of the location objects.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/MapReferenceSection"
            } ]
          },
          "related" : {
            "type" : "array",
            "description" : "List of related objects",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/RelatedAddress"
              } ]
            }
          },
          "navigationAttributes" : {
            "description" : "Return requested additional attributes for segments in a road network if `showNavAttributes` parameter\nis specified with valid value and relevant data is available. The value is a comma-separated list\nof the sections to be enabled.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/NavigationAttributes"
            } ]
          }
        }
      },
      "RgcAddress" : {
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "string",
            "description" : "Assembled address value built out of the address components according to the regional postal rules.\nThese are the same rules for all endpoints. It may not include all the input terms. For example:\n\"Schulstra√üe 4, 32547 Bad Oeynhausen, Germany\""
          },
          "countryCode" : {
            "type" : "string",
            "description" : "A three-letter country code. For example: \"DEU\""
          },
          "countryName" : {
            "type" : "string",
            "description" : "The localised country name. For example: \"Deutschland\""
          },
          "stateCode" : {
            "type" : "string",
            "description" : "A state code or state name abbreviation ‚Äì country specific. For example, in the United States it is the two letter state abbreviation: \"CA\" for California."
          },
          "state" : {
            "type" : "string",
            "description" : "The state division of a country. For example: \"North Rhine-Westphalia\""
          },
          "countyCode" : {
            "type" : "string",
            "description" : "A county code or county name abbreviation ‚Äì country specific. For example, for Italy it is the province abbreviation: \"RM\" for Rome."
          },
          "county" : {
            "type" : "string",
            "description" : "A division of a state; typically, a secondary-level administrative division of a country or equivalent."
          },
          "city" : {
            "type" : "string",
            "description" : "The name of the primary locality of the place. For example: \"Bad Oyenhausen\""
          },
          "district" : {
            "type" : "string",
            "description" : "A division of city; typically an administrative unit within a larger city or a customary name of a city's neighborhood. For example: \"Bad Oyenhausen\""
          },
          "subdistrict" : {
            "type" : "string",
            "description" : "A subdivision of a district. For example: \"Minden-L√ºbbecke\""
          },
          "street" : {
            "type" : "string",
            "description" : "Name of street. For example: \"Schulstrasse\""
          },
          "block" : {
            "type" : "string",
            "description" : "Name of block."
          },
          "subblock" : {
            "type" : "string",
            "description" : "Name of sub-block."
          },
          "postalCode" : {
            "type" : "string",
            "description" : "An alphanumeric string included in a postal address to facilitate mail sorting, such as post code, postcode, or ZIP code. For example: \"32547\""
          },
          "houseNumber" : {
            "type" : "string",
            "description" : "House number. For example: \"4\""
          },
          "building" : {
            "type" : "string",
            "description" : "Name of building."
          },
          "unit" : {
            "type" : "string",
            "description" : "Secondary unit information. It may include building, floor (level), and suite (unit) details. This field is returned by Geocode and Lookup endpoints only."
          }
        }
      },
      "OpenSearchMultiReverseGeocodeResponse" : {
        "required" : [ "results" ],
        "type" : "object",
        "properties" : {
          "results" : {
            "type" : "array",
            "description" : "The results for the individual queries which either contain items or an error description",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/OpenSearchMultiReverseGeocodeErrorResult"
              }, {
                "$ref" : "#/components/schemas/OpenSearchMultiReverseGeocodeResponseItem"
              } ]
            }
          }
        }
      },
      "OpenSearchMultiReverseGeocodeErrorResult" : {
        "required" : [ "error", "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The ID for the query provided by the client"
          },
          "error" : {
            "description" : "Error information",
            "allOf" : [ {
              "$ref" : "#/components/schemas/MultiResultErrorSection"
            } ]
          }
        }
      },
      "MultiResultErrorSection" : {
        "required" : [ "title" ],
        "type" : "object",
        "properties" : {
          "title" : {
            "type" : "string",
            "description" : "Human-readable error description"
          }
        }
      },
      "OpenSearchMultiReverseGeocodeResponseItem" : {
        "required" : [ "id", "items" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The ID for the query provided by the client"
          },
          "items" : {
            "type" : "array",
            "description" : "The results are presented as a JSON list of candidates in ranked order (most-likely to least-likely) based on the matched location criteria.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/ReverseGeocodeResultItem"
              } ]
            }
          }
        }
      },
      "LookupResponse" : {
        "required" : [ "address", "id", "title" ],
        "type" : "object",
        "properties" : {
          "title" : {
            "type" : "string",
            "description" : "The localized display name of this result item."
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the result item. This ID can be used for a Look Up by ID search as well."
          },
          "closedPermanently" : {
            "type" : "string",
            "description" : "**ALPHA** \n* `maybe`: The place has diminished confidence in the source data and is likely to be closed.\n* `yes`: The place is actually closed.\n",
            "enum" : [ "maybe", "yes" ]
          },
          "politicalView" : {
            "type" : "string",
            "description" : "ISO3 country code of the item political view (default for international). This response element is populated when the politicalView parameter is set in the query"
          },
          "resultType" : {
            "type" : "string",
            "enum" : [ "addressBlock", "administrativeArea", "houseNumber", "intersection", "locality", "place", "postalCodePoint", "street" ]
          },
          "houseNumberType" : {
            "type" : "string",
            "description" : "\n\nDescription of supported values:\n\n- **RESTRICTED** `MPA`: A Micro Point Address represents a secondary address for a Point\n  Address; for example, building, floor (level) and suite (unit).\n  Micro Point Addresses can be used to enhance Point Address with\n  greater address detail and higher coordinate accuracy. This result\n  type is only returned by Lookup endpoint or Geocode endpoint when\n  `with=MPA` parameter is provided.\n- `PA`: A Point Address represents an individual address as a point object.\n  Point Addresses are coming from trusted sources. We can say with\n  high certainty that the address exists and at what position. A\n  Point Address result contains two types of coordinates. One is the\n  access point (or navigation coordinates), which is the point to\n  start or end a drive. The other point is the position or display\n  point. This point varies per source and country. The point can be\n  the rooftop point, a point close to the building entry, or a point\n  close to the building, driveway or parking lot that belongs to the\n  building.\n- `interpolated`: An interpolated address. These are approximate positions as a\n  result of a linear interpolation based on address ranges. Address\n  ranges, especially in the USA, are typical per block. For\n  interpolated addresses, we cannot say with confidence that the\n  address exists in reality. But the interpolation provides a good\n  location approximation that brings people in most use cases close\n  to the target location. The access point of an interpolated address\n  result is calculated based on the address range and the road\n  geometry. The position (display) point is pre-configured offset\n  from the street geometry. Compared to Point Addresses, interpolated\n  addresses are less accurate.",
            "enum" : [ "MPA", "PA", "interpolated" ]
          },
          "addressBlockType" : {
            "type" : "string",
            "enum" : [ "block", "subblock" ]
          },
          "localityType" : {
            "type" : "string",
            "enum" : [ "city", "district", "postalCode", "subdistrict" ]
          },
          "administrativeAreaType" : {
            "type" : "string",
            "enum" : [ "country", "county", "state" ]
          },
          "houseNumberFallback" : {
            "type" : "boolean",
            "description" : "If true, indicates that the requested house number was corrected to match the nearest known house number. This field is visible only when the value is true."
          },
          "estimatedPointAddress" : {
            "type" : "boolean",
            "description" : "If true, indicates that the coordinates of `position` and `access` points of the Point Address are\nestimated.\nThis field is visible only for result items with resultType `houseNumber` and houseNumberType `PA` and\nonly when the value is `true`"
          },
          "address" : {
            "description" : "Postal address of the result item.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Address"
            } ]
          },
          "postalCodeDetails" : {
            "type" : "array",
            "description" : "Additional information for `postalCodePoint` results (only rendered if `show=postalCodeDetails` is\nprovided and only in the countries which are using ZIP codes - USA, PRI, VIR, GUM, MNP, ASM and JPN)",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/PostalCodeDetails_JapanPost"
              }, {
                "$ref" : "#/components/schemas/PostalCodeDetails_Usps_Zip"
              }, {
                "$ref" : "#/components/schemas/PostalCodeDetails_Usps_ZipPlus4"
              } ]
            }
          },
          "position" : {
            "description" : "The coordinates (latitude, longitude) of a pin on a map corresponding to the searched place.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/DisplayResponseCoordinate"
            } ]
          },
          "access" : {
            "type" : "array",
            "description" : "Coordinates of the response item on a HERE map navigable link (for example, for driving or walking).\n\nWhen a response item is of type `\"place\"`, it can contain more than one access object.\nEach access object contains a position (`lat`, `lng`), with potentially a type (field `type`),\na textual label (field `label`) and a `primary` boolean field set to true for the main access to the place.\n\nThe first object in the `access` array is the primary access to the place.\n\nResponse items of other types than `\"place\"` have a maximum of one access position.\n",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/ExtendedAccessPoint"
              } ]
            }
          },
          "driveThrough" : {
            "type" : "boolean",
            "description" : "Set to `true` if the related business allows customers to purchase products \n(or use the service provided by the business) without leaving their cars."
          },
          "mapView" : {
            "description" : "The bounding box enclosing the geometric shape (area or line) that an individual result covers. `place` typed results have no `mapView`.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/MapView"
            } ]
          },
          "categories" : {
            "type" : "array",
            "description" : "The list of categories assigned to this place.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Category"
              } ]
            }
          },
          "chains" : {
            "type" : "array",
            "description" : "The list of chains assigned to this place.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Chain"
              } ]
            }
          },
          "references" : {
            "type" : "array",
            "description" : "The list of supplier references available for this place.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/SupplierReference"
              } ]
            }
          },
          "foodTypes" : {
            "type" : "array",
            "description" : "The list of food types assigned to this place.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/Category"
              } ]
            }
          },
          "contacts" : {
            "type" : "array",
            "description" : "Contact information like phone, email, WWW.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/ContactInformation"
              } ]
            }
          },
          "openingHours" : {
            "type" : "array",
            "description" : "A list of hours during which the place is open for business.\nThis field is optional: When it is not present, it means that we are lacking data about the place opening hours.\nDays without opening hours have to be considered as closed.",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/OpeningHours"
              } ]
            }
          },
          "timeZone" : {
            "description" : "Provides time zone information for this place. (rendered only if `show=tz` is provided.)",
            "allOf" : [ {
              "$ref" : "#/components/schemas/TimeZoneInfo"
            } ]
          },
          "media" : {
            "description" : "**BETA, RESTRICTED** A set of rich media types aggregated from multiple sources. When the current place has no ratings, description or images, this element is not present.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Media"
            } ]
          },
          "extended" : {
            "description" : "Extended attributes section to contain detailed information for specific result types.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/ExtendedAttribute"
            } ]
          },
          "phonemes" : {
            "description" : "Phonemes for address and place names. (rendered only if `show=phonemes` is provided.)",
            "allOf" : [ {
              "$ref" : "#/components/schemas/PhonemesSection"
            } ]
          },
          "streetInfo" : {
            "type" : "array",
            "description" : "Street Details (only rendered if `show=streetInfo` is provided.)",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/StreetInfo"
              } ]
            }
          },
          "countryInfo" : {
            "description" : "Country Details (only rendered if `show=countryInfo` is provided.)",
            "allOf" : [ {
              "$ref" : "#/components/schemas/CountryInfo"
            } ]
          },
          "mapReferences" : {
            "description" : "Return the map references of the location objects.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/MapReferenceSection"
            } ]
          },
          "related" : {
            "type" : "array",
            "description" : "List of related objects",
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/RelatedAddress"
              } ]
            }
          },
          "navigationAttributes" : {
            "description" : "Return requested additional attributes for segments in a road network if `showNavAttributes` parameter\nis specified with valid value and relevant data is available. The value is a comma-separated list\nof the sections to be enabled.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/NavigationAttributes"
            } ]
          },
          "accessRestrictions" : {
            "type" : "array",
            "description" : "A list of access restrictions related to a `place` result item.\n\nA place response item has a restricted access when the place is not publicly accessible without a specific authorization, membership or customer relationship.\nExamples: the place is for customers or visitors only.\n\nThis field is optional: When it is not present, it means that the place response item has no known access restriction.",
            "example" : [ {
              "categories" : [ {
                "id" : "800-8500-0177"
              } ],
              "restricted" : true
            } ],
            "items" : {
              "allOf" : [ {
                "$ref" : "#/components/schemas/AccessRestrictionAttributes"
              } ]
            }
          }
        }
      },
      "evStation" : {
        "type" : "object",
        "properties" : {
          "paymentMethodIds" : {
            "type" : "array",
            "description" : "Filter to retrieve Electric Vehicle charging stations by supported payment types\n\nDescription of supported values:\n\n- `authByCarPlugAndCharge`: indicates whether this EV station supports Plug&Charge.ISO 15118 Plug&Charge enables drivers to plug in and charge up instantly using automatic EV-to-charging station authentication technology.\n- `creditCard`: indicates if this EV station accepts credit card payment or not.\n- `debitCard`: indicates if this EV station accepts debit card payment or not.\n- `onlineApplePay`: indicates whether this EV station accepts Apple Pay (TM) authentication and payment method.\n- `onlineGooglePay`:  indicates whether this EV station accepts Google Pay (TM) authentication and payment method.\n- `onlinePaypal`: indicates whether this EV station accepts PayPal (TM) authentication and payment method.\n- `operatorApp`: indicates whether this EV station support authentication and payment through an app from the Charging Point Operator.",
            "items" : {
              "type" : "string",
              "enum" : [ "authByCarPlugAndCharge", "creditCard", "debitCard", "onlineApplePay", "onlineGooglePay", "onlinePaypal", "operatorApp" ]
            }
          },
          "eMobilityServiceProviderPartnerIds" : {
            "type" : "array",
            "description" : "Filter to retrieve Electric Vehicle charging stations by value of e-Mobility Service Providers\n(eMSP) partner ID. EV roaming enables EV drivers to be charged using subscription cards from eMSP.\nSeveral partner IDs can be set as value this filter, separated with a comma.\nThe list of eMSP partner IDs supported by this filter can be retrieved using the EV Charge Points API\n[`roaming`](https://www.here.com/docs/bundle/ev-charge-points-api-developer-guide/page/topics/resource-roamings.html)\nresource.",
            "example" : [ "1f351b84-cca5-11ed-8155-42010aa40002", "1f39ad02-cca5-11ed-9d1a-42010aa40002" ],
            "items" : {
              "type" : "string"
            }
          },
          "current" : {
            "type" : "string",
            "description" : "Filter to retrieve Electric Vehicle charging stations by current type\n\nDescription of supported values:\n\n- `AC`: Alternating current\n- `DC`: Direct current",
            "example" : "AC",
            "enum" : [ "AC", "DC" ]
          },
          "supplierNames" : {
            "type" : "array",
            "description" : "Filter to retrieve Electric Vehicle charging stations with at least one connector of supplier name in the filter",
            "items" : {
              "type" : "string"
            }
          },
          "connectorTypeIds" : {
            "type" : "array",
            "description" : "Filter to retrieve Electric Vehicle charging stations with at least a connector type ID\n\nDescription of supported values:\n\n- `10`: Domestic plug/socket type E+F (CEE 7/7)\n- `11`: Domestic plug/socket type G (BS 1363, IS 401 & 411, MS 58)\n- `12`: Domestic plug/socket type H (SI 32)\n- `13`: Domestic plug/socket type I (AS/NZS 3112)\n- `14`: Domestic plug/socket type I (CPCS-CCC)\n- `15`: Domestic plug/socket type I (IRAM 2073)\n- `20`: Domestic plug/socket type K (Section 107-2-D1)\n- `21`: Domestic plug/socket type K (Thailand TIS 166 - 2549)\n- `22`: Domestic plug/socket type L (CEI 23-16/VII)\n- `23`: Domestic plug/socket type M (South African 15 A/250 V)\n- `24`: Domestic plug/socket type IEC 60906-1 (3 pin)\n- `25`: AVCON Connector\n- `29`: JEVS G 105 (CHAdeMO)\n- `30`: IEC 62196-2 type 1 (SAE J1772)\n- `31`: IEC 62196-2 type 2 (Mennekes)\n- `32`: IEC 62196-2 type 3c (SCAME)\n- `33`: IEC 62196-3 type 1 combo (SAE J1772)\n- `34`: IEC 62196-3 type 2 combo (Mennekes)\n- `35`: IEC 60309 : industrial P + N + E (AC)\n- `36`: IEC 60309 : industrial 3P + E + N (AC)\n- `37`: IEC 60309 : industrial 2P + E (AC)\n- `42`: Domestic plug/socket type J (SEV 1011) (T13, T23)\n- `43`: Tesla Connector\n- `46`: IEC 60309 : industrial 2P + E (DC)\n- `48`: Domestic plug/socket type A (NEMA 1-15, 2 pins)\n- `49`: Domestic plug/socket type C (CEE 7/17, 2 pins)\n- `5`: Domestic plug/socket type B (NEMA 5-15)\n- `50`: IEC 62196-2 type 3a (SCAME)\n- `52`: GB/T (Chinese) AC connector\n- `53`: GB/T (Chinese) DC connector\n- `6`: Domestic plug/socket type B (NEMA 5-20)\n- `7`: Domestic plug/socket type D (BS 546 (3 pin))\n- `8`: Domestic plug/socket type E (CEE 7/5)\n- `9`: Domestic plug/socket type F (CEE 7/4 (Schuko))",
            "items" : {
              "type" : "string",
              "enum" : [ "10", "11", "12", "13", "14", "15", "20", "21", "22", "23", "24", "25", "29", "30", "31", "32", "33", "34", "35", "36", "37", "42", "43", "46", "48", "49", "5", "50", "52", "53", "6", "7", "8", "9" ]
            }
          },
          "minPower" : {
            "minimum" : 0.0,
            "exclusiveMinimum" : true,
            "type" : "number",
            "description" : "Minimum charging power in KW that each returned EV station must support in at least one of its supply element",
            "format" : "double",
            "example" : 6.6
          }
        }
      },
      "body" : {
        "type" : "object",
        "properties" : {
          "route" : {
            "type" : "string",
            "description" : "**BETA** Select within a geographic corridor. This is a hard filter. Results will be returned if they are located within the specified area.\n\nA `route` is defined by a [Flexible Polyline Encoding](https://github.com/heremaps/flexible-polyline),\n followed by an optional width, represented by a sub-parameter \"w\".\n\nFormat: `{route};w={width}`\n\nIn regular expression syntax, the values of `route` look like:\n\n`[a-zA-Z0-9_-]+(;w=\\d+)?`\n\n\"[a-zA-Z0-9._-]+\" is the encoded flexible polyline.\n\n\"w=\\d+\" is the optional width. The width is specified in meters from the center of the path. If no width is provided, the default is 1000 meters.\n\nType: `{Flexible Polyline Encoding};w={integer}`\n\nThe following constraints apply:\n * A `route` MUST contain at least two points (one segment).\n * A `route` MUST NOT contain more than 2,000 points.\n * A `route` MUST NOT have a width of more than 50,000 meters.\n\nExamples:\n * `BFoz5xJ67i1B1B7PzIhaxL7Y`\n * `BFoz5xJ67i1B1B7PzIhaxL7Y;w=5000`\n * `BlD05xgKuy2xCCx9B7vUCl0OhnRC54EqSCzpEl-HCxjD3pBCiGnyGCi2CvwFCsgD3nDC4vB6eC;w=2000`\n\nNote: The last example above can be decoded (using the Python class [here](https://github.com/heremaps/flexible-polyline/tree/master/python) as follows:\n\n```\n>>> import flexpolyline\n>>> polyline = 'BlD05xgKuy2xCCx9B7vUCl0OhnRC54EqSCzpEl-HCxjD3pBCiGnyGCi2CvwFCsgD3nDC4vB6eC'\n>>> flexpolyline.decode(polyline)\n[(52.51994, 13.38663, 1.0), (52.51009, 13.28169, 2.0), (52.43518, 13.19352, 3.0), (52.41073, 13.19645, 4.0),\n (52.38871, 13.15578, 5.0), (52.37278, 13.1491, 6.0), (52.37375, 13.11546, 7.0), (52.38752, 13.08722, 8.0),\n (52.40294, 13.07062, 9.0), (52.41058, 13.07555, 10.0)]\n```\n"
          }
        }
      },
      "body_1" : {
        "type" : "object",
        "properties" : {
          "route" : {
            "type" : "string",
            "description" : "**BETA** Select within a geographic corridor. This is a hard filter. Results will be returned if they are located within the specified area.\n\nA `route` is defined by a [Flexible Polyline Encoding](https://github.com/heremaps/flexible-polyline),\n followed by an optional width, represented by a sub-parameter \"w\".\n\nFormat: `{route};w={width}`\n\nIn regular expression syntax, the values of `route` look like:\n\n`[a-zA-Z0-9_-]+(;w=\\d+)?`\n\n\"[a-zA-Z0-9._-]+\" is the encoded flexible polyline.\n\n\"w=\\d+\" is the optional width. The width is specified in meters from the center of the path. If no width is provided, the default is 1000 meters.\n\nType: `{Flexible Polyline Encoding};w={integer}`\n\nThe following constraints apply:\n * A `route` MUST contain at least two points (one segment).\n * A `route` MUST NOT contain more than 2,000 points.\n * A `route` MUST NOT have a width of more than 50,000 meters.\n\nExamples:\n * `BFoz5xJ67i1B1B7PzIhaxL7Y`\n * `BFoz5xJ67i1B1B7PzIhaxL7Y;w=5000`\n * `BlD05xgKuy2xCCx9B7vUCl0OhnRC54EqSCzpEl-HCxjD3pBCiGnyGCi2CvwFCsgD3nDC4vB6eC;w=2000`\n\nNote: The last example above can be decoded (using the Python class [here](https://github.com/heremaps/flexible-polyline/tree/master/python) as follows:\n\n```\n>>> import flexpolyline\n>>> polyline = 'BlD05xgKuy2xCCx9B7vUCl0OhnRC54EqSCzpEl-HCxjD3pBCiGnyGCi2CvwFCsgD3nDC4vB6eC'\n>>> flexpolyline.decode(polyline)\n[(52.51994, 13.38663, 1.0), (52.51009, 13.28169, 2.0), (52.43518, 13.19352, 3.0), (52.41073, 13.19645, 4.0),\n (52.38871, 13.15578, 5.0), (52.37278, 13.1491, 6.0), (52.37375, 13.11546, 7.0), (52.38752, 13.08722, 8.0),\n (52.40294, 13.07062, 9.0), (52.41058, 13.07555, 10.0)]\n```\n"
          }
        }
      },
      "body_2" : {
        "type" : "object",
        "properties" : {
          "route" : {
            "type" : "string",
            "description" : "**BETA** Select within a geographic corridor. This is a hard filter. Results will be returned if they are located within the specified area.\n\nA `route` is defined by a [Flexible Polyline Encoding](https://github.com/heremaps/flexible-polyline),\n followed by an optional width, represented by a sub-parameter \"w\".\n\nFormat: `{route};w={width}`\n\nIn regular expression syntax, the values of `route` look like:\n\n`[a-zA-Z0-9_-]+(;w=\\d+)?`\n\n\"[a-zA-Z0-9._-]+\" is the encoded flexible polyline.\n\n\"w=\\d+\" is the optional width. The width is specified in meters from the center of the path. If no width is provided, the default is 1000 meters.\n\nType: `{Flexible Polyline Encoding};w={integer}`\n\nThe following constraints apply:\n * A `route` MUST contain at least two points (one segment).\n * A `route` MUST NOT contain more than 2,000 points.\n * A `route` MUST NOT have a width of more than 50,000 meters.\n\nExamples:\n * `BFoz5xJ67i1B1B7PzIhaxL7Y`\n * `BFoz5xJ67i1B1B7PzIhaxL7Y;w=5000`\n * `BlD05xgKuy2xCCx9B7vUCl0OhnRC54EqSCzpEl-HCxjD3pBCiGnyGCi2CvwFCsgD3nDC4vB6eC;w=2000`\n\nNote: The last example above can be decoded (using the Python class [here](https://github.com/heremaps/flexible-polyline/tree/master/python) as follows:\n\n```\n>>> import flexpolyline\n>>> polyline = 'BlD05xgKuy2xCCx9B7vUCl0OhnRC54EqSCzpEl-HCxjD3pBCiGnyGCi2CvwFCsgD3nDC4vB6eC'\n>>> flexpolyline.decode(polyline)\n[(52.51994, 13.38663, 1.0), (52.51009, 13.28169, 2.0), (52.43518, 13.19352, 3.0), (52.41073, 13.19645, 4.0),\n (52.38871, 13.15578, 5.0), (52.37278, 13.1491, 6.0), (52.37375, 13.11546, 7.0), (52.38752, 13.08722, 8.0),\n (52.40294, 13.07062, 9.0), (52.41058, 13.07555, 10.0)]\n```\n"
          }
        }
      }
    },
    "parameters" : {
      "atBrowse" : {
        "name" : "at",
        "in" : "query",
        "description" : "Specify the center of the search context expressed as coordinates\n\nRequired parameter for endpoints that are expected to rank results by distance from the explicitly\n specified search center\n\nFormat: `{latitude},{longitude}`\n\nType: `{decimal},{decimal}`\n\nExample: `-13.163068,-72.545128` (Machu Picchu Mountain, Peru)\n",
        "required" : true,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string",
          "example" : "52.5308,13.3856"
        }
      },
      "id" : {
        "name" : "id",
        "in" : "query",
        "description" : "Location ID, which is the ID of a result item eg. of a Discover request",
        "required" : true,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string",
          "example" : "here:pds:place:276u33db-8097f3194e4b411081b761ea9a366776"
        }
      },
      "qAutocomplete" : {
        "name" : "q",
        "in" : "query",
        "description" : "Enter a free-text query\n\nExamples:\n * `ber`, `berl`, `berli`, ...\n * `berlin+p`, `berlin+paris`, `berlin+parise`, ...\n * `berlin+pariser+20`\n\n _Note: Whitespace, urls, email addresses, or other out-of-scope queries will yield no results._\n",
        "required" : true,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string",
          "example" : "Berlin Pariser 20"
        }
      },
      "qAutosuggest" : {
        "name" : "q",
        "in" : "query",
        "description" : "Enter a free-text query\n\nExamples:\n * `res`, `rest`, `resta`, `restau`, ...\n * `berlin+bran`, `berlin+brand`, `berlin+branden`, ...\n * `New+Yok+Giants`\n\n _Note: Whitespace, urls, email addresses, or other out-of-scope queries will yield no results.\n",
        "required" : true,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string",
          "example" : "Eismieze Berlin"
        }
      },
      "qDiscover" : {
        "name" : "q",
        "in" : "query",
        "description" : "Enter a free-text query\n\nExamples:\n * `125, Berliner, berlin`\n * `Beacon, Boston, Hospital`\n * `Schnurrbart German Pub and Restaurant, Hong Kong`\n\n _Note: Whitespace, urls, email addresses, or other out-of-scope queries will yield no results.\n",
        "required" : true,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string",
          "example" : "Eismieze Berlin"
        }
      },
      "addressNamesMode" : {
        "name" : "addressNamesMode",
        "in" : "query",
        "description" : "This option allows users to choose between displaying normalized or matched address fields in the response,\naffecting the names in the address block, the address label, and the result title.\nThis option is relevant when there is a difference between administrative naming and postal or common naming conventions, or when addressing with alternative street names.\nBy default, geocoding results provide matched names for administrative places and normalized (official) names for street names.\n\nDescription of supported values:\n\n- `matched`: The service returns matched names for address fields.\n- `normalized`: The service returns normalized (primary) names for address fields.",
        "required" : false,
        "style" : "form",
        "explode" : false,
        "schema" : {
          "type" : "string",
          "enum" : [ "matched", "normalized" ]
        }
      },
      "atAutocompleteGeocode" : {
        "name" : "at",
        "in" : "query",
        "description" : "Specify the center of the search context expressed as coordinates.\n\nFormat: `{latitude},{longitude}`\n\nType: `{decimal},{decimal}`\n\nExample: `-13.163068,-72.545128` (Machu Picchu Mountain, Peru)\n",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "atAutosuggestDiscover" : {
        "name" : "at",
        "in" : "query",
        "description" : "Specify the center of the search context expressed as coordinates\n\nFormat: `{latitude},{longitude}`\n\nType: `{decimal},{decimal}`\n\nExample: `-13.163068,-72.545128` (Machu Picchu Mountain, Peru)\n\nThe following constraints apply:\n\n * One of \"at\", \"in=circle\" or \"in=bbox\" is required.\n\n * Parameters \"at\", \"in=circle\" and \"in=bbox\" are mutually exclusive. Only one of them is allowed.\n",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string",
          "example" : "52.5308,13.3856"
        }
      },
      "atRevgeocode" : {
        "name" : "at",
        "in" : "query",
        "description" : "Specify the center of the search context expressed as coordinates.\n\nFormat: `{latitude},{longitude}`\n\nType: `{decimal},{decimal}`\n\nExample: `-13.163068,-72.545128` (Machu Picchu Mountain, Peru)\n\nThe following constraints apply:\n\n * Either \"at\" or \"in=circle\" is required.\n\n * Parameters \"at\" and \"in=circle\" are mutually exclusive. Only one of them is allowed.\n",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string",
          "example" : "52.5308,13.3856"
        }
      },
      "bearing" : {
        "name" : "bearing",
        "in" : "query",
        "description" : "Takes the \"bearing\" into account for matching nearby street results.\n\nBearing expresses the direction in which an asset is heading in degrees starting at true north and continuing clockwise around the compass.\nNorth is 0 degrees, east is 90 degrees, south is 180 degrees, west is 270 degrees. Values are expected to be of type Integer.\n\nWhen this parameter is provided, all results will be of type `street`. It is not necessary to provide `types=street` explicitly.\n\nThe following constraints apply:\n\n* If a `types` parameter is provided, the only accepted value is `types=street`.\n\n",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "maximum" : 359,
          "minimum" : 0,
          "type" : "integer",
          "format" : "int32",
          "example" : 42
        }
      },
      "categories" : {
        "name" : "categories",
        "in" : "query",
        "description" : "Category filter consisting of a comma-separated list of category-IDs for Categories defined in the HERE Places Category System, described\nin the Appendix to the HERE Search Developer Guide. Places with any assigned categories that match any of the requested categories are\nincluded in the response.\n\nAn exclamation mark \"`!`\" in front of a category ID causes that category to be excluded from the results.\nIt is possible to mix excluded and included categories in the request - e.g. searching for places that are restaurants but not fast food restaurants.\nAn exclusion will always win over an inclusion.\n",
        "required" : false,
        "style" : "form",
        "explode" : false,
        "schema" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "chains" : {
        "name" : "chains",
        "in" : "query",
        "description" : "Chain filter consisting of a comma-separated list of chain-IDs for Chains defined in the HERE Places Chain System, described\nin the Appendix to the HERE Search Developer Guide. Places with any assigned chains that match any of the requested chains are\nincluded in the response.\n\nAn exclamation mark \"`!`\" in front of a chain ID causes that chain to be excluded from the results.\nIt is possible to mix excluded and included chains in the request - e.g. searching for places that are amazon but not wholefoods.\nAn exclusion will always win over an inclusion.\n",
        "required" : false,
        "style" : "form",
        "explode" : false,
        "schema" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "foodTypes" : {
        "name" : "foodTypes",
        "in" : "query",
        "description" : "FoodType filter consisting of a comma-separated list of cuisine-IDs for FoodTypes defined in the HERE Places Cuisine System, described\nin the Appendix to the HERE Search Developer Guide. Places with any assigned foodTypes that match any of the requested foodTypes are\nincluded in the response.\n\nAn exclamation mark \"`!`\" in front of a cuisine ID causes that foodType to be excluded from the results.\nIt is possible to mix excluded and included foodTypes in the request - e.g. searching for places that serve italian but not chinese.\nAn exclusion will always win over an inclusion.\n",
        "required" : false,
        "style" : "form",
        "explode" : false,
        "schema" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "inAutocomplete" : {
        "name" : "in",
        "in" : "query",
        "description" : "Search within a geographic area. This is a hard filter. Results will be returned if they are located within the specified area.\n\nA geographic area can be\n\n * a country (or multiple countries), provided as comma-separated [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country codes\n\n   The country codes are to be provided in all uppercase.\n\n   Format: `countryCode:{countryCode}[,{countryCode}]*`\n\n   Examples:\n    * `countryCode:USA`\n    * `countryCode:CAN,MEX,USA`\n\n\n * a circular area, provided as latitude, longitude, and radius (in meters)\n\n   Format: `circle:{latitude},{longitude};r={radius}`\n\n   Type: `circle:{decimal},{decimal};r={integer}`\n\n   Example: `circle:52.53,13.38;r=10000`\n\n\n * a bounding box, provided as _west longitude_, _south latitude_, _east longitude_, _north latitude_\n\n   Format: `bbox:{west longitude},{south latitude},{east longitude},{north latitude}`\n\n   Example: `bbox:13.08836,52.33812,13.761,52.6755`\n\n\nThe following constraints apply:\n\n * Parameters \"at\", \"in=circle\" and \"in=bbox\" are mutually exclusive. Only one of them is allowed.\n",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "inAutosuggestDiscover" : {
        "name" : "in",
        "in" : "query",
        "description" : "Search within a geographic area. This is a hard filter. Results will be returned if they are located within the specified area.\n\nA geographic area can be\n\n * a country (or multiple countries), provided as comma-separated [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country codes\n\n   The country codes are to be provided in all uppercase.\n\n   Format: `countryCode:{countryCode}[,{countryCode}]*`\n\n   Examples:\n    * `countryCode:USA`\n    * `countryCode:CAN,MEX,USA`\n\n\n * a circular area, provided as latitude, longitude, and radius (in meters)\n\n   Format: `circle:{latitude},{longitude};r={radius}`\n\n   Type: `circle:{decimal},{decimal};r={integer}`\n\n   Example: `circle:52.53,13.38;r=10000`\n\n\n * a bounding box, provided as _west longitude_, _south latitude_, _east longitude_, _north latitude_\n\n   Format: `bbox:{west longitude},{south latitude},{east longitude},{north latitude}`\n\n   Example: `bbox:13.08836,52.33812,13.761,52.6755`\n\n\nThe following constraints apply:\n\n * One of \"at\", \"in=circle\" or \"in=bbox\" is required.\n\n * Parameters \"at\", \"in=circle\" and \"in=bbox\" are mutually exclusive. Only one of them is allowed.\n\n * The \"in=countryCode\" parameter must be accompanied by exactly one of \"at\", \"in=circle\" or \"in=bbox\".\n",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "inBrowse" : {
        "name" : "in",
        "in" : "query",
        "description" : "Search within a geographic area. This is a hard filter. Results will be returned if they are located within the specified area.\n\nA geographic area can be\n\n * a country (or multiple countries), provided as comma-separated [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country codes\n\n   The country codes are to be provided in all uppercase.\n\n   Format: `countryCode:{countryCode}[,{countryCode}]*`\n\n   Examples:\n    * `countryCode:USA`\n    * `countryCode:CAN,MEX,USA`\n\n\n * a circular area, provided as latitude, longitude, and radius (in meters)\n\n   Format: `circle:{latitude},{longitude};r={radius}`\n\n   Type: `circle:{decimal},{decimal};r={integer}`\n\n   Example: `circle:52.53,13.38;r=10000`\n\n\n * a bounding box, provided as _west longitude_, _south latitude_, _east longitude_, _north latitude_\n\n   Format: `bbox:{west longitude},{south latitude},{east longitude},{north latitude}`\n\n   Example: `bbox:13.08836,52.33812,13.761,52.6755`\n\n\nThe following constraints apply:\n\n * Parameters \"in=circle\" and \"in=bbox\" are mutually exclusive. Only one of them is allowed.\n",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "inGeocode" : {
        "name" : "in",
        "in" : "query",
        "description" : "Search within a geographic area. This is a hard filter. Results will be returned if they are located within the specified area.\n\nA geographic area can be\n\n * a country (or multiple countries), provided as comma-separated [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country codes\n\n   The country codes are to be provided in all uppercase.\n\n   Format: `countryCode:{countryCode}[,{countryCode}]*`\n\n   Examples:\n    * `countryCode:USA`\n    * `countryCode:CAN,MEX,USA`\n\n",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "inRevgeocode" : {
        "name" : "in",
        "in" : "query",
        "description" : "Search within a geographic area. This is a hard filter. Results will be returned if they are located within the specified area.\n\nA geographic area can be\n\n * a circular area, provided as latitude, longitude, and radius (in meters)\n\n   Format: `circle:{latitude},{longitude};r={radius}`\n\n   Type: `circle:{decimal},{decimal};r={integer}`\n\n   Example: `circle:52.53,13.38;r=10000`\n\n\nThe following constraints apply:\n\n * Either \"at\" or \"in=circle\" is required.\n\n * Parameters \"at\" and \"in=circle\" are mutually exclusive. Only one of them is allowed.\n",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "mobilityMode" : {
        "name" : "mobilityMode",
        "in" : "query",
        "description" : "This field indicates the mode of mobility used by the end user when interacting with the Search\nservice through the customer application. The information is used to improve the relevance of\nsearch results.\n\nFor example, a search for ‚ÄúEV charging station‚Äù will preferentially return charging stations\nsuitable for trucks when the `mobilityMode` field is set to `truck`.\n\nThe `mobilityMode` field accepts a single value.\n\n\nDescription of supported values:\n\n- `car`: A standard motor vehicle primarily designed to transport up to 8 people, rather than cargo.\n- `motorbike`: A two-wheeled vehicle typically used by one or two people, suitable for commuting or long-distance travel.\n- `truck`: A larger vehicle primarily designed for transporting freight.",
        "required" : false,
        "style" : "form",
        "explode" : false,
        "schema" : {
          "type" : "string",
          "enum" : [ "car", "motorbike", "truck" ]
        }
      },
      "name" : {
        "name" : "name",
        "in" : "query",
        "description" : "Full-text filter on POI names/titles. Results with a partial match on the name parameter are included in the response.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "postalCodeMode" : {
        "name" : "postalCodeMode",
        "in" : "query",
        "description" : "Options to return multiple results in areas where a postal code is associated with more than one district or city area.\nWithout these options, the system only provides one result and may leave the district or city name blank or use a default name,\npotentially omitting relevant districts of cities.\n\nDescription of supported values:\n\n- `cityLookup`: When a postal code spans multiple cities, this option gives you all possible combinations of the postal code with the corresponding city names.\n- `districtLookup`: When a postal code spans multiple districts (within one city or across multiple cities), this option gives you all possible combinations of the postal code with the corresponding district and city names.",
        "required" : false,
        "style" : "form",
        "explode" : false,
        "schema" : {
          "type" : "string",
          "enum" : [ "cityLookup", "districtLookup" ]
        }
      },
      "qGeocode" : {
        "name" : "q",
        "in" : "query",
        "description" : "Enter a free-text query\n\nExamples:\n * `125, Berliner, berlin`\n * `Beacon, Boston, Hospital`\n * `Schnurrbart German Pub and Restaurant, Hong Kong`\n\n_Note: Either `q` or `qq`-parameter is required on this endpoint. Both parameters can be provided in the same request._\n",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string",
          "example" : "Invalidenstra√üe 116 Berlin"
        }
      },
      "qq" : {
        "name" : "qq",
        "in" : "query",
        "description" : "Enter a qualified query. A qualified query is similar to a free-text query, but in a structured manner.\n It can take multiple _sub-parameters_, separated by semicolon, allowing to specify different aspects of a query.\n\nCurrently supported _sub-parameters_ are `country`, `state`, `county`, `city`, `district`, `street`,\n `houseNumber`, and `postalCode`.\n\nFormat: `{sub-parameter}={string}[;{sub-parameter}={string}]*`\n\nExamples:\n * `city=Berlin;country=Germany;street=Friedrichstr;houseNumber=20`\n * `city=Berlin;country=Germany`\n * `postalCode=10969`\n\n_Note: Either `q` or `qq`-parameter is required on this endpoint. Both parameters can be provided in the same request._\n",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "rankingAutosuggestDiscover" : {
        "name" : "ranking",
        "in" : "query",
        "description" : "**BETA** Selects the ranking mode to be used.\nThis parameter only applies to places category or chain search use cases (See [discover-use-cases](https://www.here.com/docs/bundle/geocoding-and-search-api-developer-guide/page/topics/endpoint-discover-brief.html#use-cases)).\nIt is ignored for other search use cases.\n\n\nDescription of supported values:\n\n- **BETA** `excursionDistance`: Rank results in along the route parameter by increasing distance\n  from the route polyline.\n\n  Constraint: `ranking=excursionDistance` returns a 400 status code if the `route` parameter is not specified.",
        "required" : false,
        "style" : "form",
        "explode" : false,
        "schema" : {
          "type" : "string",
          "enum" : [ "excursionDistance" ]
        }
      },
      "rankingBrowse" : {
        "name" : "ranking",
        "in" : "query",
        "description" : "**BETA** Selects the ranking mode to be used.\nThis parameter only applies to places category, cuisine or chain search use cases (See [browse-category-filter](https://www.here.com/docs/bundle/geocoding-and-search-api-developer-guide/page/topics/endpoint-browse-brief.html#multigranular-place-category-filter)\nand [browse-chain-filter](https://www.here.com/docs/bundle/geocoding-and-search-api-developer-guide/page/topics/endpoint-browse-brief.html#place-chain-filter)).\nIt is ignored for other search use cases.\n\n\nDescription of supported values:\n\n- **BETA** `excursionDistance`: Rank results in along the route parameter by increasing distance\n  from the route polyline.\n\n  Constraint: `ranking=excursionDistance` returns a 400 status code if the `route` parameter is not specified.",
        "required" : false,
        "style" : "form",
        "explode" : false,
        "schema" : {
          "type" : "string",
          "enum" : [ "excursionDistance" ]
        }
      },
      "route" : {
        "name" : "route",
        "in" : "query",
        "description" : "**BETA** Select within a geographic corridor. This is a hard filter. Results will be returned if they are located within the specified area.\n\nA `route` is defined by a [Flexible Polyline Encoding](https://github.com/heremaps/flexible-polyline),\n followed by an optional width, represented by a sub-parameter \"w\".\n\nFormat: `{route};w={width}`\n\nIn regular expression syntax, the values of `route` look like:\n\n`[a-zA-Z0-9_-]+(;w=\\d+)?`\n\n\"[a-zA-Z0-9._-]+\" is the encoded flexible polyline.\n\n\"w=\\d+\" is the optional width. The width is specified in meters from the center of the path. If no width is provided, the default is 1000 meters.\n\nType: `{Flexible Polyline Encoding};w={integer}`\n\nThe following constraints apply:\n * A `route` MUST contain at least two points (one segment).\n * A `route` MUST NOT contain more than 2,000 points.\n * A `route` MUST NOT have a width of more than 50,000 meters.\n\nExamples:\n * `BFoz5xJ67i1B1B7PzIhaxL7Y`\n * `BFoz5xJ67i1B1B7PzIhaxL7Y;w=5000`\n * `BlD05xgKuy2xCCx9B7vUCl0OhnRC54EqSCzpEl-HCxjD3pBCiGnyGCi2CvwFCsgD3nDC4vB6eC;w=2000`\n\nNote: The last example above can be decoded (using the Python class [here](https://github.com/heremaps/flexible-polyline/tree/master/python) as follows:\n\n```\n>>> import flexpolyline\n>>> polyline = 'BlD05xgKuy2xCCx9B7vUCl0OhnRC54EqSCzpEl-HCxjD3pBCiGnyGCi2CvwFCsgD3nDC4vB6eC'\n>>> flexpolyline.decode(polyline)\n[(52.51994, 13.38663, 1.0), (52.51009, 13.28169, 2.0), (52.43518, 13.19352, 3.0), (52.41073, 13.19645, 4.0),\n (52.38871, 13.15578, 5.0), (52.37278, 13.1491, 6.0), (52.37375, 13.11546, 7.0), (52.38752, 13.08722, 8.0),\n (52.40294, 13.07062, 9.0), (52.41058, 13.07555, 10.0)]\n```\n",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "termsLimit" : {
        "name" : "termsLimit",
        "in" : "query",
        "description" : "Maximum number of Query Terms Suggestions to be returned.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "maximum" : 10,
          "minimum" : 0,
          "type" : "integer",
          "format" : "int32"
        }
      },
      "typesAutocomplete" : {
        "name" : "types",
        "in" : "query",
        "description" : "Limit the result items to the specified types.\n\nProvide one of the supported values or a comma separated list.\n\nDescription of supported values:\n\n- `area`: restricting results to result types `locality` or `administrativeArea` including all the sub-types\n- `city`: restricting results to result type `locality` and locality type `city`\n- `postalCode`: restricting results to postal codes: either result type `postalCodePoint` or result type `locality` with locality type `postalCode`.\n\n    Note that in Ireland and Singapore, where each address has unique postal code,\n    `postalCodePoint` results are replaced by `houseNumber` results.",
        "required" : false,
        "style" : "form",
        "explode" : false,
        "schema" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "area", "city", "postalCode" ]
          }
        }
      },
      "typesGeocode" : {
        "name" : "types",
        "in" : "query",
        "description" : "A comma-separated list of the types that should be included in the response.\n\nIf this parameter is not set, all types are considered for the response.\n\nDescription of supported values:\n\n- `address`: restricting results to result types `houseNumber`, `street`, `postalCodePoint`, `intersection`, or `addressBlock`\n- `area`: restricting results to result types `locality` or `administrativeArea` including all the sub-types\n- `city`: restricting results to result type `locality` and locality type `city`\n- `houseNumber`: restricting results to result type: `houseNumber`, including house number types `PA` (Point Address), `MPA` (Micro Point Address) and\n  `interpolated`, including exact house number matches and house number fallbacks\n- `place`: restricting results to result type `place`\n- `postalCode`: restricting results to postal codes: either result type `postalCodePoint` or result type `locality` with locality type `postalCode`.\n\n    Note that in Ireland and Singapore, where each address has unique postal code,\n    `postalCodePoint` results are replaced by `houseNumber` results.\n- `street`: restricting results to result type `street`",
        "required" : false,
        "style" : "form",
        "explode" : false,
        "schema" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "address", "area", "city", "houseNumber", "place", "postalCode", "street" ]
          }
        }
      },
      "typesMultiRevgeocodeRevgeocode" : {
        "name" : "types",
        "in" : "query",
        "description" : "Limit the result items to the specified types.\n\nProvide one of the supported values or a comma separated list.\n\nThe following constraints apply:\n\n* If a `bearing` parameter is provided, the `types` parameter will accept `types=street` only.\n\n\nDescription of supported values:\n\n- `address`: restricting results to result types `houseNumber`, `street`, `postalCodePoint`, or `addressBlock`.\n  Result type \"intersection\" is excluded from this list because it is not supported in reverse geocoder.\n- `area`: restricting results to result types `locality` or `administrativeArea` including all the sub-types\n- `city`: restricting results to result type `locality` and locality type `city`\n- `street`: restricting results to result type `street`",
        "required" : false,
        "style" : "form",
        "explode" : false,
        "schema" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "address", "area", "city", "street" ]
          }
        }
      },
      "withAutosuggestDiscover" : {
        "name" : "with",
        "in" : "query",
        "description" : "Activate certain features or consider specific kinds of results, that would not be active or provided by default.\n\nDescription of supported values:\n\n- **ALPHA, RESTRICTED** `recommendPlaces`: The value \"recommendPlaces\" specifies that the endpoint ranks the results of place category search requests according to their importance and prominence, when this applies to the following categories: restaurant, coffee, supermarket, hotel, airport",
        "required" : false,
        "style" : "form",
        "explode" : false,
        "schema" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "recommendPlaces" ]
          }
        }
      },
      "withGeocode" : {
        "name" : "with",
        "in" : "query",
        "description" : "Activate certain features or consider specific kinds of results, that would not be active or provided by default.\n\nDescription of supported values:\n\n- **RESTRICTED** `MPA`: Enables geocoding to Micro Point Address results. GS7 supports micro point addresses in the following countries: AUS, CAN, NZL, USA, PRI.",
        "required" : false,
        "style" : "form",
        "explode" : false,
        "schema" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "MPA" ]
          }
        }
      },
      "withMultiRevgeocodeRevgeocode" : {
        "name" : "with",
        "in" : "query",
        "description" : "Activate certain features or consider specific kinds of results, that would not be active or provided by default.\n\nDescription of supported values:\n\n- `unnamedStreets`: Enables the retrieval of unnamed street results.\n- **ALPHA** `estimatedAreaFallback`: Adds district and city names to results in areas where the respective names cannot be obtained from area polygon data.\n  Instead, the Reverse Geocoder estimates these names based on administrative assignments to streets.\n  A flag ‚Äú`estimatedAreaFallback: true`‚Äù is returned in response which indicates the administrative result is estimated.\n  'Distance' is calculated from the input to the closest street section, user could judge the result confidence from the distance.\n  While this estimation can be helpful in many cases, it may not always be completely accurate.\n  The probability of false results, such as neighboring district or city names, exists primarily in border regions.\n  This means that when streets are near the border between different administrative districts or cities,\n  the estimation may occasionally provide the wrong district or city name.",
        "required" : false,
        "style" : "form",
        "explode" : false,
        "schema" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "estimatedAreaFallback", "unnamedStreets" ]
          }
        }
      },
      "evStation" : {
        "name" : "evStation",
        "in" : "query",
        "description" : "`evStation[<property>]`  deep object parameter allows to add constraints on the places results of category EV station (`700-7600-0322`, `700-7600-0323`, `700-7600-0324`).\nSearch results of other types or categories will be returned without these constraints to be applied. Each property describes a separate constraint.\n\nCurrently, the following properties are supported:\n\n* `evStation[minPower]`: Sets a constraint on the minimum power in kW delivered by at least one of the station EVSE. Accepted is a single decimal value.\n\n* `evStation[connectorTypeIds]`: Sets a constraint on the connector type ID that the EV station result should have for at least one of its EVSE.\n   Accepted are comma-separated integer values for non-deprecated connectors, listed in the [HERE EV Charge Points API v2 documentation](https://www.here.com/docs/bundle/ev-charge-points-api-developer-guide/page/topics/resource-type-connector-types.html)\n\n* `evStation[supplierNames]`: Sets a constraint on the charge point operator name operating of the EV station place result. Accepted are multiple comma-separated names.\n\n* `evStation[current]`: Sets a constraint on the current phase provided at one of the EVSE of the EV station result. Accepted is either AC or DC\n\n* `evStation[eMobilityServiceProviderPartnerIds]`: Sets a constraint on the e-Mobility Service Providers (eMSP) available at the EV station place result.\n\n* `evStation[paymentMethodIds]`: Sets a constraint on the payment methods that the EV station result should support.\n\nExample (line-breaks used for the sake of readability):\n```\nevStation[connectorTypeIds]=29,33&evStation[minPower]=50.0&evStation[supplierNames]=ChargePoint&\nevStation[eMobilityServiceProviderPartnerIds]=1f351b84-cca5-11ed-8155-42010aa40002&evStation[paymentMethodIds]=creditCard\n```\n",
        "required" : false,
        "style" : "deepObject",
        "explode" : true,
        "schema" : {
          "$ref" : "#/components/schemas/evStation"
        }
      },
      "langAutocomplete" : {
        "name" : "lang",
        "in" : "query",
        "description" : "Select the preferred response language for result rendering from a list of BCP47 compliant Language Codes.\nThe Autocomplete endpoint tries to detect the query language based on matching name variants and then chooses the same language for the response.\n\nTherefore the end-user can see and recognize all the entered terms in the same language as in the query.\nThe specified preferred language is used only for not matched address tokens and for matched address tokens in case of ambiguity\n",
        "required" : false,
        "style" : "form",
        "explode" : false,
        "schema" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "langAutosuggestBrowseDiscoverGeocodeLookupMultiRevgeocodeRevgeocode" : {
        "name" : "lang",
        "in" : "query",
        "description" : "Select the language to be used for result rendering from a list of [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) compliant language codes.",
        "required" : false,
        "style" : "form",
        "explode" : false,
        "schema" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "limitAutocomplete" : {
        "name" : "limit",
        "in" : "query",
        "description" : "Maximum number of results to be returned.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "maximum" : 20,
          "minimum" : 1,
          "type" : "integer",
          "format" : "int32",
          "default" : 5
        }
      },
      "limitAutosuggestBrowseDiscover" : {
        "name" : "limit",
        "in" : "query",
        "description" : "Maximum number of results to be returned. For paginated queries (`offset` parameter) it specifies the expected number of results per page.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "maximum" : 100,
          "minimum" : 1,
          "type" : "integer",
          "format" : "int32",
          "default" : 20
        }
      },
      "limitGeocode" : {
        "name" : "limit",
        "in" : "query",
        "description" : "Maximum number of results to be returned.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "maximum" : 100,
          "minimum" : 1,
          "type" : "integer",
          "format" : "int32",
          "default" : 20
        }
      },
      "limitMultiRevgeocode" : {
        "name" : "limit",
        "in" : "query",
        "description" : "Maximum number of results to be returned.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "maximum" : 10,
          "minimum" : 1,
          "type" : "integer",
          "format" : "int32",
          "default" : 1
        }
      },
      "limitRevgeocode" : {
        "name" : "limit",
        "in" : "query",
        "description" : "Maximum number of results to be returned.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "maximum" : 100,
          "minimum" : 1,
          "type" : "integer",
          "format" : "int32",
          "default" : 1
        }
      },
      "offset" : {
        "name" : "offset",
        "in" : "query",
        "description" : "**ALPHA** If set, the `offset` parameter switches on the pagination mode:\n\n* The response element items is returned together with the 4 attributes: `limit`, `offset`, `count`, `nextOffset`.\n* The response becomes a \"page\" of `<count>` results at a certain `offset`.\n* If `offset` parameter is not set, there is no pagination and none of the 4 attributes is returned.\n\nNote that if the `offset` value exceeds the total number of `items`, the response `items` list will be empty.\n",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "maximum" : 99,
          "minimum" : 0,
          "type" : "integer",
          "format" : "int32"
        }
      },
      "politicalView" : {
        "name" : "politicalView",
        "in" : "query",
        "description" : "Toggle the political view.\n\nThis parameter accepts a single ISO 3166-1 alpha-3 country code in all uppercase.\n\nIf a valid 3-letter country code is provided for which GS7 does not have a dedicated political view, it will fallback to the default view.\n\nThe following political views are currently supported:\n\n- `ARG`: Argentina's view on the Southern Patagonian Ice Field and Tierra Del Fuego, including the Falkland Islands, South Georgia, and South Sandwich Islands\n- `EGY`: Egypt's view on Bir Tawil\n- `IND`: India's view on Gilgit-Baltistan\n- `KEN`: Kenya's view on the Ilemi Triangle\n- `MAR`: Morocco's view on Western Sahara\n- `PAK`: Pakistan's view on Jammu and Kashmir and the Junagadh Area\n- `RUS`: Russia's view on Crimea\n- `SDN`: Sudan's view on the Halaib Triangle\n- `SRB`: Serbia's view on Kosovo, Vukovar, and Sarengrad Islands\n- `SUR`: Suriname's view on the Courantyne Headwaters and Lawa Headwaters\n- `SYR`: Syria's view on the Golan Heights\n- `TUR`: Turkey's view on Cyprus and Northern Cyprus\n- `TZA`: Tanzania's view on Lake Malawi\n- `URY`: Uruguay's view on Rincon de Artigas\n- `VNM`: Vietnam's view on the Paracel Islands and Spratly Islands",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "showAutocomplete" : {
        "name" : "show",
        "in" : "query",
        "description" : "Select additional fields to be rendered in the response.\nPlease note that some of the fields involve additional webservice calls and can increase the overall response time.\n\nThe value is a comma-separated list of the sections to be enabled.\nFor some sections there is a long and a short ID.\n\nDescription of supported values:\n\n- `streetInfo`: For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.",
        "required" : false,
        "style" : "form",
        "explode" : false,
        "schema" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "streetInfo" ]
          }
        }
      },
      "showAutosuggest" : {
        "name" : "show",
        "in" : "query",
        "description" : "Select additional fields to be rendered in the response.\nPlease note that some of the fields involve additional webservice calls and can increase the overall response time.\n\nThe value is a comma-separated list of the sections to be enabled.\nFor some sections there is a long and a short ID.\n\nDescription of supported values:\n\n- `details`: Renders address and contact details, as well as opening hours of the searched place.\n- `phonemes`: Renders phonemes for address and place names into the results.\n- `streetInfo`: For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.\n- `tz`: Renders result items with additional time zone information.",
        "required" : false,
        "style" : "form",
        "explode" : false,
        "schema" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "details", "phonemes", "streetInfo", "tz" ]
          }
        }
      },
      "showBrowseDiscover" : {
        "name" : "show",
        "in" : "query",
        "description" : "Select additional fields to be rendered in the response.\nPlease note that some of the fields involve additional webservice calls and can increase the overall response time.\n\nThe value is a comma-separated list of the sections to be enabled.\nFor some sections there is a long and a short ID.\n\nDescription of supported values:\n\n- `eMobilityServiceProviders`: Returns for each place of category EV station (`700-7600-0322`, `700-7600-0323`, `700-7600-0324`)\n  the list of e-Mobility Service Providers (eMSP) in `extended.evStation` field.\n- `ev`: Returns for each place of category EV station (`700-7600-0322`, `700-7600-0323`, `700-7600-0324`)\n\n  * connector groups details in `extended.evStation` field and\n  * detailed connectors availability in `extended.evAvailability` field.\n\n  Please note that the use of this option may impact latency.\n- `phonemes`: Renders phonemes for address and place names into the results.\n- `streetInfo`: For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.\n- `tz`: Renders result items with additional time zone information.\n- **BETA, RESTRICTED** `tripadvisor`: If available, adds images, ratings, and editorials from Tripadvisor (TM) in the `media` field of `place` results.",
        "required" : false,
        "style" : "form",
        "explode" : false,
        "schema" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "eMobilityServiceProviders", "ev", "phonemes", "streetInfo", "tripadvisor", "tz" ]
          }
        }
      },
      "showGeocode" : {
        "name" : "show",
        "in" : "query",
        "description" : "Select additional fields to be rendered in the response.\nPlease note that some of the fields involve additional webservice calls and can increase the overall response time.\n\nThe value is a comma-separated list of the sections to be enabled.\nFor some sections there is a long and a short ID.\n\nDescription of supported values:\n\n- `countryInfo`: For each result item renders additional block with the country info, such as\n  [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) and\n  [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country code.\n- `parsing`\n- `postalCodeDetails`: For each result item of types `postalCodePoint` renders block with additional information about this postal code,\n  such as postal code type: ZIP or ZIP+4; ZIP classification code: PO BOX, Unique or military; record type code for ZIP+4 codes.\n  This feature is currently available only in the countries which are using ZIP codes - USA, PRI, VIR, GUM, MNP and ASM.\n- `secondaryUnitInfo`: For each matched unit designator, the geocode endpoint returns an additional block\n  containing the normalized unit type and unit value. GS7 geocode currently supports\n  normalized secondary unit info in the following countries:\n  AUS, AUT, BRA, CAN, ESP, FRA, GBR, IDN, IND, NZL, TUR, TWN, USA.\n- `streetInfo`: For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.\n- `tz`: Renders result items with additional time zone information.",
        "required" : false,
        "style" : "form",
        "explode" : false,
        "schema" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "countryInfo", "parsing", "postalCodeDetails", "secondaryUnitInfo", "streetInfo", "tz" ]
          }
        }
      },
      "showLookup" : {
        "name" : "show",
        "in" : "query",
        "description" : "Select additional fields to be rendered in the response.\nPlease note that some of the fields involve additional webservice calls and can increase the overall response time.\n\nThe value is a comma-separated list of the sections to be enabled.\nFor some sections there is a long and a short ID.\n\nDescription of supported values:\n\n- `countryInfo`: For each result item renders additional block with the country info, such as\n  [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) and\n  [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country code.\n- `eMobilityServiceProviders`: Returns for each place of category EV station (`700-7600-0322`, `700-7600-0323`, `700-7600-0324`)\n  the list of e-Mobility Service Providers (eMSP) in `extended.evStation` field.\n- `ev`: Returns for each place of category EV station (`700-7600-0322`, `700-7600-0323`, `700-7600-0324`)\n\n  * connector groups details in `extended.evStation` field and\n  * detailed connectors availability in `extended.evAvailability` field.\n\n  Please note that the use of this option may impact latency.\n- `phonemes`: Renders phonemes for address and place names into the results.\n- `postalCodeDetails`: For each result item of types `postalCodePoint` renders block with additional information about this postal code,\n  such as postal code type: ZIP or ZIP+4; ZIP classification code: PO BOX, Unique or military; record type code for ZIP+4 codes.\n  This feature is currently available only in the countries which are using ZIP codes - USA, PRI, VIR, GUM, MNP and ASM.\n- `streetInfo`: For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.\n- `tz`: Renders result items with additional time zone information.\n- **BETA, RESTRICTED** `tripadvisor`: If available, adds images, ratings, and editorials from Tripadvisor (TM) in the `media` field of `place` results.",
        "required" : false,
        "style" : "form",
        "explode" : false,
        "schema" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "countryInfo", "eMobilityServiceProviders", "ev", "phonemes", "postalCodeDetails", "streetInfo", "tripadvisor", "tz" ]
          }
        }
      },
      "showMapReferencesAutosuggest" : {
        "name" : "showMapReferences",
        "in" : "query",
        "description" : "Return the map references of the location objects\n\nDescription of supported values:\n\n- `adminIds`: Return the ids for the admin hierarchy of the response, to enable cross referencing into other services or data applications based on HERE Map Content\n- `pointAddress`: Return the reference of the point address,\n  to enable cross referencing into other services or data applications\n  based on HERE Map Content\n- `segments`: Return the street segment references from the result's access position,\n  to enable cross referencing into other services or data applications\n  based on HERE Map Content",
        "required" : false,
        "style" : "form",
        "explode" : false,
        "schema" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "adminIds", "pointAddress", "segments" ]
          }
        }
      },
      "showMapReferencesGeocodeLookupMultiRevgeocodeRevgeocode" : {
        "name" : "showMapReferences",
        "in" : "query",
        "description" : "Return the map references of the location objects\n\nDescription of supported values:\n\n- `adminIds`: Return the ids for the admin hierarchy of the response, to enable cross referencing into other services or data applications based on HERE Map Content\n- `cmVersion`: Return the core map version number of the region where the result is located\n- `links`: Return the link references from the result's access position,\n  to enable cross referencing into other services or data applications\n- `pointAddress`: Return the reference of the point address,\n  to enable cross referencing into other services or data applications\n  based on HERE Map Content\n- `segments`: Return the street segment references from the result's access position,\n  to enable cross referencing into other services or data applications\n  based on HERE Map Content\n\n    **NOTE** The previous parameter `show=hmcReference` is deprecated and replaced\n    by `showMapReferences=segments` which serves the same purpose.",
        "required" : false,
        "style" : "form",
        "explode" : false,
        "schema" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "adminIds", "cmVersion", "links", "pointAddress", "segments" ]
          }
        }
      },
      "showMultiRevgeocodeRevgeocode" : {
        "name" : "show",
        "in" : "query",
        "description" : "Select additional fields to be rendered in the response.\nPlease note that some of the fields involve additional webservice calls and can increase the overall response time.\n\nThe value is a comma-separated list of the sections to be enabled.\nFor some sections there is a long and a short ID.\n\nDescription of supported values:\n\n- `countryInfo`: For each result item renders additional block with the country info, such as\n  [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) and\n  [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country code.\n- `postalCodeDetails`: For each result item of types `postalCodePoint` renders block with additional information about this postal code,\n  such as postal code type: ZIP or ZIP+4; ZIP classification code: PO BOX, Unique or military; record type code for ZIP+4 codes.\n  This feature is currently available only in the countries which are using ZIP codes - USA, PRI, VIR, GUM, MNP and ASM.\n- `streetInfo`: For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.\n- `tz`: Renders result items with additional time zone information.",
        "required" : false,
        "style" : "form",
        "explode" : false,
        "schema" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "countryInfo", "postalCodeDetails", "streetInfo", "tz" ]
          }
        }
      },
      "showNavAttributes" : {
        "name" : "showNavAttributes",
        "in" : "query",
        "description" : "Return requested additional attributes for segments in a road network if `showNavAttributes` parameter is specified with valid value and relevant data is available.\n\nThe value is a comma-separated list of the sections to be enabled.\n\nDescription of supported values:\n\n- `access`: Return the vehicle types allowed on a road or lane.\n- `functionalClass`: Return the functional class which is used to classify roads depending on the speed, importance and connectivity of the road.\n- `physical`: Return the values to describe special physical characteristics of a road.\n- `speedLimits`: Include speed limit and travel direction of the road in the results where available in content and when requested by the client application.\n\n  Note on `speedLimits`:\n  - The feature is not supported in Japan.\n  - This feature is subject to premium pricing. For details, contact your HERE customer representative.",
        "required" : false,
        "style" : "form",
        "explode" : false,
        "schema" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "access", "functionalClass", "physical", "speedLimits" ]
          }
        }
      },
      "showRelatedGeocode" : {
        "name" : "showRelated",
        "in" : "query",
        "description" : "allows enriching some types of response items with related items\n\nDescription of supported values:\n\n- **RESTRICTED** `MPA`: For `type=houseNumber` and `houseNumberType=PA` result items, include a block containing a list of micro point addresses associated to this address, such as buildings, floors (levels) or suites (units). GS7 supports micro point addresses in the following countries: AUS, CAN, NZL, USA, PRI.\n- `intersections`: For street and house number results, include a block containing a list of intersections nearest to the address.\n- **RESTRICTED** `parentPA`: For `type=houseNumber` and `houseNumberType=MPA` result items, include a block containing the \"parent\" point addresses associated with this micro point address. GS7 supports micro point addresses in the following countries: AUS, CAN, NZL, USA, PRI.",
        "required" : false,
        "style" : "form",
        "explode" : false,
        "schema" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "MPA", "intersections", "parentPA" ]
          }
        }
      },
      "showRelatedLookup" : {
        "name" : "showRelated",
        "in" : "query",
        "description" : "allows enriching some types of response items with related items\n\nDescription of supported values:\n\n- **RESTRICTED** `MPA`: For `type=houseNumber` and `houseNumberType=PA` result items, include a block containing a list of micro point addresses associated to this address, such as buildings, floors (levels) or suites (units). GS7 supports micro point addresses in the following countries: AUS, CAN, NZL, USA, PRI.\n- **RESTRICTED** `parentPA`: For `type=houseNumber` and `houseNumberType=MPA` result items, include a block containing the \"parent\" point addresses associated with this micro point address. GS7 supports micro point addresses in the following countries: AUS, CAN, NZL, USA, PRI.",
        "required" : false,
        "style" : "form",
        "explode" : false,
        "schema" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "MPA", "parentPA" ]
          }
        }
      },
      "showRelatedMultiRevgeocodeRevgeocode" : {
        "name" : "showRelated",
        "in" : "query",
        "description" : "allows enriching some types of response items with related items\n\nDescription of supported values:\n\n- `intersections`: For street and house number results, include a block containing a list of intersections nearest to the address.\n- `nearbyAddress`: Add nearby address as additional reference to the street level results in Reverse Geocode or Multi-Reverse Geocode, the feature is only available with parameter `bearing` or `types=street`.",
        "required" : false,
        "style" : "form",
        "explode" : false,
        "schema" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "intersections", "nearbyAddress" ]
          }
        }
      },
      "showTranslations" : {
        "name" : "showTranslations",
        "in" : "query",
        "description" : "Shows translations and alternative names of the provided fields in all available languages.\n\nThis parameter accepts comma separated list of allowed fields for which translations are required.\n\nDescription of supported values:\n\n- `city`: shows alternative names and translations available for address field `city`\n- `county`: shows alternative names and translations available for address field `county`\n- `district`: shows alternative names and translations available for address field `district`\n- `state`: shows alternative names and translations available for address field `state`",
        "required" : false,
        "style" : "form",
        "explode" : false,
        "schema" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "city", "county", "district", "state" ]
          }
        }
      },
      "X-Request-ID" : {
        "name" : "X-Request-ID",
        "in" : "header",
        "description" : "Used to correlate requests with their responses within a customer's application, for logging and error reporting.\n\nFormat: Free string, but a valid UUIDv4 is recommended.",
        "required" : false,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "type" : "string"
        }
      }
    },
    "securitySchemes" : {
      "Bearer" : {
        "type" : "http",
        "description" : "A token obtained from a separate endpoint using client credentials and an OAuth 1.0a HMAC-SHA256 signed request.\nFor more information on how to get a bearer token, see the\n[Identity & Access Management Guide](https://developer.here.com/documentation/identity-access-management/dev_guide/index.html).\n",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      },
      "ApiKey" : {
        "type" : "apiKey",
        "description" : "A key generated specifically to authenticate API requests.\nFor more information on how to get an API key, see the\n[Identity & Access Management Guide](https://developer.here.com/documentation/identity-access-management/dev_guide/index.html).\n",
        "name" : "apiKey",
        "in" : "query"
      }
    }
  }
}